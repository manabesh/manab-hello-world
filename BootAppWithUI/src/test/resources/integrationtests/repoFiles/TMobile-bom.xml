<?xml version="1.0" encoding="UTF-8"?><DARepository>
<DARepositoryVersion DABuild="787" DAMajorRelease="4" DAMinorRelease="8" DAVersion="2018-04-16 17:39:22"/>
<Libraries/>
<Categories>
<Category Name="Telcom" TestStoragePercentage="0">
<Description>TMobile Decsioning</Description>
<Products>
<Product CrossSellCategoryName="" DefaultDecisionFlowName="df_WFMSmartCC" DownSellProductName="" Name="PRD10" ProductCode="code9" ProductStrategyName="" UpSellProductName="" UseProductSeverityThreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Description/>
<ProductEffectiveDate/>
</Product>
<Product CrossSellCategoryName="" DefaultDecisionFlowName="df_BusinessVerificationService" DownSellProductName="" Name="PRD2" ProductCode="code5" ProductStrategyName="" UpSellProductName="" UseProductSeverityThreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Description/>
<ProductEffectiveDate/>
</Product>
<Product CrossSellCategoryName="" DefaultDecisionFlowName="df_CCUpgradeNeustar" DownSellProductName="" Name="PRD3" ProductCode="code4" ProductStrategyName="" UpSellProductName="" UseProductSeverityThreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Description/>
<ProductEffectiveDate/>
</Product>
<Product CrossSellCategoryName="" DefaultDecisionFlowName="df_CSA" DownSellProductName="" Name="PRD4" ProductCode="code3" ProductStrategyName="" UpSellProductName="" UseProductSeverityThreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Description/>
<ProductEffectiveDate/>
</Product>
<Product CrossSellCategoryName="" DefaultDecisionFlowName="df_DupVelocity" DownSellProductName="" Name="PRD5" ProductCode="code2" ProductStrategyName="" UpSellProductName="" UseProductSeverityThreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Description/>
<ProductEffectiveDate/>
</Product>
<Product CrossSellCategoryName="" DefaultDecisionFlowName="df_PCR6_CreditClass_Alerts" DownSellProductName="" Name="PRD6" ProductCode="code6" ProductStrategyName="" UpSellProductName="" UseProductSeverityThreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Description/>
<ProductEffectiveDate/>
</Product>
<Product CrossSellCategoryName="" DefaultDecisionFlowName="df_PGCreditClass" DownSellProductName="" Name="PRD7" ProductCode="code8" ProductStrategyName="" UpSellProductName="" UseProductSeverityThreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Description/>
<ProductEffectiveDate/>
</Product>
<Product CrossSellCategoryName="" DefaultDecisionFlowName="df_UWR" DownSellProductName="" Name="PRD8" ProductCode="code7" ProductStrategyName="" UpSellProductName="" UseProductSeverityThreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Description/>
<ProductEffectiveDate/>
</Product>
<Product CrossSellCategoryName="" DefaultDecisionFlowName="df_BCC" DownSellProductName="" Name="PRD1" ProductCode="PRD1" ProductStrategyName="" UpSellProductName="" UseProductSeverityThreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Description>Test Product 1</Description>
<ProductEffectiveDate/>
</Product>
</Products>
</Category>
</Categories>
<DataMethods>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsTUIRC" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals>
<Local InitialValue="0" Name="xPayPatternStartDateDiff" Type="numeric"/>
<Local InitialValue="0" Name="xEffectiveDateDiff" Type="numeric"/>
<Local InitialValue="null" Name="xDateVerified" Type="timestamp"/>
<Local InitialValue="null" Name="xPaymentPatternStartDate" Type="timestamp"/>
</Locals>
<Description>Generate filters related to IRC</Description>
<ExpressionText>result:=null;

//MONTHS-STATUS-IRC
iNORMALIZED_BUREAU_SEGMENTS.MONTHS_STATUS_IRC := 9999;

if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true) then

              xDateVerified := dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.DATE_VERIFIED);
               xPaymentPatternStartDate := dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_START_DATE);
              // xProfileDate:=dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PROFILE_DATE);
 
               if(xDateVerified &lt;&gt; xPaymentPatternStartDate) then
                              if( TimestampDiff("days", xDateVerified, xPaymentPatternStartDate) &gt; 0) then
                                          //xEffectiveDateDiff:=TimestampDiff("moths",xProfileDate,xDateVerified);
                                          xEffectiveDateDiff:= TimestampDiff("months",iProfileDate,xDateVerified);
                                          xPayPatternStartDateDiff := TimestampDiff("months",iProfileDate, xPaymentPatternStartDate);
                                          iNORMALIZED_BUREAU_SEGMENTS.MONTHS_STATUS_IRC := Min(xPayPatternStartDateDiff,xEffectiveDateDiff);
                            endif
              else
                            iNORMALIZED_BUREAU_SEGMENTS.MONTHS_STATUS_IRC := 9999;
              endif
else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG&lt;&gt;null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG = true) then
              if(iNORMALIZED_BUREAU_SEGMENTS.DATE_STATUS &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.DATE_STATUS) &lt;&gt; "") then
                            iNORMALIZED_BUREAU_SEGMENTS.MONTHS_STATUS_IRC := TimestampDiff("months",iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.DATE_STATUS));
              else
                            iNORMALIZED_BUREAU_SEGMENTS.MONTHS_STATUS_IRC := 9999;
              endif
endif endif


//TELCO
iNORMALIZED_BUREAU_SEGMENTS.TELCO := false;
if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true) then
              if(iNORMALIZED_BUREAU_SEGMENTS.SUBSCRIBER_NAME &lt;&gt; null AND  
                                          dm_GetTELCO(iNORMALIZED_BUREAU_SEGMENTS.SUBSCRIBER_NAME) = true)Then
  
              iNORMALIZED_BUREAU_SEGMENTS.TELCO := true;
 else 
              iNORMALIZED_BUREAU_SEGMENTS.TELCO := false;
 
 endif
else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG = true) then
 if(iNORMALIZED_BUREAU_SEGMENTS.CREDITOR_NAME &lt;&gt; null AND 
                                        dm_GetTELCO(iNORMALIZED_BUREAU_SEGMENTS.CREDITOR_NAME) = true)then
 
 
              iNORMALIZED_BUREAU_SEGMENTS.TELCO := true;
 else 
              iNORMALIZED_BUREAU_SEGMENTS.TELCO := false;
 
 endif
 
endif endif



//IS-TMOBILE
iNORMALIZED_BUREAU_SEGMENTS.IS_TMOBILE := false;
if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true) then
              if(iNORMALIZED_BUREAU_SEGMENTS.SUBSCRIBER_NAME &lt;&gt; null AND 
                            dm_GetTMOBILE(iNORMALIZED_BUREAU_SEGMENTS.SUBSCRIBER_NAME) = true) then
  
                            iNORMALIZED_BUREAU_SEGMENTS.IS_TMOBILE := true;
               else 
                            iNORMALIZED_BUREAU_SEGMENTS.IS_TMOBILE := false;
 
               endif
else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG = true) then
               if(iNORMALIZED_BUREAU_SEGMENTS.CREDITOR_NAME &lt;&gt; null AND 
                              dm_GetTMOBILE(iNORMALIZED_BUREAU_SEGMENTS.CREDITOR_NAME) = true) then
 
  
                            iNORMALIZED_BUREAU_SEGMENTS.IS_TMOBILE := true;
               else 
                            iNORMALIZED_BUREAU_SEGMENTS.IS_TMOBILE := false;
 
              endif
 
endif endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_setSmartCreditCCto_R" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="R" Name="xCreditClass" Type="string"/>
</Locals>
<Description>Sets the Credit Class of Smart Credit</Description>
<ExpressionText>for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do 
		PersonalApplicantOutput.INITIAL_CREDIT_CLASS := xCreditClass;
		PersonalApplicantOutput.FINAL_CREDIT_CLASS := xCreditClass;
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_AssignClarityHit" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xIsClarityHit" Type="string"/>
</Locals>
<Description>Is Clarity hit</Description>
<ExpressionText>xIsClarityHit:="N";

for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.ClarityDataSource.Response.Output.XmlResponse.clearAttributes.supplierAttributes relative to PersonalApplicant do 
	if(supplierAttributes.intl1016&lt;&gt;null and supplierAttributes.intl1016&lt;&gt;"" and Val(supplierAttributes.intl1016)&gt;1)then
    	xIsClarityHit:="Y";
    endif
	if(supplierAttributes.tdtl1016&lt;&gt;null)then
  		xIsClarityHit:="Y";
	endif
endfor
 
 for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.ClarityDataSource.Response.Output.XmlResponse.clearAttributes2.supplierAttributes2 relative to PersonalApplicant do
  if(supplierAttributes2.daysSinceLastCheckCashed&lt;&gt;null and Trim(supplierAttributes2.daysSinceLastCheckCashed)&lt;&gt;"")then
   xIsClarityHit:="Y";
 endif
 endfor

 
 CreditApplication.isClarityHit:=xIsClarityHit;



result := xIsClarityHit;</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_ValidateAttribute" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iValue" Type="numeric"/>
<Input Name="iMinimum" Type="numeric"/>
<Input Name="iMaximum" Type="numeric"/>
</Inputs>
<Locals/>
<Description>Validate values</Description>
<ExpressionText>result := iValue;

if(iValue &gt; iMaximum) then
                 result := iMaximum;
else if(iValue &lt; iMinimum) then
                result := iMinimum;
endif endif

</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_setNEGType" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="null" Name="xApplicationData" Type="timestamp"/>
<Local InitialValue="null" Name="xServiceDate" Type="timestamp"/>
<Local InitialValue="&quot;&quot;" Name="xTenureRecencyStatus" Type="string"/>
<Local InitialValue="0.0" Name="xWriteOffAge" Type="numeric"/>
<Local InitialValue="null" Name="xWriteOffDate" Type="timestamp"/>
<Local InitialValue="null" Name="xTenure" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xagencyCode" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xcurrentCreditClass" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xnegType" Type="string"/>
</Locals>
<Description>Derives the Decision Neg Report Attributes.</Description>
<ExpressionText>xApplicationData:=Timestamp(CreditApplication.receivedDate,null);

for every Application.CreditApplication.PersonalApplicant.NegFileDetails in dor_InProcessNegFile do
         
          if(AgencyCode&lt;&gt;null and AgencyCode&lt;&gt;"")then
                    xagencyCode:=Trim(AgencyCode);
                    if(inStr("SIFA",xagencyCode,true)&gt;0) then
                              xnegType:="SIFA"
                    else if(inStr("SOLD",xagencyCode,true)&gt;0 or inStr("SLD",xagencyCode,true)&gt;0) then
                              xnegType:="SOLD";
                    else if(inStr("SIFA",xagencyCode,true)=0 AND inStr("SOLD",xagencyCode,true)=0 AND inStr("SLD",xagencyCode,true)=0 and ARBalance&lt;&gt;null and ARBalance&gt;25)then
                              xnegType:="CHECK";
                    else if(inStr("SIFA",xagencyCode,true)=0 AND inStr("SOLD",xagencyCode,true)=0 AND inStr("SLD",xagencyCode,true)=0 and ARBalance&lt;&gt;null and ARBalance&lt;=25)then
                              xnegType:="BAL";
                    endif
                    endif
                    endif
                    endif
          endif
  
          if(NegFileDetails.CreditClass&lt;&gt;null and NegFileDetails.CreditClass&lt;&gt;"")then
                    xcurrentCreditClass:=NegFileDetails.CreditClass;
          endif
  
          //Check for valid service start date
          if(NegFileDetails.ServiceStartDate&lt;&gt;null and NegFileDetails.ServiceStartDate&lt;&gt;"") then
                    xServiceDate:=dm_GetParsedDateYYYYMM(NegFileDetails.ServiceStartDate);
          else if(NegFileDetails.ActivityDate&lt;&gt;null and NegFileDetails.ActivityDate&lt;&gt;"") then
                    xServiceDate:=TimestampAdd(dm_formatDate(NegFileDetails.ActivityDate),Duration(-100,"days"));
          else 
                    xServiceDate:=TimestampAdd(Now(),Duration(-1,"days"));
          endif
          endif
  
          //Check for valid Writeoff date
          if(NegFileDetails.WriteOffDate&lt;&gt;null and NegFileDetails.WriteOffDate&lt;&gt;"") then
                    xWriteOffDate:=dm_GetParsedDateYYYYMM(NegFileDetails.WriteOffDate);
          else if(NegFileDetails.ActivityDate&lt;&gt;null and NegFileDetails.ActivityDate&lt;&gt;"") then
                    xWriteOffDate:=dm_GetParsedDateYYYYMM(NegFileDetails.ActivityDate);
          else 
                    xWriteOffDate:=TimestampAdd(Now(),Duration(-100,"days"));
          endif
          endif

          xTenure:=TimestampDiff("months",xWriteOffDate,xServiceDate);
  
          //Check Recency
          if(NegFileDetails.WriteOffDate&lt;&gt;null and NegFileDetails.WriteOffDate&lt;&gt;"") then
                    xWriteOffDate:=dm_GetParsedDateYYYYMM(NegFileDetails.WriteOffDate);
          else if(NegFileDetails.ActivityDate&lt;&gt;null and NegFileDetails.ActivityDate&lt;&gt;"") then
                    xWriteOffDate:=dm_GetParsedDateYYYYMM(NegFileDetails.ActivityDate);
          else if(NegFileDetails.ServiceStartDate&lt;&gt;null and NegFileDetails.ServiceStartDate&lt;&gt;"")then
                    xWriteOffDate:=TimestampAdd(dm_formatDate(NegFileDetails.ActivityDate),Duration(-100,"days"));
          else
                    xWriteOffDate:=TimestampAdd(Now(),Duration(-1,"days"));
          endif
          endif
          endif

          xWriteOffAge:=TimestampDiff("months",xApplicationData,xWriteOffDate);
 
   
          if(xTenure &gt; 12 AND xWriteOffAge &gt; 6)then
                    xTenureRecencyStatus:="PASS";
          else
                    xTenureRecencyStatus:="FAIL";
          endif

          NegFileDetails.NEG_TYPE :=xnegType;
          NegFileDetails.TENURE_RECENCY_STATUS:=xTenureRecencyStatus;
 endfor
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_DetermineCMFInfoPG" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="0.0" Name="xMaxTenureOfHighestCC" Type="numeric"/>
<Local InitialValue="0.0" Name="xMaxTenureOfAllCMF" Type="numeric"/>
<Local InitialValue="0.0" Name="xMaxTenure" Type="numeric"/>
<Local InitialValue="0.0" Name="xTenure" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xHighestCC" Type="string"/>
<Local InitialValue="0" Name="xCounterHighestCreditClass" Type="numeric"/>
<Local InitialValue="999" Name="xTemp" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xCMFCreditClass" Type="string"/>
<Local InitialValue="0" Name="xCountCMFDetails" Type="numeric"/>
</Locals>
<Description>Determine PG CC information out of CMF Details and BAN info</Description>
<ExpressionText>result:=null;
xMaxTenureOfHighestCC:=0;
xMaxTenureOfAllCMF:=0;

for every Application.CreditApplication.PersonalApplicant.CMFDetails relative to PersonalApplicant do 
	 if(CMFDetails.BAN&lt;&gt;null and CMFDetails.BAN&gt;0)then
	  xCountCMFDetails:=xCountCMFDetails+1;
	 endif
 endfor
 
 if(xCountCMFDetails&gt;0)then
	for every Application.CreditApplication.PersonalApplicant.CMFDetails relative to PersonalApplicant do 
	 if(CMFDetails.creditClass&lt;&gt;null and Trim(CMFDetails.creditClass)&lt;&gt;"")then
	  xCMFCreditClass:=CMFDetails.creditClass;
	 endif

	  if(xCMFCreditClass="A")then
		xTemp:=Min(xTemp,1);
	   endif
	   if(xCMFCreditClass="B")then
		xTemp:=Min(xTemp,2);
	   endif
	   if(xCMFCreditClass="J")then
		xTemp:=Min(xTemp,3);
	   endif
	   if(xCMFCreditClass="O")then
		xTemp:=Min(xTemp,4);
	   endif
	   if(xCMFCreditClass="C")then
		xTemp:=Min(xTemp,5);
	   endif
	   if(xCMFCreditClass="L")then
		xTemp:=Min(xTemp,6);
	   endif
	   if(xCMFCreditClass="D")then
		xTemp:=Min(xTemp,7);
	   endif
	   if(xCMFCreditClass="N")then
		xTemp:=Min(xTemp,8);
	   endif
	     if(xCMFCreditClass="H")then
		xTemp:=Min(xTemp,9);
	   endif
	     if(xCMFCreditClass="I")then
		xTemp:=Min(xTemp,10);
	   endif
	     if(xCMFCreditClass="Y")then
		xTemp:=Min(xTemp,11);
	   endif
	endfor 

	if(xTemp=1)then
	xHighestCC:="A";
	endif
	if(xTemp=2)then
	xHighestCC:="B";
	endif
	if(xTemp=3)then
	xHighestCC:="J";
	endif
	if(xTemp=4)then
	xHighestCC:="O";
	endif
	if(xTemp=5)then
	xHighestCC:="C";
	endif
	if(xTemp=6)then
	xHighestCC:="L";
	endif
	if(xTemp=7)then
	xHighestCC:="D";
	endif
	if(xTemp=8)then
	xHighestCC:="N";
	endif
	if(xTemp=9)then
	xHighestCC:="H";
	endif
	if(xTemp=10)then
	xHighestCC:="I";
	endif
	if(xTemp=11)then
	xHighestCC:="Y";
	endif
	
	if(xHighestCC = "") then
		// If CC is not in above list then assign xMaxTenureOfAllCMF
		for every Application.CreditApplication.PersonalApplicant.CMFDetails relative to PersonalApplicant do 

			if(CMFDetails.serviceStartDate&lt;&gt;null and CMFDetails.serviceStartDate&lt;&gt;"")then
			xTenure:=TimestampDiff("months" ,Now(),dm_formatDate(Trim(CMFDetails.serviceStartDate)));
			endif
			
			xMaxTenureOfAllCMF:=Max(xMaxTenureOfAllCMF,xTenure);
		endfor
	else
		//Find the highest CC count and max tenure if highest CC
		for every Application.CreditApplication.PersonalApplicant.CMFDetails in dor_CMFDetailsHighestCC(xHighestCC) do
			CMFDetails.isHighestCreditClass:=true;
			xCounterHighestCreditClass:=xCounterHighestCreditClass+1;
			
			if(CMFDetails.serviceStartDate&lt;&gt;null and CMFDetails.serviceStartDate&lt;&gt;"")then
			xTenure:=TimestampDiff("months" ,Now(),dm_formatDate(Trim(CMFDetails.serviceStartDate)));
			endif
			
			xMaxTenureOfHighestCC:=Max(xMaxTenureOfHighestCC,xTenure);
		endfor
		
		//set the CMFDetails with higest CC and highest tenure as DecisionCMF
		for every Application.CreditApplication.PersonalApplicant.CMFDetails in dor_CMFDetailsHighestCC(xHighestCC) do
			if(CMFDetails.serviceStartDate&lt;&gt;null and CMFDetails.serviceStartDate&lt;&gt;"")then
			xTenure:=TimestampDiff("months" ,Now(),dm_formatDate(Trim(CMFDetails.serviceStartDate)));
			endif
			
			if(xTenure=xMaxTenureOfHighestCC)then
				CMFDetails.isDecisionCMF:=true;
			endif
		endfor
	endif
endif	
	
	for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do 
		if(xCountCMFDetails&gt;0)then
			PersonalApplicantOutput.isCMFAvailable:="Y";
			else PersonalApplicantOutput.isCMFAvailable:="N";
		endif
	 
		if(xCountCMFDetails&gt;1)then
			PersonalApplicantOutput.multipleBAN:="Y";
			else PersonalApplicantOutput.multipleBAN:="N";
		endif
	 
		 if(xCounterHighestCreditClass&gt;1)then
			PersonalApplicantOutput.multipleHighestCC:="Y";
			else PersonalApplicantOutput.multipleHighestCC:="N";
		endif
		if(xHighestCC&lt;&gt;null and xHighestCC&lt;&gt;"")then
			PersonalApplicantOutput.BANHighestCC:=xHighestCC;
			PersonalApplicantOutput.HighestCCHighestTenure:=xMaxTenureOfHighestCC;
		else
			PersonalApplicantOutput.HighestCCHighestTenure:=xMaxTenureOfAllCMF;
		endif
		
			
		
		endfor 
</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_StrategyVersion" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xReleaseVersion" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xstrategyName" Type="string"/>
</Locals>
<Description>Set Strategy Version and Name</Description>
<ExpressionText>result:=null;

//Release Version

//Tim: The last digit should  Only used  in the release notes when specifying the version of each component.
//We need to ensure the builds contain this version number before deploying.
//E.G.  3.1.6.2 

xReleaseVersion :=  "3.3.1.0";

//Strategy Version
for every Application.CreditRequest relative to Application do

            if (DMFunction = "CSA" ) then
                        xstrategyName:="STAGGS PCR4";
                    //    xstrategyVersion:=xReleaseVersion+".001";
            else if (DMFunction = "CCC" ) then
                        xstrategyName:="CONSUMER CREDIT CLASS";
                    //    xstrategyVersion:=xReleaseVersion+".001";
            else if(DMFunction = "CCU" ) then
                        xstrategyName:="CREDIT CLASS UPGRADE";
                    //    xstrategyVersion:=xReleaseVersion+".001";
            else if(DMFunction = "BCC" ) then
                        xstrategyName:="BUSINESS CREDIT CLASS";
                       // xstrategyVersion:=xReleaseVersion+".001";
            else if(DMFunction = "UWR" ) then
                        xstrategyName:="UNDERWRITER REVIEW";
                    //    xstrategyVersion:=xReleaseVersion+".001"; 
            else if(DMFunction = "PGCC" ) then
                        xstrategyName:="PERSONAL GUARANTOR CREDIT CLASS";
                      //  xstrategyVersion:=xReleaseVersion+".001";
            else if(DMFunction = "SCC" ) then
                        xstrategyName:="WFM AND SMART CREDIT";
                      //  xstrategyVersion:=xReleaseVersion+".001";
            else 
                        xstrategyName:="OTHERWISE";
                     //   xstrategyVersion:=xReleaseVersion+".001";
            endif
            endif endif endif endif endif  endif
 endfor
 
for every Application.CreditApplication relative to Application do
            RELEASE_VERSION := xReleaseVersion;
            STRATEGY_NAME:=xstrategyName;
            STRATEGY_VERSION:=RELEASE_VERSION;
endfor
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsTUFunctions" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xMaxOfCMOPA_MMOPA" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xMaxValueInGrid" Type="string"/>
</Locals>
<Description>Generate filters for TU Functions</Description>
<ExpressionText>    result := null;
  
   
    //BUCKET
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BUCKET := 0;
    if(iNORMALIZED_BUREAU_SEGMENTS.NUM_90_DPD &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_90_DPD) &gt; 0) then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BUCKET := 4;
    else if(iNORMALIZED_BUREAU_SEGMENTS.NUM_60_DPD &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_60_DPD) &gt; 0) then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BUCKET := 3;
    else if(iNORMALIZED_BUREAU_SEGMENTS.NUM_30_DPD &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_30_DPD) &gt; 0) then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BUCKET := 2;
    else
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BUCKET := 0;
    endif endif endif

    
    //DEROG
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_DEROG := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true AND 
                              ( (iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND InStringList(TRIM(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE), "AM, AOA, AS, BCD, BDC, BDI, BDM, BKC, BKD, BKL, BKW, BRC, BRR, CBL, CBR, CBT, CCA, CCC, CCD, CDC, CDD, CDL, CDR, CDT, CED, CHK, CLA, CLS, COL, CPM, CPP, CRC, CRD, CRL, CRR, CRT, CRV, CTC, CTV, CWC, DLF, DLU, ET, ETA, ETB, ETD, FCL, FFB, FPD, FPI, FPS, FRD, FTB, GOF, GVC, IRB, IRE, IRO, JUD, JUG, LBR, MCC, MOV, PBB, PCL, PDD, PFC, PNR, PLP, PPA, PPC, PPD, PPL, PRL, PTD, PWG, REA, RLD, RLP, RPD, RPF, RPO, RRE, RVC, RVD, RVE, RVN, RVP, RVR, SET, SK, SLD, SLP, SRG, STU, TTR, WCD, WEP, WPC, WPD, WRC, WRR", ",")) OR 
                                   (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "Y") ) ) then
           iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_DEROG := true;
    else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG = true) then
           iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_DEROG := true;
    endif endif
  
    //CMOPA
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CMOPA := 0;
    if(iNORMALIZED_BUREAU_SEGMENTS.MOP &lt;&gt; null AND InStringList(TRIM(iNORMALIZED_BUREAU_SEGMENTS.MOP), "8A, 8D, 8P, 8R",  ",")) then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CMOPA := 8;
    else if(iNORMALIZED_BUREAU_SEGMENTS.MOP &lt;&gt; null AND 
             ((InStringList(TRIM(iNORMALIZED_BUREAU_SEGMENTS.MOP), "9B, 9P", ",")) OR 
               (InStringList(TRIM(iNORMALIZED_BUREAU_SEGMENTS.MOP), "UR, UC", ",") AND iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND
               InStringList(TRIM(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE), "BKC, BKD, BKL, BKW, BRC, BRR, CBL, CBR, CBT, CDC, CDD, CDL, CDR, CDT, CED, CRC, CRD, CRL, CRR, CRT, CRV, CTC, CTV, FFB, WCD, WEP, WPC, WPD, WRC, WRR",  ",")))) then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CMOPA := 9;
    else if(iNORMALIZED_BUREAU_SEGMENTS.MOP &lt;&gt; null AND InStringList(TRIM(iNORMALIZED_BUREAU_SEGMENTS.MOP), "UR, UC",  ",")) then 
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CMOPA := 0;
    else if(iNORMALIZED_BUREAU_SEGMENTS.MOP &lt;&gt; null) then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CMOPA := VAL(iNORMALIZED_BUREAU_SEGMENTS.MOP);
   endif endif endif endif
   

    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CMOPA = 0 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BUCKET = 0 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_DEROG = false AND
                              CharCount("2", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED) = 0 AND
                                 CharCount("3", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED) = 0 AND
                                 CharCount("4", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED) = 0 AND
                                 CharCount("5", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED) = 0) then
           iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CMOPA := 1;
    endif
   
    //MMOPA
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MMOPA := 0;
    if(iNORMALIZED_BUREAU_SEGMENTS.MAX_DELINQ_MOP &lt;&gt; null AND InStringList(TRIM(iNORMALIZED_BUREAU_SEGMENTS.MAX_DELINQ_MOP), "8A, 8D, 8P, 8R", ",")) then
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MMOPA := 8;
    else if((iNORMALIZED_BUREAU_SEGMENTS.MAX_DELINQ_MOP &lt;&gt; null AND (InStringList(TRIM(iNORMALIZED_BUREAU_SEGMENTS.MAX_DELINQ_MOP), "9B, 9P", ",")) OR
                     (InStringList(TRIM(iNORMALIZED_BUREAU_SEGMENTS.MAX_DELINQ_MOP), "UR, UC", ",") AND
                     (iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND
                     InStringList(TRIM(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE), "BKC, BKD, BKL, BKW, BRC, BRR, CBL, CBR, CBT, CDC, CDD, CDL, CDR, CDT, CED, CRC, CRD, CRL, CRR, CRT, CRV, CTC, CTV, FFB, WCD, WEP, WPC, WPD, WRC, WRR",  ","))))) then
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MMOPA := 9;
    else if(iNORMALIZED_BUREAU_SEGMENTS.MAX_DELINQ_MOP &lt;&gt; null AND InStringList(TRIM(iNORMALIZED_BUREAU_SEGMENTS.MAX_DELINQ_MOP), "UR, UC", ",")) then 
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MMOPA := 0;
    else if(iNORMALIZED_BUREAU_SEGMENTS.MAX_DELINQ_MOP &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.MAX_DELINQ_MOP ) &lt;&gt; "") then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MMOPA := Val(iNORMALIZED_BUREAU_SEGMENTS.MAX_DELINQ_MOP);
     endif endif endif endif


    //WE-BANKRUPTCY
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_BANKRUPTCY := 0;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true) then
         if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CMOPA = 7 OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MMOPA = 7 OR 
                          (iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND InStringList(TRIM(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE), "BCD, BKC, BKD, BKL, BKW, BRC, BRR, CBL, CBR, CBT, CCD, CDC, CDD, CDL, CDR, CDT, CED, CRC, CRD, CRL, CRR, CRT, CRV, CTC, CTV, FFB, PBB, WCD, WEP, WPC, WPD, WRC, WRR", ","))) then
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_BANKRUPTCY := 1;
         endif
    endif


    //WE-DRGNOCOL
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_DRGNOCOL := 0;
    if(((InNumberList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CMOPA, "7, 8, 9", ",")) OR 
                (InNumberList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MMOPA, "7, 8, 9", ",") ) OR
                   (iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND InStringList(TRIM(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE), "AM, AS, BCD, BDI, BDM, BKC, BKD, BKL, BKW, BRC, BRR, CBL, CBR, CBT, CCA, CCD, CDC, CDD, CDL, CDR, CDT, CED, CHK, CLS, CPP, CRC, CRD, CRL, CRR, CRT, CRV, CTC, CTV, DLF, DLU, ET, ETA, ETB, ETD, FCL, FFB, FPD, FPI, FPS, FRD, FTB, GOF, GVC, IRB, IRE, IRO, JUD, JUG, LBR, MCC, MOV, PBB, PDD, PFC, PNR, PLP, PNR, PPA, PPC, PPD, PPL, PRL, PTD, PWG, REA, RLD, RLP, RPD, RPF, RPO, RRE, RVC, RVD, RVE, RVN, RVP, RVR, SET, SK, SLD, SLP, SRG, STU, TTR", ","))) AND 
                             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECTION = false) then
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_DRGNOCOL := 1;
    endif


    //WE-90NOCOL
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_90NOCOL := 0;
    if(((InNumberList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CMOPA, "4, 5, 7, 8, 9", ",")) OR 
                (InNumberList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MMOPA, "4, 5, 7, 8, 9", ",")) OR
                (iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND InStringList(TRIM(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE), "AM, AS, BCD, BDI, BDM, BKC, BKD, BKL, BKW, BRC, BRR, CBL, CBR, CBT, CCA, CCD, CDC, CDD, CDL, CDR, CDT, CED, CHK, CLS, CPP, CRC, CRD, CRL, CRR, CRT, CRV, CTC, CTV, DLF, DLU, ET, ETA, ETB, ETD, FCL, FFB, FPD, FPI, FPS, FRD, FTB, GOF, GVC, IRB, IRE, IRO, JUD, JUG, LBR, MCC, MOV, PBB, PDD, PFC, PNR, PLP, PNR, PPA, PPC, PPD, PPL, PRL, PTD, PWG, REA, RLD, RLP, RPD, RPF, RPO, RRE, RVC, RVD, RVE, RVN, RVP, RVR, SET, SK, SLD, SLP, SRG, STU, TTR", ",")) OR
                (CharCount("4", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED) &gt; 0 AND CharCount("5", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED) &gt; 0) OR
                (iNORMALIZED_BUREAU_SEGMENTS.NUM_90_DPD &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_90_DPD) &gt; 0)) AND 
                          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECTION = false) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_90NOCOL := 1;
    endif


    //RATINGS-OF30
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RATINGS_OF30 := CharCount("2", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED);




    //WORST-EVER
    xMaxOfCMOPA_MMOPA := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CMOPA, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MMOPA);
    xMaxValueInGrid := dm_MinMax_ValueInGrid(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED, "MAX");

    if(InNumberList(xMaxOfCMOPA_MMOPA, "7, 8, 9", ",") OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_DEROG) then
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER := 400;
    else if (xMaxOfCMOPA_MMOPA = 5 OR xMaxValueInGrid = "5") then
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER := 120;
    else if (xMaxOfCMOPA_MMOPA = 4 OR (iNORMALIZED_BUREAU_SEGMENTS.NUM_90_DPD &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_90_DPD) &gt; 0) OR xMaxValueInGrid = "4") then
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER := 90;
    else if (xMaxOfCMOPA_MMOPA = 3 OR (iNORMALIZED_BUREAU_SEGMENTS.NUM_60_DPD &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_60_DPD) &gt; 0) OR xMaxValueInGrid = "3") then
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER := 60;
    else if ((xMaxOfCMOPA_MMOPA = 2 OR (iNORMALIZED_BUREAU_SEGMENTS.NUM_30_DPD &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_30_DPD) &gt; 0) OR xMaxValueInGrid = "2") AND
                              ((iNORMALIZED_BUREAU_SEGMENTS.NUM_30_DPD &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_30_DPD) &gt; 3) OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RATINGS_OF30 &gt; 3)) then
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER := 34;
    else if (xMaxOfCMOPA_MMOPA = 2 OR (iNORMALIZED_BUREAU_SEGMENTS.NUM_30_DPD &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_30_DPD) &gt; 0) OR xMaxValueInGrid = "2") then
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER := 30;
    else if (xMaxOfCMOPA_MMOPA = 1) then
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER := 1;
    else
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER := 0;
    endif endif endif endif endif endif endif


    //PRESENT-STATUS
    if( ((InNumberList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CMOPA, "7, 8, 9", ",")) OR (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECTION) OR (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "Y") ) AND 
                     (iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE, "CWC, ETO, PCL, PFC, PPD, PPL, RPD, RRE, RVR", ",")) ) then
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS := 400;
    else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CMOPA = 5) then
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS := 120;
    else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CMOPA = 4) then
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS := 90;
    else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CMOPA = 3) then
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS := 60;
    else if ((iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CMOPA = 2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER &lt;= 34) AND ((iNORMALIZED_BUREAU_SEGMENTS.NUM_30_DPD &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_30_DPD) &gt; 3) OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RATINGS_OF30 &gt; 3)) then
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS := 34;
    else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CMOPA = 2) then
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS := 30;
    else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CMOPA = 1 OR (iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE, "CWC, ETO, PCL, PFC, PPD, PPL, RPD, RRE, RVR", ","))) then
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS := 1;
    else
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS := 0;

    endif endif endif endif endif endif endif


</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_AbsoluteValue" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iNumber" Type="numeric"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xNumber" Type="numeric"/>
</Locals>
<Description>Returns absolute value</Description>
<ExpressionText>xNumber := iNumber;

if(xNumber &lt; 0) then
              xNumber := 0 - xNumber;
endif


result := xNumber;</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput" Name="dm_InitPCRAlert" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="null" Name="xFRAUD_ALERTS" Type="FRAUD_ALERTS"/>
<Local InitialValue="null" Name="xOTHERS" Type="OTHERS"/>
</Locals>
<Description>Initial step for DM Call 3</Description>
<ExpressionText>//FRAUD_ALERTS

for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS relative to PersonalApplicantOutput do
                  xFRAUD_ALERTS:=FRAUD_ALERTS;
endfor

//Attach OTHERS
if(xFRAUD_ALERTS=null)then
	xFRAUD_ALERTS:=new FRAUD_ALERTS;
	xOTHERS:=new OTHERS;
	Attach(xFRAUD_ALERTS,xOTHERS);
	Attach(PersonalApplicantOutput,xFRAUD_ALERTS);
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsTUGridFilters" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xPosition30" Type="numeric"/>
<Local InitialValue="0.0" Name="xPosition60" Type="numeric"/>
<Local InitialValue="0.0" Name="xPosition90" Type="numeric"/>
<Local InitialValue="0.0" Name="xPosition120" Type="numeric"/>
</Locals>
<Description>Generate filters for TU GRID filters</Description>
<ExpressionText> 
    result := null;

    //RATINGS-OF-60P-MONTHS12
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RATINGS_OF_60P_MONTHS12 := CharCount("3" , iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED_12_MONTHS) + 
                                    CharCount("4" , iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED_12_MONTHS) + CharCount("5", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED_12_MONTHS); //TODO: update logic here


    //WE-GRD6
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 := dm_GetInterpretedTUGridValue(dm_MinMax_ValueInGrid(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED_6_MONTHS, "MAX"));
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt; iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS;
    endif
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 6 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER &gt; iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER;
    endif

    //WE-GRD12
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 := dm_GetInterpretedTUGridValue(dm_MinMax_ValueInGrid(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED_12_MONTHS, "MAX"));
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt; iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 12) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS;
    endif
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 12 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER &gt; iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER;
    endif


    //WE-GRD24
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 := dm_GetInterpretedTUGridValue(dm_MinMax_ValueInGrid(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED_24_MONTHS, "MAX"));
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt; iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 24) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS;
    endif
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 24 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER &gt; iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER;
    endif


    //WE-GRD
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD := dm_GetInterpretedTUGridValue(dm_MinMax_ValueInGrid(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED, "MAX"));
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt; iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS;
    endif
    

    xPosition30 := InStr("2", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED, true);
    xPosition60 := InStr("3", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED, true);
    xPosition90 := InStr("4", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED, true);
    xPosition120 := InStr("5", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED, true);

    //GRDDEL
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL := 9999; 
    if(xPosition30 &lt;&gt; 0) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL, xPosition30);
    endif
    if(xPosition60 &lt;&gt; 0) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL, xPosition60);
    endif
    if(xPosition90 &lt;&gt; 0) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL, xPosition90);
    endif
    if(xPosition120 &lt;&gt; 0) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL, xPosition120);
    endif
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt;= 30) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED;
    endif


    //GRD36
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36 := 9999; 
    if(xPosition30 &lt;&gt; 0) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36 := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36, xPosition30);
    endif
    if(xPosition60 &lt;&gt; 0) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36 := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36, xPosition60);
    endif
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &lt;= 60) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36 := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED;
    endif


    //GRD90P
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P := 9999; 
    if(xPosition90 &lt;&gt; 0) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P, xPosition90);
    endif
    if(xPosition120 &lt;&gt; 0) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P, xPosition120);
    endif
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt;= 90) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED;
    endif





</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_AttachCreditApplicationOutput" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="null" Name="xCreditApplicationOutput" Type="CreditApplicationOutput"/>
</Locals>
<Description>Attach business Applicant Output</Description>
<ExpressionText>result:=null;

for every Application.CreditApplication.CreditApplicationOutput relative to CreditApplication do 
 xCreditApplicationOutput := CreditApplicationOutput;
endfor 

if(xCreditApplicationOutput = null) then
	xCreditApplicationOutput := new CreditApplicationOutput;
	ATTACH(CreditApplication, xCreditApplicationOutput);
endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_get_MarketSize" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="false" Name="xReqNmbrLines" Type="boolean"/>
<Local InitialValue="false" Name="xNmbrEmpl" Type="boolean"/>
</Locals>
<Description/>
<ExpressionText>result:="SMALL";

for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to CreditApplication do 
	if(BusinessApplicantOutput.numberOfEmployees&lt;&gt;null and BusinessApplicantOutput.numberOfEmployees&gt;25 )then
		xNmbrEmpl:=true;
	endif
endfor

if(CreditApplication.requestedNumberOfLines &lt;&gt;null and CreditApplication.requestedNumberOfLines&gt;25)then
	xReqNmbrLines:=true;
endif

if(xNmbrEmpl or xReqNmbrLines) then
	result:="MID";
endif 

</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_RedFlag_Mismatch_Hit" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="false" Name="xflagMismatch" Type="boolean"/>
</Locals>
<Description>Hit any of the Red Flag Mismatch Gaming Velocity</Description>
<ExpressionText>result:="N";

if ( PersonalApplicant.FlagFICOMismatch &lt;&gt; null and PersonalApplicant.FlagFICOMismatch&lt;&gt;"")then
	if(PersonalApplicant.FlagFICOMismatch = "Y") then
		xflagMismatch:=true;
        result:="Y";
	endif
endif

for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.Fraud_Alerts.OTHERS relative to PersonalApplicant do
	if (OTHERS.ScoreFlagDEAD&lt;&gt;null and OTHERS.ScoreFlagDEAD&lt;&gt;"")  then
		if(OTHERS.ScoreFlagDEAD="Y") then
					result:="Y";
		else if (OTHERS.ScoreFlagSSNNI&lt;&gt;null and OTHERS.ScoreFlagSSNNI&lt;&gt;"") then
			if(OTHERS.ScoreFlagSSNNI="Y") then
					result:="Y";
				else if (OTHERS.ScoreFlagSSNMIS&lt;&gt;null and OTHERS.ScoreFlagSSNMIS&lt;&gt;"") then
					if(OTHERS.ScoreFlagSSNMIS="Y") then
							result:="Y";
					else if  (OTHERS.ScoreFlagSSNSUS2&lt;&gt;null and OTHERS.ScoreFlagSSNSUS2&lt;&gt;"") then
						if(OTHERS.ScoreFlagSSNSUS2="Y") then
							result:="Y";
						else if(OTHERS.ScoreFlagSSNSUS3&lt;&gt;null and OTHERS.ScoreFlagSSNSUS3&lt;&gt;"") then
							if(OTHERS.ScoreFlagSSNSUS3="Y")then
								result:="Y";
							else if  (OTHERS.ScoreFlagSSNSUS4&lt;&gt;null and OTHERS.ScoreFlagSSNSUS4&lt;&gt;"") then
								if(OTHERS.ScoreFlagSSNSUS4="Y") then
									result:="Y";
								else if  (OTHERS.ScoreFlagGamingVelocity&lt;&gt;null and OTHERS.ScoreFlagGamingVelocity&lt;&gt;"") then
									if(OTHERS.ScoreFlagGamingVelocity="Y") then
										result:="Y";
										endif
										endif
									endif								
								endif
							endif
						endif
						endif
					endif
					endif
				endif
		endif
		endif
	endif 
	endif
endfor

</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.FDOCollectionList.FDOCollection" Name="dm_PopulateCollectionListData" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iNormalizedSegment" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Populates Collections data to Normalized Data Object</Description>
<ExpressionText>result := null;

if(FDOCollection.AccountDesignatorCode &lt;&gt; null) then
                iNormalizedSegment.ECOA := FDOCollection.AccountDesignatorCode;
endif

if(FDOCollection.AccountNumber &lt;&gt; null) then
                iNormalizedSegment.ACCOUNT_NUMBER := FDOCollection.AccountNumber;
endif

if(FDOCollection.AccountType &lt;&gt; null) then
                iNormalizedSegment.ACCOUNT_TYPE := FDOCollection.AccountType;
endif

if(FDOCollection.ActualPaymentAmount &lt;&gt; null) then
                iNormalizedSegment.ACTUAL_PMT_AMT := FDOCollection.ActualPaymentAmount;
endif

if(FDOCollection.AssignedDate &lt;&gt; null) then
                iNormalizedSegment.DATE_ASSIGNED := FDOCollection.AssignedDate;
endif

if(FDOCollection.Balance &lt;&gt; null) then
                iNormalizedSegment.CUR_BAL_AMT := FDOCollection.Balance;
endif

if(FDOCollection.ComplianceRemarkCode &lt;&gt; null) then
                iNormalizedSegment.COMPLIANCE_REMARK_CODE := FDOCollection.ComplianceRemarkCode;
endif

if(FDOCollection.CreditorClassification &lt;&gt; null) then
                iNormalizedSegment.CREDITOR_CLASSIFICATION := FDOCollection.CreditorClassification;
endif

if(FDOCollection.CreditorName &lt;&gt; null) then
                iNormalizedSegment.CREDITOR_NAME := FDOCollection.CreditorName;
endif

if(FDOCollection.DateClosed &lt;&gt; null) then
                iNormalizedSegment.DATE_CLOSED := FDOCollection.DateClosed;
endif

if(FDOCollection.DateClosedIndicator &lt;&gt; null) then
                iNormalizedSegment.DATE_CLOSED_IND := FDOCollection.DateClosedIndicator;
endif

if(FDOCollection.DateLastActivity &lt;&gt; null) then
                iNormalizedSegment.DATE_LAST_PMT := FDOCollection.DateLastActivity;
endif

if(FDOCollection.DateOpened &lt;&gt; null) then
                iNormalizedSegment.DATE_OPENED := FDOCollection.DateOpened;
endif


//START
//EFX FIX - Need to be removed once we have fix from EFX
//EFX Collection returns DateReported which is populated in DateOpened attribute value.
if(FDOCollection.DateOpened &lt;&gt; null) then
                iNormalizedSegment.DATE_REPORTED := FDOCollection.DateOpened;
endif
//END 

if(FDOCollection.DatePaidOut &lt;&gt; null) then
                iNormalizedSegment.DATE_PAID_OUT := FDOCollection.DatePaidOut;
endif

if(FDOCollection.IndustryCode &lt;&gt; null) then
                iNormalizedSegment.INDUSTRY_CODE := FDOCollection.IndustryCode;
endif

if(FDOCollection.LastPaymentDate &lt;&gt; null) then
                iNormalizedSegment.DATE_LAST_PMT := FDOCollection.LastPaymentDate;
endif

if(FDOCollection.GenericRemarkCode &lt;&gt; null) then
                iNormalizedSegment.GENERIC_REMARK_CODE := FDOCollection.GenericRemarkCode;
endif

if(FDOCollection.NarrativeCode1 &lt;&gt; null) then
               iNormalizedSegment.NARRATIVE_CODE1 := FDOCollection.NarrativeCode1;
endif

if(FDOCollection.NarrativeCode2 &lt;&gt; null) then
               iNormalizedSegment.NARRATIVE_CODE2 := FDOCollection.NarrativeCode2;
endif

if(FDOCollection.OriginalAmount &lt;&gt; null) then
                iNormalizedSegment.ORIGINAL_AMOUNT := FDOCollection.OriginalAmount;
endif

if(FDOCollection.PastDueAmount &lt;&gt; null) then
                iNormalizedSegment.PAST_DUE_AMT := FDOCollection.PastDueAmount;
endif

if(FDOCollection.PortfolioType &lt;&gt; null) then
                iNormalizedSegment.PORTFOLIO_TYPE := FDOCollection.PortfolioType;
endif

if(FDOCollection.RatingRemarkCode &lt;&gt; null) then
                iNormalizedSegment.RATING_REMARK_CODE := FDOCollection.RatingRemarkCode;
endif

if(FDOCollection.RemarksCode &lt;&gt; null) then
                iNormalizedSegment.REMARK_CODE := FDOCollection.RemarksCode;
endif

if(FDOCollection.StatusCode &lt;&gt; null) then
                iNormalizedSegment.MOP := FDOCollection.StatusCode;
                iNormalizedSegment.STATUS_CODE := FDOCollection.StatusCode;    
endif

if(FDOCollection.StatusDate &lt;&gt; null) then
                iNormalizedSegment.DATE_STATUS := FDOCollection.StatusDate;
endif

if(FDOCollection.SubscriberName &lt;&gt; null) then
                iNormalizedSegment.SUBSCRIBER_NAME := FDOCollection.SubscriberName;
endif

if(FDOCollection.SubscriberNumber &lt;&gt; null) then
                iNormalizedSegment.REPORTING_SUB_CODE := FDOCollection.SubscriberNumber;
                iNormalizedSegment.SUBSCRIBER_NUMBER := FDOCollection.SubscriberNumber;
endif

if(FDOCollection.SourceSegment &lt;&gt; null) then
                iNormalizedSegment.SEGMENT_TYPE := FDOCollection.SourceSegment;
                iNormalizedSegment.RECORD_CODE := FDOCollection.SourceSegment;
endif

if(FDOCollection.TapeIndicator &lt;&gt; null) then
                iNormalizedSegment.TAPE_INDICATOR := FDOCollection.TapeIndicator;
endif

if(FDOCollection.UpdateIndicator &lt;&gt; null) then
                iNormalizedSegment.UPDATE_IND := FDOCollection.UpdateIndicator;
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_DefaultCreditClassPGCC" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xAvailableCCTrigger" Type="string"/>
</Locals>
<Description>Determine Default Credit Class for CCC.</Description>
<ExpressionText>for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to CreditApplication do
	if(BusinessApplicantOutput.FINAL_CREDIT_CLASS=null OR Trim(BusinessApplicantOutput.FINAL_CREDIT_CLASS)="")then
		xAvailableCCTrigger:="5";
	endif
endfor
//set default only when final credit class is blank
if(xAvailableCCTrigger = "5") then
	for every Application.CreditApplication.PersonalApplicant relative to CreditApplication do
		 if(PersonalApplicant.OFACFlag&lt;&gt;null and PersonalApplicant.OFACFlag&lt;&gt;"" and PersonalApplicant.OFACFlag="Y")then
			 xAvailableCCTrigger:="OFAC";
		else if(PersonalApplicant.FlagHotName&lt;&gt;null and PersonalApplicant.FlagHotName&lt;&gt;"" and PersonalApplicant.FlagHotName="Y")then
			xAvailableCCTrigger:="HotName";
		endif  endif
	endfor
	for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to CreditApplication do
		if(BusinessApplicantOutput.RESULT_NEG_CREDIT_CLASS &lt;&gt;null and BusinessApplicantOutput.RESULT_NEG_CREDIT_CLASS&lt;&gt;"" )then
			xAvailableCCTrigger:="NegFile";
		endif
	endfor
endif
for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to CreditApplication do
	if(xAvailableCCTrigger&lt;&gt;null or xAvailableCCTrigger&lt;&gt;"")then
		if(xAvailableCCTrigger="OFAC" or xAvailableCCTrigger="HotName")then
			CreditApplication.REVIEW_CREDIT_CLASS:="S";
		else if(xAvailableCCTrigger="NegFile")then
			BusinessApplicantOutput.FINAL_CREDIT_CLASS:="6";
		else if(xAvailableCCTrigger="5")then
			BusinessApplicantOutput.FINAL_CREDIT_CLASS:="5";
		endif endif endif
	endif
endfor
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_InitializeGaming" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="0.0" Name="xGamingVelocityCounter" Type="numeric"/>
<Local InitialValue="null" Name="xCreditApplicationOutput" Type="CreditApplicationOutput"/>
</Locals>
<Description>Initialize Gaming data</Description>
<ExpressionText>result := null;

for every Application.CreditApplication.DuplicateApplications relative to CreditApplication do

               for every Application.CreditApplication.DuplicateApplications.DuplicateApplication relative to DuplicateApplications do
                             if(DuplicateApplication.GamingVelocityCounter &lt;&gt; null AND DuplicateApplication.GamingVelocityCounter = 1) then
                                           xGamingVelocityCounter := xGamingVelocityCounter + 1;
                            endif

                              //Assign Duplicate by Channels
                              dm_AssignDuplicateSummary(DuplicateApplication.Channel, 0, DuplicateApplication.GamingVelocityCounter);
               endfor
endfor



//create CreditApplicationOutput Object if not available
for every Application.CreditApplication.CreditApplicationOutput relative to CreditApplication do
          xCreditApplicationOutput := CreditApplicationOutput;
endfor
    
if(xCreditApplicationOutput = null) then
         xCreditApplicationOutput := new CreditApplicationOutput;
         ATTACH(CreditApplication, xCreditApplicationOutput);
endif


//set counters
for every Application.CreditApplication.CreditApplicationOutput relative to CreditApplication do
              CreditApplicationOutput.GamingVelocityCounter := xGamingVelocityCounter;
endfor


//set velocity
for every Application.CreditApplication.CreditApplicationOutput relative to CreditApplication do
              CreditApplicationOutput.GamingVelocity := false;

          
              if(CreditApplicationOutput.GamingVelocityCounter &gt;= dm_GamingVelocityLimit) then
                               CreditApplicationOutput.GamingVelocity := true;  
              endif
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES" Name="dm_setIRCAvailable" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xIRCAvailable" Type="string"/>
</Locals>
<Description>IRC available true or false</Description>
<ExpressionText>result:=null;
xIRCAvailable:="false";

//IRCAvailable true or flase
if(BUREAU_ATTRIBUTES.IRC004&lt;&gt;null AND BUREAU_ATTRIBUTES.IRC004&gt;0)then
		xIRCAvailable:="true";
endif

CreditApplication.IRCAvailable:=xIRCAvailable;</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_AttachPersonalApplicantOutput" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="null" Name="xPersonalApplicantOutput" Type="PersonalApplicantOutput"/>
</Locals>
<Description>Attach personal applicant output object</Description>
<ExpressionText>result:=null;

//create PersonalApplicantOutput Object if not available
for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
                  xPersonalApplicantOutput := PersonalApplicantOutput;
endfor
    
if(xPersonalApplicantOutput = null) then
                  xPersonalApplicantOutput := new PersonalApplicantOutput;
                  ATTACH(PersonalApplicant, xPersonalApplicantOutput);
endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_AssignBusinessSummaryOutput" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="FAIL" Name="xBusPass2of2NonFinNoScore" Type="string"/>
<Local InitialValue="FAIL" Name="xBusPass2of2NonFinLow" Type="string"/>
<Local InitialValue="FAIL" Name="xBusPass2of2NonFinMed" Type="string"/>
<Local InitialValue="FAIL" Name="xBusPass2of2NonFinHigh" Type="string"/>
<Local InitialValue="FAIL" Name="xBusPass2of3MidHigh" Type="string"/>
<Local InitialValue="FAIL" Name="xBusPass2of3MidMed" Type="string"/>
<Local InitialValue="FAIL" Name="xBusPass2of3MidLow" Type="string"/>
<Local InitialValue="FAIL" Name="xBusPass2of3SmallHigh" Type="string"/>
<Local InitialValue="FAIL" Name="xBusPass2of3SmallMed" Type="string"/>
<Local InitialValue="FAIL" Name="xBusPass2of3SmallLow" Type="string"/>
<Local InitialValue="FAIL" Name="xBusPass2of3MidNoScore" Type="string"/>
</Locals>
<Description>Assigns Business Summary Output values</Description>
<ExpressionText>for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do 

 if((BusinessApplicantOutput.BusChargeOffNum &lt;&gt; null and BusinessApplicantOutput.BusChargeOffNum &gt;= 0) and (BusinessApplicantOutput.BusActiveTradesNum &lt;&gt; null and BusinessApplicantOutput.BusActiveTradesNum &gt; 0))then
           BusinessApplicantOutput.BusPctChargeOffToActiveTrades := BusinessApplicantOutput.BusChargeOffNum/BusinessApplicantOutput.BusActiveTradesNum;
else 
           BusinessApplicantOutput.BusPctChargeOffToActiveTrades := 0;
 endif

if(BusinessApplicantOutput.BusChargeOffNum &lt;&gt; null and BusinessApplicantOutput.BusChargeOffNum &lt;= 2 AND
     BusinessApplicantOutput.BusActiveTradesNum &lt;&gt; null and BusinessApplicantOutput.BusActiveTradesNum&gt;= 4 AND
     BusinessApplicantOutput.BusJudgementLienNum &lt;&gt; null and BusinessApplicantOutput.BusJudgementLienNum &lt;= 2)then
         xBusPass2of3MidHigh := "PASS";
endif

 if(BusinessApplicantOutput.BusChargeOffNum&lt;&gt;null and BusinessApplicantOutput.BusChargeOffNum&lt;=1 AND 
      BusinessApplicantOutput.BusActiveTradesNum&lt;&gt;null and BusinessApplicantOutput.BusActiveTradesNum&gt;=3 AND 
      BusinessApplicantOutput.BusJudgementLienNum&lt;&gt;null and BusinessApplicantOutput.BusJudgementLienNum&lt;=1)then
  xBusPass2of3MidMed:="PASS";       
endif
 
 if(BusinessApplicantOutput.BusChargeOffNum&lt;&gt;null and BusinessApplicantOutput.BusChargeOffNum&lt;=0 AND 
      BusinessApplicantOutput.BusActiveTradesNum&lt;&gt;null and BusinessApplicantOutput.BusActiveTradesNum&gt;=2 AND
      BusinessApplicantOutput.BusJudgementLienNum&lt;&gt;null and BusinessApplicantOutput.BusJudgementLienNum=0)then
       xBusPass2of3MidLow:="PASS";
endif

  if(BusinessApplicantOutput.BusChargeOffNum&lt;&gt;null and BusinessApplicantOutput.BusChargeOffNum&lt;=0 AND
       BusinessApplicantOutput.BusActiveTradesNum&lt;&gt;null and BusinessApplicantOutput.BusActiveTradesNum&gt;=2 AND
       BusinessApplicantOutput.BusJudgementLienNum&lt;&gt;null and BusinessApplicantOutput.BusJudgementLienNum=0)then
        xBusPass2of3MidNoScore:="PASS";
  endif

  if(BusinessApplicantOutput.BusChargeOffNum &lt;&gt; null and BusinessApplicantOutput.BusChargeOffNum &lt;= 2 AND
BusinessApplicantOutput.BusJudgementLienNum &lt;&gt; null and BusinessApplicantOutput.BusJudgementLienNum &lt;= 2)then
xBusPass2of2NonFinHigh := "PASS";
endif

if(BusinessApplicantOutput.BusChargeOffNum&lt;&gt;null and BusinessApplicantOutput.BusChargeOffNum&lt;=1 AND
BusinessApplicantOutput.BusJudgementLienNum&lt;&gt;null and BusinessApplicantOutput.BusJudgementLienNum&lt;=1)then
xBusPass2of2NonFinMed:="PASS";
endif

if(BusinessApplicantOutput.BusChargeOffNum&lt;&gt;null and BusinessApplicantOutput.BusChargeOffNum&lt;=0 AND
BusinessApplicantOutput.BusJudgementLienNum&lt;&gt;null and BusinessApplicantOutput.BusJudgementLienNum=0)then
xBusPass2of2NonFinLow:="PASS";
endif

if(BusinessApplicantOutput.BusChargeOffNum&lt;&gt;null and BusinessApplicantOutput.BusChargeOffNum&lt;=0 AND
BusinessApplicantOutput.BusJudgementLienNum&lt;&gt;null and BusinessApplicantOutput.BusJudgementLienNum=0)then
xBusPass2of2NonFinNoScore:="PASS";
endif

if((BusinessApplicantOutput.BusChargeOffNum &lt;&gt;null and BusinessApplicantOutput.BusChargeOffNum &lt;=1 AND BusinessApplicantOutput.BusNumRecentTrades&lt;&gt;null and BusinessApplicantOutput.BusNumRecentTrades&gt;=4) OR
                (BusinessApplicantOutput.BusChargeOffNum &lt;&gt;null and BusinessApplicantOutput.BusChargeOffNum &lt;=1 AND BusinessApplicantOutput.BusJudgementLienNum&lt;&gt;null and BusinessApplicantOutput.BusJudgementLienNum&lt;=1) OR
                (BusinessApplicantOutput.BusNumRecentTrades&lt;&gt;null and BusinessApplicantOutput.BusNumRecentTrades&gt;=4 AND BusinessApplicantOutput.BusJudgementLienNum&lt;&gt;null and BusinessApplicantOutput.BusJudgementLienNum&lt;=1)) then
        xBusPass2of3SmallHigh:="PASS";
endif

if((BusinessApplicantOutput.BusChargeOffNum &lt;&gt; null and BusinessApplicantOutput.BusChargeOffNum = 0 AND BusinessApplicantOutput.BusNumRecentTrades&lt;&gt;null and BusinessApplicantOutput.BusNumRecentTrades&gt;=2) OR
                (BusinessApplicantOutput.BusChargeOffNum &lt;&gt; null and BusinessApplicantOutput.BusChargeOffNum = 0 AND BusinessApplicantOutput.BusJudgementLienNum&lt;&gt;null and BusinessApplicantOutput.BusJudgementLienNum&lt;=1) OR
                (BusinessApplicantOutput.BusNumRecentTrades&lt;&gt;null and BusinessApplicantOutput.BusNumRecentTrades&gt;=2 AND BusinessApplicantOutput.BusJudgementLienNum&lt;&gt;null and BusinessApplicantOutput.BusJudgementLienNum&lt;=1)) then
    xBusPass2of3SmallMed:="PASS";
endif  

if((BusinessApplicantOutput.BusChargeOffNum &lt;&gt;null and BusinessApplicantOutput.BusChargeOffNum =0 AND BusinessApplicantOutput.BusNumRecentTrades&lt;&gt;null and BusinessApplicantOutput.BusNumRecentTrades&gt;=2) OR
               (BusinessApplicantOutput.BusChargeOffNum &lt;&gt;null and BusinessApplicantOutput.BusChargeOffNum =0 AND BusinessApplicantOutput.BusJudgementLienNum&lt;&gt;null and BusinessApplicantOutput.BusJudgementLienNum=0) OR
               (BusinessApplicantOutput.BusNumRecentTrades&lt;&gt;null and BusinessApplicantOutput.BusNumRecentTrades&gt;=2 AND BusinessApplicantOutput.BusJudgementLienNum&lt;&gt;null and BusinessApplicantOutput.BusJudgementLienNum=0)) then
    xBusPass2of3SmallLow:="PASS";
endif

BusinessApplicantOutput.BusPass2of3MidHigh := xBusPass2of3MidHigh;
BusinessApplicantOutput.BusPass2of3MidMed := xBusPass2of3MidMed;
BusinessApplicantOutput.BusPass2of3MidLow:=xBusPass2of3MidLow;
BusinessApplicantOutput.BusPass2of3MidNoScore:=xBusPass2of3MidNoScore;
BusinessApplicantOutput.BusPass2of3SmallHigh := xBusPass2of3SmallHigh;
BusinessApplicantOutput.BusPass2of3SmallMed:=xBusPass2of3SmallMed;
BusinessApplicantOutput.BusPass2of3SmallLow:=xBusPass2of3SmallLow;
BusinessApplicantOutput.BusPass2of2NonFinHigh := xBusPass2of2NonFinHigh;
BusinessApplicantOutput.BusPass2of2NonFinMed := xBusPass2of2NonFinMed;
BusinessApplicantOutput.BusPass2of2NonFinLow:=xBusPass2of2NonFinLow;
BusinessApplicantOutput.BusPass2of2NonFinNoScore:=xBusPass2of2NonFinNoScore;

endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_AbsoluteDifferenceValue" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iNumber1" Type="numeric"/>
<Input Name="iNumber2" Type="numeric"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xDifference" Type="numeric"/>
</Locals>
<Description>Returns absolute value</Description>
<ExpressionText>result := 0;

xDifference := iNumber1 - iNumber2;

if(xDifference &lt; 0) then
        xDifference := 0 - xDifference;
endif

result := xDifference;</ExpressionText>
</DataMethod>
<DataMethod Context="Application.DecisionResponse" Name="dm_ClassifyKBAandNonKBA" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xReason" Type="string"/>
<Local InitialValue="false" Name="xReview" Type="boolean"/>
</Locals>
<Description>Determines KBA and Non KBA Rules Reason Code</Description>
<ExpressionText>result:=null;
for every Application.DecisionResponse.Product.Decision relative to DecisionResponse do
          for every Application.DecisionResponse.Product.Decision.Reason relative to Decision do
                    if(InStringList(ReasonText,"PreciseID,VictimExtended,ConsumerStatement,ActiveDuty,SSNDeceased,SSNNotIssued,SSNMisused,SuspicioudSSN2,SuspicioudSSN3,SuspicioudSSN4,Velocity,FICODMMismatch,NOSSN,GAMING",",")) then
                              Reason.ReasonCode := "KBA";
                              
                              //set up the KBA reason
                              xReason := ReasonText;
                    else
                              Reason.ReasonCode := "NON-KBA";
                    endif
					
                    if(Decision.DecisionResult &lt;&gt; null AND Decision.DecisionResult = "Investigate") then
                              //the fules found so set up the credit-class for review
                              xReview := true;
                    endif
          endfor
endfor


//if KBA Reason code is available, set it up 
if(xReason  &lt;&gt; "") then
          dm_AssignKBAReason(xReason);
endif


//if rules are fired - set the review credit-class
if(xReview) then
        dm_set_CreditClass_S;
endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_MinMax_ValueInGrid" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iPaymentPattern" Type="string"/>
<Input Name="iMinOrMax" Type="string"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="x1" Type="numeric"/>
<Local InitialValue="0.0" Name="x2" Type="numeric"/>
<Local InitialValue="0.0" Name="x3" Type="numeric"/>
<Local InitialValue="0.0" Name="x4" Type="numeric"/>
<Local InitialValue="0.0" Name="x5" Type="numeric"/>
<Local InitialValue="0.0" Name="xX" Type="numeric"/>
<Local InitialValue="0.0" Name="xA" Type="numeric"/>
</Locals>
<Description>Find out the Max or Min element available in the grid</Description>
<ExpressionText>result := "0";

x5 := InStr("5", iPaymentPattern, true);
x4 := InStr("4", iPaymentPattern, true);
x3 := InStr("3", iPaymentPattern, true);
x2 := InStr("2", iPaymentPattern, true);
x1 := InStr("1", iPaymentPattern, true);
xX := InStr("X", iPaymentPattern, true);
xA := InStr("*", iPaymentPattern, true);

if(iMinOrMax = "MAX")then
 if(x5 &gt; 0)then
  result := "5";
 else if(x4 &gt; 0)then
  result := "4";
 else if(x3 &gt; 0)then
  result := "3";
 else if(x2 &gt; 0)then
  result := "2";
 else if(x1 &gt; 0)then
  result := "1";
else if(xX &gt; 0)then
  result := "X";
else if(xA &gt; 0)then
  result := "*";  
 endif endif endif endif endif endif endif 
else if(iMinOrMax = "MIN")then
 if(x1 &gt; 0)then
  result := "1";
 else if( x2 &gt; 0)then
  result := "2";
 else if(x3 &gt; 0)then
  result := "3";
 else if(x4 &gt; 0)then
  result := "4";
 else if(x5 &gt; 0)then
  result := "5";
 endif endif endif endif endif
endif endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_setAppTypeNullBlank" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>set the AppType if null or blank</Description>
<ExpressionText>result:=null;

for every Application.CreditApplication relative to Application do 
	if(CreditApplication.AppType=null or Trim(CreditApplication.AppType)="")then
			//CreditApplication.AppType:="BLANK";
			result:="BLANK";
	endif
endfor
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesBAC" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xMaximum" Type="numeric"/>
</Locals>
<Description>calculates BAC Attributes</Description>
<ExpressionText>          result := null;

          //BAC001
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.BAC001 := iBUREAU_ATTRIBUTES.BAC001 + 1;
          endif

          //BAC002
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.BAC002 := iBUREAU_ATTRIBUTES.BAC002 + 1;
          endif

          //BAC005
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.BAC005 := iBUREAU_ATTRIBUTES.BAC005 + 1;
          endif

          //BAC007
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN) then
                iBUREAU_ATTRIBUTES.BAC007 := iBUREAU_ATTRIBUTES.BAC007 + 1;
          endif

          //BAC022
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 12) then
                iBUREAU_ATTRIBUTES.BAC022 := iBUREAU_ATTRIBUTES.BAC022 + 1;
          endif

          //BAC023
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 24) then
                iBUREAU_ATTRIBUTES.BAC023 := iBUREAU_ATTRIBUTES.BAC023 + 1;
          endif

          //BAC026
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.BAC026 := iBUREAU_ATTRIBUTES.BAC026 + 1;
          endif

          //BAC028
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &gt;= 6) then
                iBUREAU_ATTRIBUTES.BAC028 := iBUREAU_ATTRIBUTES.BAC028 + 1;
          endif

          //BAC031
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE &gt; 0
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.BAC031 := iBUREAU_ATTRIBUTES.BAC031 + 1;
          endif

          //BAC035
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE &gt;= 1000
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.BAC035 := iBUREAU_ATTRIBUTES.BAC035 + 1;
          endif

          //BAC037
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE &gt;= 5000
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 12) then
                iBUREAU_ATTRIBUTES.BAC037 := iBUREAU_ATTRIBUTES.BAC037 + 1;
          endif

          //BAC042
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BTL &gt;= 50
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.BAC042 := iBUREAU_ATTRIBUTES.BAC042 + 1;
          endif

          //BAC044
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BTL &gt;= 90
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.BAC044 := iBUREAU_ATTRIBUTES.BAC044 + 1;
          endif

          //BAC045
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BTL &gt;= 100
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.BAC045 := iBUREAU_ATTRIBUTES.BAC045 + 1;
          endif

          //BAC071
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) = 1) then
                iBUREAU_ATTRIBUTES.BAC071 := iBUREAU_ATTRIBUTES.BAC071 + 1;
          endif
       
          //BAC074
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 34) then
                iBUREAU_ATTRIBUTES.BAC074 := iBUREAU_ATTRIBUTES.BAC074 + 1;
          endif

          //BAC075
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30) then
                iBUREAU_ATTRIBUTES.BAC075 := iBUREAU_ATTRIBUTES.BAC075 + 1;
          endif

          //BAC076
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 60) then
                iBUREAU_ATTRIBUTES.BAC076 := iBUREAU_ATTRIBUTES.BAC076 + 1;
          endif

          //BAC077
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) = 60) then
                iBUREAU_ATTRIBUTES.BAC077 := iBUREAU_ATTRIBUTES.BAC077 + 1;
          endif

          //BAC078
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 60) then
                iBUREAU_ATTRIBUTES.BAC078 := iBUREAU_ATTRIBUTES.BAC078 + 1;
          endif

          //BAC080
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 90 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 180) then
                iBUREAU_ATTRIBUTES.BAC080 := iBUREAU_ATTRIBUTES.BAC080 + 1;
          endif

          //BAC081
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 90) then
                iBUREAU_ATTRIBUTES.BAC081 := iBUREAU_ATTRIBUTES.BAC081 + 1;
          endif

          //BAC084
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER = 400) then
                iBUREAU_ATTRIBUTES.BAC084 := iBUREAU_ATTRIBUTES.BAC084 + 1;
          endif

          //BAC303
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.BAC303 := MAX(iBUREAU_ATTRIBUTES.BAC303, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT);
          endif

          //BAC401
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.BAC401 := iBUREAU_ATTRIBUTES.BAC401 + iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AVAILABLE_CREDIT;
          endif

          //BAC501
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                xMaximum := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD);
                iBUREAU_ATTRIBUTES.BAC501 := MAX(iBUREAU_ATTRIBUTES.BAC501, xMaximum);
          endif

          //BAC502
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.BAC502 := MAX(iBUREAU_ATTRIBUTES.BAC502, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12);
          endif

          //BAC503
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.BAC503 := MAX(iBUREAU_ATTRIBUTES.BAC503, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24);
          endif

          //BAC601
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN) then
                iBUREAU_ATTRIBUTES.BAC601 := MAX(iBUREAU_ATTRIBUTES.BAC601, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS);
          endif

          //BAC801
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC_INQ) then
                iBUREAU_ATTRIBUTES.BAC801 := iBUREAU_ATTRIBUTES.BAC801 + 1;
          endif 

          //BAC804
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC_INQ AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_INQ &lt;= 12) then
                iBUREAU_ATTRIBUTES.BAC804 := iBUREAU_ATTRIBUTES.BAC804 + 1;
          endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_AdverseActionDeltaRanking" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="0.0" Name="xCounter" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xSegment" Type="string"/>
<Local InitialValue="null" Name="xAdverseAction" Type="AdverseAction"/>
</Locals>
<Description>Ranking logic for Adverse Action delta</Description>
<ExpressionText>result := null;

//Initalize Rank to 0
for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.AdverseActionList.AdverseAction relative to PersonalApplicant do
               AdverseAction.Rank := 0;
endfor

//Assign Clean or Derog Segment
for every Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES relative to PersonalApplicant do
               if (BUREAU_ATTRIBUTES.ALL081 &lt;= 0) then xSegment := "Clean"; else xSegment := "Derog"; endif
endfor


//Assign Rank
for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.AdverseActionList.AdverseAction relative to PersonalApplicant do
               xAdverseAction := dm_GetMinimumDeltaAdverseObject(xSegment);
               if(xAdverseAction &lt;&gt; null) then
                              xAdverseAction.Rank := xCounter + 1;
                              xCounter := xCounter + 1;
               endif
endfor


/*
//Ranking by Delta
for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.AdverseActionList.AdverseAction relative to PersonalApplicant do
	for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.AdverseActionList.AdverseAction in dor_AdverseActionRankZero do
		dm_RankByDelta;
	endfor
endfor
*/</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_CalculateRatio" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iOperand1" Type="numeric"/>
<Input Name="iOperand2" Type="numeric"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xRatio" Type="numeric"/>
</Locals>
<Description>Ratio calculations</Description>
<ExpressionText>result := 0;

if(iOperand2 = 0) then
         result := 0;
else 

        // Do NOT change the below logic as it can update the results on rounding.
        xRatio := (iOperand1*100)/  iOperand2 ;
        result  := INT(xRatio);
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesREF" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>calculates REP Attributes</Description>
<ExpressionText>          result := null;

          //REF001
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REF AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.REF001 := iBUREAU_ATTRIBUTES.REF001 + 1;
          endif

</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_InitializeDup" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="0.0" Name="xDupVelocityCounter" Type="numeric"/>
<Local InitialValue="null" Name="xCreditApplicationOutput" Type="CreditApplicationOutput"/>
</Locals>
<Description>Initialize Gaming and Dup Velocity </Description>
<ExpressionText>result := null;

for every Application.CreditApplication.DuplicateApplications relative to CreditApplication do

               for every Application.CreditApplication.DuplicateApplications.DuplicateApplication relative to DuplicateApplications do
                             if(DuplicateApplication.DuplicateVelocityCounter &lt;&gt; null AND DuplicateApplication.DuplicateVelocityCounter = 1) then
                                           xDupVelocityCounter := xDupVelocityCounter + 1;
                             endif 

                              //Assign Duplicate by Channels
                              dm_AssignDuplicateSummary(DuplicateApplication.Channel, DuplicateApplication.DuplicateVelocityCounter,0);
               endfor
endfor



//create CreditApplicationOutput Object if not available
for every Application.CreditApplication.CreditApplicationOutput relative to CreditApplication do
          xCreditApplicationOutput := CreditApplicationOutput;
endfor
    
if(xCreditApplicationOutput = null) then
         xCreditApplicationOutput := new CreditApplicationOutput;
         ATTACH(CreditApplication, xCreditApplicationOutput);
endif


//set counters
for every Application.CreditApplication.CreditApplicationOutput relative to CreditApplication do
              CreditApplicationOutput.DupVelocityCounter := xDupVelocityCounter;
endfor


//set velocity
for every Application.CreditApplication.CreditApplicationOutput relative to CreditApplication do
              CreditApplicationOutput.DupVelocity := false;

              if(CreditApplicationOutput.DupVelocityCounter &gt;= dm_DuplicateVelocityLimit) then
                                CreditApplicationOutput.DupVelocity := true;
              endif
     
            
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_InitializeGamingAndDupVelocity" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="0.0" Name="xDupVelocityCounter" Type="numeric"/>
<Local InitialValue="0.0" Name="xGamingVelocityCounter" Type="numeric"/>
<Local InitialValue="null" Name="xCreditApplicationOutput" Type="CreditApplicationOutput"/>
</Locals>
<Description>Initialize Gaming and Dup Velocity </Description>
<ExpressionText>result := null;

for every Application.CreditApplication.DuplicateApplications relative to CreditApplication do

               for every Application.CreditApplication.DuplicateApplications.DuplicateApplication relative to DuplicateApplications do
                             if(DuplicateApplication.GamingVelocityCounter &lt;&gt; null AND DuplicateApplication.GamingVelocityCounter = 1) then
                                           xGamingVelocityCounter := xGamingVelocityCounter + 1;
                             else if (DuplicateApplication.DuplicateVelocityCounter &lt;&gt; null AND DuplicateApplication.DuplicateVelocityCounter = 1) then
                                           xDupVelocityCounter := xDupVelocityCounter + 1;
                             endif endif

                              //Assign Duplicate by Channels
                              dm_AssignDuplicateSummary(DuplicateApplication.Channel, DuplicateApplication.DuplicateVelocityCounter, DuplicateApplication.GamingVelocityCounter);
               endfor
endfor



//create CreditApplicationOutput Object if not available
for every Application.CreditApplication.CreditApplicationOutput relative to CreditApplication do
          xCreditApplicationOutput := CreditApplicationOutput;
         //Attach(BUREAU_ATTRIBUTES, xNormalizedSegmentObject);
endfor
    
if(xCreditApplicationOutput = null) then
         xCreditApplicationOutput := new CreditApplicationOutput;
         ATTACH(CreditApplication, xCreditApplicationOutput);
endif


//set counters
for every Application.CreditApplication.CreditApplicationOutput relative to CreditApplication do
              CreditApplicationOutput.GamingVelocityCounter := xGamingVelocityCounter;
              CreditApplicationOutput.DupVelocityCounter := xDupVelocityCounter;
endfor


//set velocity
for every Application.CreditApplication.CreditApplicationOutput relative to CreditApplication do
              CreditApplicationOutput.GamingVelocity := false;
              CreditApplicationOutput.DupVelocity := false;

              if(CreditApplicationOutput.DupVelocityCounter &gt;= dm_DuplicateVelocityLimit) then
                                CreditApplicationOutput.DupVelocity := true;
              endif
     
              if(CreditApplicationOutput.GamingVelocityCounter &gt;= dm_GamingVelocityLimit) then
                               CreditApplicationOutput.GamingVelocity := true;  
              endif
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsEFXAccountType" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Generate filters for EFX Account Type</Description>
<ExpressionText>    result := null;
  
    
    //REVOLVING
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TYPE = "R") then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING := true;
    endif

    //REAL-PROPERTY
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT ) then
        if( iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TYPE = "I" AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE, "FM, RE, RZ", ",")) then
                  iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY := true;
        
        else if(InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AR, AS, BR, CH, DG, DJ, DM, DT, EC, ED, EF, GP, HP, HQ, HR, HS, HU", ",") OR 
                             InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AR, AS, BR, CH, DG, DJ, DM, DT, EC, ED, EF, GP, HP, HQ, HR, HS, HU", ",")) then
                  iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY := true;

        else if(iNORMALIZED_BUREAU_SEGMENTS.RATE_CODE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.RATE_CODE = "G") then
                  iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY := true;
     endif endif endif endif



     //COLL-EXT
     iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLL_EXT := false;
     if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG OR 
             (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "Y")) then
    
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLL_EXT := true;
     endif
 

     //INSTALL
     iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL := false;
     if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY = false AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TYPE = "I") then     
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL := true;
    
     endif


     //COLLECTION
     iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECTION := false;
     if((iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND 
                                   (InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "CZ, BY, ER", ",") OR InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "CZ, BY, ER", ",")) )    OR
                                                  iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG) then
              iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECTION := true;
     endif



    //COLL-INT
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLL_INT := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND 
                                   (InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "CZ, BY, ER", ",") OR InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "CZ, BY, ER", ",")) AND
                                   iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; "Y") then
        
           iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLL_INT := true;
     endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_AttachSCORES" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="null" Name="xSCORES" Type="SCORES"/>
</Locals>
<Description>Attach SCORES</Description>
<ExpressionText>result:=null;

               for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do
                              xSCORES :=  SCORES;
               endfor
    
               if(xSCORES = null) then
                              xSCORES := new SCORES;
                              ATTACH(PersonalApplicant, xSCORES);
               endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesILN" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xMaximum" Type="numeric"/>
</Locals>
<Description>calculates ILN Attributes</Description>
<ExpressionText>          result := null;

          //ILN001
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.ILN001 := iBUREAU_ATTRIBUTES.ILN001 + 1;
          endif

          //ILN002
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.ILN002 := iBUREAU_ATTRIBUTES.ILN002 + 1;
          endif

          //ILN005
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.ILN005 := iBUREAU_ATTRIBUTES.ILN005 + 1;
          endif

          //ILN006
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.ILN006 := iBUREAU_ATTRIBUTES.ILN006 + 1;
          endif

          //ILN007
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN) then
                iBUREAU_ATTRIBUTES.ILN007 := iBUREAU_ATTRIBUTES.ILN007 + 1;
          endif

          //ILN022
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 12) then
                iBUREAU_ATTRIBUTES.ILN022 := iBUREAU_ATTRIBUTES.ILN022 + 1;
          endif

          //ILN023
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 24) then
                iBUREAU_ATTRIBUTES.ILN023 := iBUREAU_ATTRIBUTES.ILN023 + 1;
          endif

          //ILN026
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.ILN026 := iBUREAU_ATTRIBUTES.ILN026 + 1;
          endif

          //ILN064
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt;= 30
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.ILN064 := iBUREAU_ATTRIBUTES.ILN064 + 1;
          endif

          //ILN067
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt;= 90
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.ILN067 := iBUREAU_ATTRIBUTES.ILN067 + 1;
          endif

          //ILN071
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) = 1) then
                iBUREAU_ATTRIBUTES.ILN071 := iBUREAU_ATTRIBUTES.ILN071 + 1;
          endif
       
          //ILN074
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 34) then
                iBUREAU_ATTRIBUTES.ILN074 := iBUREAU_ATTRIBUTES.ILN074 + 1;
          endif

          //ILN075
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30) then
                iBUREAU_ATTRIBUTES.ILN075 := iBUREAU_ATTRIBUTES.ILN075 + 1;
          endif

          //ILN076
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 60) then
                iBUREAU_ATTRIBUTES.ILN076 := iBUREAU_ATTRIBUTES.ILN076 + 1;
          endif

          //ILN077
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) = 60) then
                iBUREAU_ATTRIBUTES.ILN077 := iBUREAU_ATTRIBUTES.ILN077 + 1;
          endif

          //ILN078
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 60) then
                iBUREAU_ATTRIBUTES.ILN078 := iBUREAU_ATTRIBUTES.ILN078 + 1;
          endif

          //ILN080
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 90 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 180) then
                iBUREAU_ATTRIBUTES.ILN080 := iBUREAU_ATTRIBUTES.ILN080 + 1;
          endif

          //ILN081
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 90) then
                iBUREAU_ATTRIBUTES.ILN081 := iBUREAU_ATTRIBUTES.ILN081 + 1;
          endif

          //ILN084
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER = 400) then
                iBUREAU_ATTRIBUTES.ILN084 := iBUREAU_ATTRIBUTES.ILN084 + 1;
          endif

          //ILN085
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 = 400) then
                iBUREAU_ATTRIBUTES.ILN085 := iBUREAU_ATTRIBUTES.ILN085 + 1;
          endif

          //ILN086
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 = 400) then
                iBUREAU_ATTRIBUTES.ILN086 := iBUREAU_ATTRIBUTES.ILN086 + 1;
          endif

          //ILN101
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 = 1) then
                iBUREAU_ATTRIBUTES.ILN101 := iBUREAU_ATTRIBUTES.ILN101 + 1;
          endif

          //ILN102
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 = 1) then
                iBUREAU_ATTRIBUTES.ILN102 := iBUREAU_ATTRIBUTES.ILN102 + 1;
          endif

          //ILN103
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &lt;= 34) then
                iBUREAU_ATTRIBUTES.ILN103 := iBUREAU_ATTRIBUTES.ILN103 + 1;
          endif

          //ILN104
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 30) then
                iBUREAU_ATTRIBUTES.ILN104 := iBUREAU_ATTRIBUTES.ILN104 + 1;
          endif

          //ILN105
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &lt;= 34) then
                iBUREAU_ATTRIBUTES.ILN105 := iBUREAU_ATTRIBUTES.ILN105 + 1;
          endif

          //ILN106
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &gt;= 30) then
                iBUREAU_ATTRIBUTES.ILN106 := iBUREAU_ATTRIBUTES.ILN106 + 1;
          endif

          //ILN107
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &lt;= 60) then
                iBUREAU_ATTRIBUTES.ILN107 := iBUREAU_ATTRIBUTES.ILN107 + 1;
          endif

          //ILN108
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &lt;= 60) then
                iBUREAU_ATTRIBUTES.ILN108 := iBUREAU_ATTRIBUTES.ILN108 + 1;
          endif

          //ILN109
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &lt;= 60) then
                iBUREAU_ATTRIBUTES.ILN109 := iBUREAU_ATTRIBUTES.ILN109 + 1;
          endif

          //ILN110
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 = 60) then
                iBUREAU_ATTRIBUTES.ILN110 := iBUREAU_ATTRIBUTES.ILN110 + 1;
          endif

          //ILN111
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 = 60) then
                iBUREAU_ATTRIBUTES.ILN111 := iBUREAU_ATTRIBUTES.ILN111 + 1;
          endif

          //ILN112
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 = 90) then
                iBUREAU_ATTRIBUTES.ILN112 := iBUREAU_ATTRIBUTES.ILN112 + 1;
          endif

          //ILN113
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 90 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &lt;= 180) then
                iBUREAU_ATTRIBUTES.ILN113 := iBUREAU_ATTRIBUTES.ILN113 + 1;
          endif

          //ILN114
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 90) then
                iBUREAU_ATTRIBUTES.ILN114 := iBUREAU_ATTRIBUTES.ILN114 + 1;
          endif

          //ILN115
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &gt;= 90) then
                iBUREAU_ATTRIBUTES.ILN115 := iBUREAU_ATTRIBUTES.ILN115 + 1;
          endif

          //ILN116
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &gt;= 90 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &lt;= 180) then
                iBUREAU_ATTRIBUTES.ILN116 := iBUREAU_ATTRIBUTES.ILN116 + 1;
          endif

          //ILN117
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &lt;= 34) then
                iBUREAU_ATTRIBUTES.ILN117 := iBUREAU_ATTRIBUTES.ILN117 + 1;
          endif

          //ILN118
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 120) then
                iBUREAU_ATTRIBUTES.ILN118 := iBUREAU_ATTRIBUTES.ILN118 + 1;
          endif

          //ILN119
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 = 60) then
                iBUREAU_ATTRIBUTES.ILN119 := iBUREAU_ATTRIBUTES.ILN119 + 1;
          endif

          //ILN122
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &gt;= 90 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &lt;= 180) then
                iBUREAU_ATTRIBUTES.ILN122 := iBUREAU_ATTRIBUTES.ILN122 + 1;
          endif

          //ILN124
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 60) then
                iBUREAU_ATTRIBUTES.ILN124 := iBUREAU_ATTRIBUTES.ILN124 + 1;
          endif

          //ILN125
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &gt;= 60) then
                iBUREAU_ATTRIBUTES.ILN125 := iBUREAU_ATTRIBUTES.ILN125 + 1;
          endif

          //ILN126
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 = 1) then
                iBUREAU_ATTRIBUTES.ILN126 := iBUREAU_ATTRIBUTES.ILN126 + 1;
          endif

          //ILN127
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &gt;= 30) then
                iBUREAU_ATTRIBUTES.ILN127 := iBUREAU_ATTRIBUTES.ILN127 + 1;
          endif

          //ILN128
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &gt;= 60) then
                iBUREAU_ATTRIBUTES.ILN128 := iBUREAU_ATTRIBUTES.ILN128 + 1;
          endif

          //ILN129
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &gt;= 90) then
                iBUREAU_ATTRIBUTES.ILN129 := iBUREAU_ATTRIBUTES.ILN129 + 1;
          endif

          //ILN130
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 = 400) then
                iBUREAU_ATTRIBUTES.ILN130 := iBUREAU_ATTRIBUTES.ILN130 + 1;
          endif

          //ILN201
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.ILN201 := iBUREAU_ATTRIBUTES.ILN201 + iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE;
          endif

          //ILN301
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT 
                                                                    AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.ILN301 := iBUREAU_ATTRIBUTES.ILN301 + iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
          endif

          //ILN501
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                xMaximum := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD);
                iBUREAU_ATTRIBUTES.ILN501 := MAX(iBUREAU_ATTRIBUTES.ILN501, xMaximum);
          endif

          //ILN502
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.ILN502 := MAX(iBUREAU_ATTRIBUTES.ILN502, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12);
          endif

          //ILN503
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.ILN503 := MAX(iBUREAU_ATTRIBUTES.ILN503, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24);
          endif

          //ILN504
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 36) then
                xMaximum := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD);
                iBUREAU_ATTRIBUTES.ILN504 := MAX(iBUREAU_ATTRIBUTES.ILN504, xMaximum);
          endif

          //ILN601
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN) then
                iBUREAU_ATTRIBUTES.ILN601 := MAX(iBUREAU_ATTRIBUTES.ILN601, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS);
          endif

          //ILN701
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 9998) then
                iBUREAU_ATTRIBUTES.ILN701 := MAX(iBUREAU_ATTRIBUTES.ILN701, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN);
          endif

          //ILN702
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 9998) then
                iBUREAU_ATTRIBUTES.ILN702 := MIN(iBUREAU_ATTRIBUTES.ILN702, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN);
          endif

          //ILN720
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL &lt;= 9998) then
                iBUREAU_ATTRIBUTES.ILN720 := MIN(iBUREAU_ATTRIBUTES.ILN720, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL);
          endif

          //ILN724
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36 &lt;= 9998) then
                iBUREAU_ATTRIBUTES.ILN724 := MIN(iBUREAU_ATTRIBUTES.ILN724, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36);
          endif

          //ILN740
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P &lt;= 9998) then
                iBUREAU_ATTRIBUTES.ILN740 := MIN(iBUREAU_ATTRIBUTES.ILN740, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P);
          endif

          //ILN801
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ILN_INQ) then
                iBUREAU_ATTRIBUTES.ILN801 := iBUREAU_ATTRIBUTES.ILN801 + 1;
          endif 

          //ILN804
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ILN_INQ AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_INQ &lt;= 12) then
                iBUREAU_ATTRIBUTES.ILN804 := iBUREAU_ATTRIBUTES.ILN804 + 1;
          endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesFIL" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>calculates FIL Attributes</Description>
<ExpressionText>          result := null;

          //	FIL001
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.FIL001 := iBUREAU_ATTRIBUTES.FIL001 + 1;
          endif

          //FIL022
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 12) then
                iBUREAU_ATTRIBUTES.FIL022 := iBUREAU_ATTRIBUTES.FIL022 + 1;
          endif

          //FIL023
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 24) then
                iBUREAU_ATTRIBUTES.FIL023 := iBUREAU_ATTRIBUTES.FIL023 + 1;
          endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_DuplicateVelocityLimit" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Returns Duplicate Velocity Limit</Description>
<ExpressionText>
//trigger velocity if the counter is less than 6. 
result := 6;</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsEFXProfileGlobal" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Generate filters for EFX Profile Global</Description>
<ExpressionText>    result := null;
  
    //DESEASED
    if(InStringList(iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE, "PT, TC", ",")   AND iNORMALIZED_BUREAU_SEGMENTS.RATE_CODE = "E") then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_DECEASED := 1;
    else
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_DECEASED := 0;
    endif
 
 //else  if(iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE = "DT" AND iNORMALIZED_BUREAU_SEGMENTS. SUBJECT_DEATH_DATE &gt; 0) then
    //    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_DECEASED := 1;
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesHEQ" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>calculates HEQ Attributes</Description>
<ExpressionText>          result := null;

          //HEQ001
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_HEQ AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.HEQ001 := iBUREAU_ATTRIBUTES.HEQ001 + 1;
          endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_STAGGFiltersAndFunctionsEFXGridFilters" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xPosition30" Type="numeric"/>
<Local InitialValue="0.0" Name="xPosition60" Type="numeric"/>
<Local InitialValue="0.0" Name="xPosition90" Type="numeric"/>
<Local InitialValue="0.0" Name="xPosition120" Type="numeric"/>
<Local InitialValue="0.0" Name="xInterpretedGridPreviousHighRate1" Type="numeric"/>
<Local InitialValue="0.0" Name="xInterpretedGridPreviousHighRate2" Type="numeric"/>
<Local InitialValue="0.0" Name="xInterpretedGridPreviousHighRate3" Type="numeric"/>
</Locals>
<Description>Grid Filters for Equifax</Description>
<ExpressionText> 
    result := null;

    //RATINGS-OF-60P-MONTHS12
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RATINGS_OF_60P_MONTHS12 := CharCount("3" , iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED_12_MONTHS) + 
                                    CharCount("4" , iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED_12_MONTHS) + CharCount("5", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED_12_MONTHS);
  // additional condition for Equifax, not used with TransUnion
  if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt;= 60 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 12) then
     iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RATINGS_OF_60P_MONTHS12 := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RATINGS_OF_60P_MONTHS12 + 1;
 endif
 
    //MONTHS-PHR1
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR1 := 9999;
    if (iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_DATE1 &lt;&gt; NULL AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_DATE1) &lt;&gt; "" ) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR1 := timestampDiff("months", iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_DATE1) );
    endif

    //MONTHS-PHR2
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR2 := 9999;
    if (iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_DATE2 &lt;&gt; NULL AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_DATE2) &lt;&gt; "" ) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR2 := timestampDiff("months", iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_DATE2) );
    endif
    //MONTHS-PHR3
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR3 := 9999;
    if (iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_DATE3 &lt;&gt; NULL AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_DATE3) &lt;&gt; "" ) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR3 := timestampDiff("months", iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_DATE3) );
    endif


    xInterpretedGridPreviousHighRate1 := dm_GetInterpretedGRD3GridEFXValue(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE1);
    xInterpretedGridPreviousHighRate2 := dm_GetInterpretedGRD3GridEFXValue(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE2);
    xInterpretedGridPreviousHighRate3 := dm_GetInterpretedGRD3GridEFXValue(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE3);


    //WE-GRD6
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 := dm_GetInterpretedEFXGridValue(dm_MinMax_ValueInGrid(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED_6_MONTHS, "MAX"));
 if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR1 &lt;= 6) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6, xInterpretedGridPreviousHighRate1);
    endif
 if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR2 &lt;= 6) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6, xInterpretedGridPreviousHighRate2);
    endif
 if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR3 &lt;= 6) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6, xInterpretedGridPreviousHighRate3);
    endif
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt; iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS;
    endif
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 6 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER &gt; iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER;
    endif


    //WE-GRD12
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 := dm_GetInterpretedEFXGridValue(dm_MinMax_ValueInGrid(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED_12_MONTHS, "MAX"));
 if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR1 &lt;= 12) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12, xInterpretedGridPreviousHighRate1);
    endif
 if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR2 &lt;= 12) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12, xInterpretedGridPreviousHighRate2);
    endif
 if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR3 &lt;= 12) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12, xInterpretedGridPreviousHighRate3);
    endif
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt; iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 12) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS;
    endif
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 12 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER &gt; iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER;
    endif
 

    //WE-GRD24
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 := dm_GetInterpretedEFXGridValue(dm_MinMax_ValueInGrid(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED_24_MONTHS, "MAX"));
 if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR1 &lt;= 24) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24, xInterpretedGridPreviousHighRate1);
    endif
 if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR2 &lt;= 24) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24, xInterpretedGridPreviousHighRate2);
    endif
 if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR3 &lt;= 24) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24, xInterpretedGridPreviousHighRate3);
    endif
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt; iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 24) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS;
    endif
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 24 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER &gt; iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER;
    endif

    //WE-GRD
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD := dm_GetInterpretedEFXGridValue(dm_MinMax_ValueInGrid(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED, "MAX"));
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD, xInterpretedGridPreviousHighRate1);
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD, xInterpretedGridPreviousHighRate2);
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD, xInterpretedGridPreviousHighRate3);
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt; iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS;
    endif

    

    xPosition30 := InStr("2", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED, true);
    xPosition60 := InStr("3", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED, true);
    xPosition90 := InStr("4", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED, true);
    xPosition120 := InStr("5", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED, true);

    //GRDDEL
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL := 9999; 
    if(xPosition30 &lt;&gt; 0) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL, xPosition30);
    endif
    if(xPosition60 &lt;&gt; 0) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL, xPosition60);
    endif
    if(xPosition90 &lt;&gt; 0) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL, xPosition90);
    endif
    if(xPosition120 &lt;&gt; 0) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL, xPosition120);
    endif
    if(xInterpretedGridPreviousHighRate1 &gt;= 30) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR1);
    endif
    if(xInterpretedGridPreviousHighRate2 &gt;= 30) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR2);
    endif
    if(xInterpretedGridPreviousHighRate3 &gt;= 30) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR3);
    endif
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt;= 30) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED;
    endif

    //GRD36
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36 := 9999; 
    if(xPosition30 &lt;&gt; 0) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36 := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36, xPosition30);
    endif
    if(xPosition60 &lt;&gt; 0) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36 := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36, xPosition60);
    endif
    if(xInterpretedGridPreviousHighRate1 &gt;= 30 AND xInterpretedGridPreviousHighRate1 &lt;= 60) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36 := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR1);
    endif
    if(xInterpretedGridPreviousHighRate2 &gt;= 30 AND xInterpretedGridPreviousHighRate2 &lt;= 60) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36 := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR2);
    endif
    if(xInterpretedGridPreviousHighRate3 &gt;= 30 AND xInterpretedGridPreviousHighRate3 &lt;= 60) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36 := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR3);
    endif
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &lt;= 60) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36 := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED;
    endif


    //GRD90P
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P := 9999; 
    if(xPosition90 &lt;&gt; 0) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P, xPosition90);
    endif
    if(xPosition120 &lt;&gt; 0) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P, xPosition120);
    endif
    if(xInterpretedGridPreviousHighRate1 &gt;= 90) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR1);
    endif
    if(xInterpretedGridPreviousHighRate2 &gt;= 90) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR2);
    endif
    if(xInterpretedGridPreviousHighRate3 &gt;= 90) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P := MIN(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_PHR3);
    endif
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt;= 90) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED;
    endif






</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesGBL" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>calculates GBL Attributes</Description>
<ExpressionText>          result := null;

          //GBL007
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_DECEASED = 1) then
                iBUREAU_ATTRIBUTES.GBL007 := 1;
          endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.InquiryList.Inquiry" Name="dm_PopulateInquiryListData" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iNormalizedSegment" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Populates Inquires data to Normalized Data Object</Description>
<ExpressionText>result := null;

if(Inquiry.AbbreviationAndOrCustomerNumber &lt;&gt; null) then
                      iNormalizedSegment.SUBSCRIBER_NUMBER := Inquiry.AbbreviationAndOrCustomerNumber;
endif

if(Inquiry.BureauMarket &lt;&gt; null) then
                      iNormalizedSegment.BUREAU_MARKET := Inquiry.BureauMarket;
endif

if(Inquiry.BureauSubmarket &lt;&gt; null) then
                      iNormalizedSegment.BUREAU_SUBMARKET := Inquiry.BureauSubmarket;
endif

if(Inquiry.IndustryCode &lt;&gt; null) then
                      iNormalizedSegment.INDUSTRY_CODE := Inquiry.IndustryCode;
endif

if(Inquiry.InquiryDate &lt;&gt; null) then
                      iNormalizedSegment.INQUIRY_DATE := Inquiry.InquiryDate;
endif

if(Inquiry.LoanType &lt;&gt; null) then
                      iNormalizedSegment.ACCOUNT_TYPE := Inquiry.LoanType;
endif

if(Inquiry.RequestorName &lt;&gt; null) then
                      iNormalizedSegment.REQUESTOR_NAME := Inquiry.RequestorName;
endif

if(Inquiry.SourceSegment &lt;&gt; null) then
                      iNormalizedSegment.SEGMENT_TYPE := Inquiry.SourceSegment;
                      iNormalizedSegment.RECORD_CODE := Inquiry.SourceSegment;
endif

if(Inquiry.SubscriberName &lt;&gt; null) then
                      iNormalizedSegment.SUBSCRIBER_NAME := Inquiry.SubscriberName;
endif

if(Inquiry.SubscriberNumber &lt;&gt; null) then
                      iNormalizedSegment.REPORTING_SUB_CODE := Inquiry.SubscriberNumber;
endif

if(Inquiry.Type &lt;&gt; null) then
                     iNormalizedSegment.ECOA := Inquiry.Type;
endif



//inquiry filter data
if(Inquiry.DAYS_INQ &lt;&gt; null) then
                      iNormalizedSegment.STAGG_FF_DAYS_INQ := Inquiry.DAYS_INQ;
endif

if(Inquiry.INQ_TO_DEDUP &lt;&gt; null) then
                      iNormalizedSegment.STAGG_FF_INQ_TO_DEDUP := Inquiry.INQ_TO_DEDUP;
endif

if(Inquiry.INQ_TO_DEDUPB &lt;&gt; null) then
                      iNormalizedSegment.STAGG_FF_INQ_TO_DEDUPB := Inquiry.INQ_TO_DEDUPB;
endif

if(Inquiry.IS_DUPLICATE_INQ &lt;&gt; null) then
                      iNormalizedSegment.IS_DEDUP_INQ := Inquiry.IS_DUPLICATE_INQ;
else
                      iNormalizedSegment.IS_DEDUP_INQ := false;
endif

if(Inquiry.IS_DUPLICATE_BANK_INQ &lt;&gt; null) then
                      iNormalizedSegment.IS_DEDUP_BANK_INQ := Inquiry.IS_DUPLICATE_BANK_INQ;
else
                      iNormalizedSegment.IS_DEDUP_BANK_INQ := false;
endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput" Name="dm_SetFinalCreditClassPGCC" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Sets final credit class for PGCC</Description>
<ExpressionText>if(BusinessApplicantOutput.INITIAL_CREDIT_CLASS &lt;&gt; null and BusinessApplicantOutput.INITIAL_CREDIT_CLASS &lt;&gt; "") then
		BusinessApplicantOutput.FINAL_CREDIT_CLASS := BusinessApplicantOutput.INITIAL_CREDIT_CLASS;
endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesAUT" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>calculates AUT Attributes</Description>
<ExpressionText>          result := null;

          //AUT001
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AUTO AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.AUT001 := iBUREAU_ATTRIBUTES.AUT001 + 1;
          endif

          //AUT071
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AUTO AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) = 1) then
                iBUREAU_ATTRIBUTES.AUT071 := iBUREAU_ATTRIBUTES.AUT071 + 1;
          endif
       
          //AUT720
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AUTO AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL &lt;= 9998) then
                iBUREAU_ATTRIBUTES.AUT720 := MIN(iBUREAU_ATTRIBUTES.AUT720, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL);
          endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_SetScoreFlagPreciseID" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Sets ScoreFlagPreciseID -
rs_FraudStrategy is called only when there is a pid hit and in those places only 
we have to add this dm</Description>
<ExpressionText>for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS relative to Application do
	if(CreditApplication.REVIEW_CREDIT_CLASS &lt;&gt; null and CreditApplication.REVIEW_CREDIT_CLASS = "S") then
		OTHERS.ScoreFlagPreciseID := "Y";
	endif
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_PGQualifyingCMFCC" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="N" Name="xQualifying" Type="string"/>
</Locals>
<Description>Checks for a PG app if a CMF-CC qualifies for dt_TenureBasedPGCC</Description>
<ExpressionText>xQualifying := "N";

for every Application.CreditApplication.PersonalApplicant.CMFDetails relative to PersonalApplicant do
	if(inStringList(CMFDetails.creditClass, "A, B, C, L, O, D, J, N, H, I, Y", ",")) then
			xQualifying := "Y";
	endif
endfor

//set the value
for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
		PersonalApplicantOutput.PG_CMFused := xQualifying;
endfor

result:=xQualifying;</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsTUPublicRecord" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Generate filters for TU PublicRecord</Description>
<ExpressionText>    result := null;

    //LEGAL
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LEGAL := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.SEGMENT_TYPE = "PR11" OR iNORMALIZED_BUREAU_SEGMENTS.SEGMENT_TYPE = "PR") then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LEGAL := true;
    endif

    //MONTHS-FILE
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_FILE := 9999;
    if(iNORMALIZED_BUREAU_SEGMENTS.DATE_FILED &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.DATE_FILED) &lt;&gt; "") then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_FILE := TimestampDiff("months", iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.DATE_FILED))  
    endif

    
    //AMOUNT - Public Record
    if(iNORMALIZED_BUREAU_SEGMENTS.SEGMENT_TYPE = "PR11" OR iNORMALIZED_BUREAU_SEGMENTS.SEGMENT_TYPE = "PR") then
            if(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT &lt;&gt; null) then
                    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT := VAL(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT);
            endif
    endif


    //PR-DEROG
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_DEROG := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.RECORD_TYPE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.RECORD_TYPE, "AT, BR, CD, CF,CH, DC, DD, DJ, DL, DP, FR, FU, IB, JC, JD, JN, JR, JS, JU, MJ, ND, NJ, PS, RA, RW, SH, SJ, VB, WA, 0U, 0W, 07, 11, 12, 13, 3C, AM, CB, CJ, CP, CS, DF, DS, FC, FD, FF, FT, GN, HA, HF, HL, JL, JM, LR, ML, PC, PF, PG, PL, PQ, PT, PV, RL, RM, RS, SF, SL, TL, TX, WS, 1D, 1F, 1V, 1X, 2D, 2F, 2V, 2X, 3D, 3F, 3V, 3V, 3X, 7D, 7F, 7V, 7X", ",") ) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_DEROG := true;
    endif


    //PR-DEROG
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_DEROG2 := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.RECORD_TYPE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.RECORD_TYPE, "07, 11, 12, 13, 1F, 2F, 3F, 7F, BR, CB, CJ, CS, GN, FT, HA, HL, IB, VB, JL, LR, ML, PG, PT, SL, TL", ",") ) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_DEROG2 := true;
    endif

    //BK-STATUS
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BK_STATUS := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.RECORD_TYPE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.RECORD_TYPE, "AT, BD, BR, CB, DC, DT, IB, VB, ST, 07, 0U, 0W, 1D, 1F, 1X, 11, 12, 13, 2D, 2F, 2X, 3D, 3F, 3X, 7D, 7F, 7X, 1V, 2V, 3V, 7V", ",") ) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BK_STATUS := true;
    endif


    //BK-FILED
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BK_FILED := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.RECORD_TYPE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.RECORD_TYPE, "BR, IB, VB, 07, 11, 12, 13, 1F, 2F, 3F, 7F", ",") ) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BK_FILED := true;
    endif


    //PR-UNSAT
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_UNSAT := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.RECORD_TYPE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.RECORD_TYPE, "AM, BR, CB, CJ, CP, CS, FC, FD, FT, FU, GN, HA, HL, IB, JL, JN, JR, JU, LR, ML, ND, NJ, PG, PT, RA, SJ, SL, TL, TX, VB, WA, WS, 0W, 07, 11, 12, 13, 1F, 2F, 3F, 7F", ",") ) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_UNSAT := true;
    endif




</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsEFXDates" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Generate filters for EFX Dates</Description>
<ExpressionText>    result := null;
  
   

    //MONTHS-OPEN
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN := 9999;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT) then
          if(iNORMALIZED_BUREAU_SEGMENTS.DATE_OPENED &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.DATE_OPENED) &lt;&gt; "") then
                    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN := TimestampDiff("months", iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.DATE_OPENED));
          else
                    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN := 9999;
          endif
    else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECTION) then
          if(iNORMALIZED_BUREAU_SEGMENTS.DATE_ASSIGNED &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.DATE_ASSIGNED) &lt;&gt; "") then
                    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN := TimestampDiff("months", iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.DATE_ASSIGNED));
          else
                    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN := 9999;
          endif
    endif endif



    //MONTHS-STATUS
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_STATUS := 9999;
    if(iNORMALIZED_BUREAU_SEGMENTS.DATE_REPORTED &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.DATE_REPORTED) &lt;&gt; "") then
              iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_STATUS := TimestampDiff("months", iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.DATE_REPORTED));
    endif


    //MONTHS-RPTED
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_STATUS;
</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_IsPSWLCC_Blank" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Check to see if a credit class was assigned by the bureau</Description>
<ExpressionText>result:="Y"; //blank

for every Application.CreditApplication.WHITE_LIST relative to Application do
if(WHITE_LIST.CREDIT_CLASS &lt;&gt; null and WHITE_LIST.CREDIT_CLASS &lt;&gt; "") then
result:="N"; //not blank
endif
endfor
</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_GetTELCO" ResultType="boolean" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iName" Type="string"/>
</Inputs>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xValue" Type="string"/>
</Locals>
<Description>Returns TELCO customer</Description>
<ExpressionText>result := false;


xValue := MATCHES("^.*(?i)(1ST CELL|AT T|A T WIRE|A&amp;T WIRE|ACS WIRELESS FEE|AERIAL COMM|AIR TOUCH|AIRTEL|AIRTOUCH|ALABAMA BELL SO|ALASKA WIRELESS COMM LLC OA|ALERT CELL NORTHSTAR CAPITAL|ALERT CELL NORTHSTER CAPITAL|ALLTEL|AMERCN TELCO|AMERITECH CELL|AMERITEL|AMERY TELCOM|ANTIETAM CABLE TELEVISION|APPALACHIAN WIRELESS|ARCH COMM|ARCH WIRE|ASIANA TELECOM|AT T MOBILITY|AT&amp;T MOBILITY|AT T PRIMARY MOBILITY|AT&amp;T PRIMARY MOBILITY|AT T WIRE|AT&amp;T WIRE|ATLANTIC TELEPHONE|ATT MOBILITY|ATT WIRE|ATTWIRE|AUSTIN TELCO|BALDWIN TELECOM INC|BELL ATLANTIC M|BELL SOUTH|BELLSOU|BELLSTH MOBL|BEN LOMAND TEL CONNECT|BEN LOMAND TELEPHONE COOPERATI|BIRCH TELE|BLACKFOOT TELEPHONE|BLUE CASA TELEPHONE|BLUEGRASS CELL|BS CELL|C SPIRE WIRELESS|CABLE &amp; WIRE|CABLE AND WIRE|CABLE ONE POCATELLO|CAL ORE TELEPHONE CO|CAM TEL CO|CAMBRIDGE TELEPHONE CO INC|CAMERON TELEPH|CANBY TELEPHONE|CAROLINA TEL|CAVALIER TELEPHONE|CELL 1|CELL 2000|CELLCOM|CELLULAR|CELLVISION INC|CENTENNIAL WIRE|CENTRAL TELEPH|CENTRYTEL|CENTURY CELL|CENTURY CELLUNE|CENTURY TEL|CENTURYTEL|CFW COMM|CHAPIN TELEPHONE COMPANY|CHICKASAW SULPHUR TELEPHONE|CINCINNATI BELL WIRELESS|CINCINNATI BELL WIRELINE|CINGULAR|CITZNS TELCO|CLEARNET|COMCAST MOBILE|COMMNET CELL|COMSOUTH TELECOMM HAWKINSVIL|COMSOUTH TELESYS INC PERRY|CONSMR CELL|COX COMMUNICATIONS KANSAS TEL|COX COMMUNICATIONS TELECOM|COX COMMUNICATIONS TELEPHONY|CRICKET WIRE|DIAMOND WIRELESS|DIGICOM SATELLITE|DIGIPH|DISCOUNT CELL|DOBSON CELL|DUO COUNTY TELEPHONE|EAGLE SATELLITE|EAST ASCENSION TELEPHONE|EASTERN OREGON TELECOM|ELLIJAY TELEPHONE COMPANY|EMERY TELCOM|EMPIRE TELEPHONE COMPANY|ENHANCED TELECOM|EXCLUSIVE WIRELESS INC|FARMERS TELEPHONE COOPERATIVE|FIDELITY TELEPHONE INTERNET|FIDELITY TELEPHONE ROLLA|FIDELITY TELEPHONE|FIRST DIGITAL TELECOM|FIRSTEL|FLINT CABLE TELEVISION|FRONTIER COMM|FRONTIER TELE|GENE S SATELLITE SERVICE|GENERAL TELEPH|GLDN ST CELL|GLOBALSTAR|GRAND TELEPHONE|GST TELECOM|GT TELECOMM|GTE CELL|GTE MOBIL|GTE TEL|GTE WIRE|GTE-CONTEL|GTEMOBIL|H C TELEPHONE COOP|HARGRAY TELEPHONE CO|HART TELEPHONE CABLE COMPANY|HAWAIIAN TELCOM|HAWAIIAN TELEPH|HAWN TEL|HEARTLAND WIRE|HIGHLAND TELEPHONE CO OP|HO CELLULA|HOME TELEPHONE CO INC|HON CEL TEL|HONOLULU CELL|HOSPERS TELEPHONE CO|HOUCELLULA|I WIRELESS|ICG COMM|IL CONS TEL CO|IL VAL CELLR|ILLINOIS BELL T|INFINITY WIRELESS|INFOTEL|INNOVATIVE TELEPHONE|INNOVATIVE WIRELESS|INTEGRA TELECOM HOLDINGS INC|INTELAFONE LLC|INTERSTATE VALLEY TELEPHONE|INTOUCH WIRELESS INC|IOWA WIRE|IOWA WIRELESS|IRIDIUM|KMC TELE|KNOLOGY|LAUREL HIGHLAND TELEPHONE CO|LEAP WIRE|LEAP WIRELESS|LGTBG/UNITEL|LIFE WIRELESS|LIG TEL COMMUNICATIONS|LINX SATELLITE|LONSDALE TELEPHONE CO INC|LORETEL|LOUISIANA BELL|MATANUSKA TELEPHONE ASSOC|MCG COMM|MCI TEL|MCI WIRE|MCI-TEL|MCLOUD TELEPHONE|MEDIA ONE|MEDIAONE|MERCURY CELL|METROCEL CELL|MICROCELL|MID ATLANTIC PRO TEL|MID MO CELL|MID RIVERS TELEPHONE|MID TEX CELLULA|MIDWEST WIRE|MIDWEST WIRELESS|MITEL CLOUD SERVICES|MOBI PCS PEARLRIDGE|MOBILE AREA WATER SEWER|MOBILE DESTINATION|MONTICELLO UTILITY COMM|MY WIRELESS INC|NB TEL|NECC TELECOM|NEMONT TELEPHONE COOPERATIVE|NEVADA BELL|NEW ULM TELECOM INC|NEW-CELL|NEXTEL|NEXTLINK|NIB/US CELL|NK TELCO INC|NORTH EASTERN PA TELEPHONE|NTELOS|NU TELECOM|NUVOX COMM|NY TELEPHONE CO|OMNIPOINT|OPTEL|ORBITEL COMMUNICATIONS|OREGON TELCO|PAC BELL|PACBELL|PACIFIC BELL|PACIFIC TELE|PALMETTO RURAL TELEPHONE|PBT/BELLSO|PC TELCOM|PENTELEDATA|PINE TELECOMMUNICATIONS|PINELAND TELEPHONE|PIONEER TELEPH|PLATEAU CELL|PNG TELECOMM|POKA LAMBRO TELEPHONE COMPANY|POWER TEL|POWERTEL|PR TELEPHONE|PRIME CABLE TEL|PRIMUS TELECOMM INC|PRIMUS TELECOMMUNICATIONS IN|PUBLIC SERVICE TELEPHONE|PULSE TELECOM|QWEST|RED SKYE WIRELESS LLC|RELIABLE WIRELESS|RESORT TELEVISION CABLE|RIO VIRGIN TELEPHONE CO|ROCHESTER TELEPH|RURAL CELL|S N G SATELLITE|S T TELEPHONE|S W BELL MOB|S W BELL|S.W. BELL MOB|S.W.BELL MOB|SAGE TELCO|SBC COMM|SHARON TELEPHONE COMPANY|SHENTEL CABLE EAST|SHENTEL CABLE|SHENTEL|SI WIRELESS DBA MOBILENATION|SIERRA TELEPHONE|SIMPLY WIRELESS|SIMPLYWIRELESS|SKYTEL|SOUTH SLOPE COOP TELCO|SOUTHEAST TELEPHONE|SOUTHERN BELL|SOUTHWEST BELL|SOUTHWESTERN BE|SOWESTBELL|SPRING MOBILE AN AUTHORIZED AT|SPRING MOBILE AT T RETAILER|SPRINT PCS|SPRINT|STHWST BELL|SUDDENLINK ALEXANDRIA TELEPHO|SUDDENLINK BOSSIER CITY TELEP|SUDDENLINK GREENVILLE TELEPHO|SUDDENLINK JONESBORO TELEPHON|SUDDENLINK LAKE CHARLES TELEP|SUPRA TELECOM|SUREWEST TELEPHONE|SW BELL|SW TX TEL|SWB MOB|SWB WIRE|TC TELEPHONE LLC|TDS TELECOM|TEC ROANOKE TELEPHONE COMPANY|TEL STAR CABLEVISION INC|TELECORP|TELEKOM|TELIGENT|TETON WIRE|TEXAS RSA DBA 5 STAR WIRELESS|THE MOBILE SOLUTION|THE MOBILE SOURCE LLC|THE SATELLITE CENTER INC|THUMB CELL|TIME WARNER TELE|TKS TELEPOST KABEL SVC|TRAVEL CELL|TRITON PCS|TWIN VALLEY TELEPHONE|U S WEST|U.S. CELL|UNION TELE|UNITED TELE CO|UNITED TELEPH|UNITED WIRELESS COMMUNICATIONS|UNITEL GLOBAL L L C|US UNWIRED|US WEST|VALLEY WIRELESS|VERIZON|VIAERO WIRELESS NEBRASKA|VOICE STREAM|VOICESTREAM|VTX TELECOM|W WIRELESS|WAITSFIELD TELECOM|WEST CAROLINA RURAL TELEPHONE|WEST CENTRAL WIRELESS|WEST WIRE|WESTERN WIRE|WESTEX CELL|WESTRN WRL|WILKES TELEPHONE MEMBERSHIP C|WILTEL INC|WIRELESS ADVOCATES STAPLES|WIRELESS ENTITY|WIRELESS ONE|WIRELESS ZONE|WORLD DISCOUNT TELECOM|WORLDCOM WIRE|YESTEL TIMES TELECOM USA INC|Z WIRELESS|ZIRKEL WIRELESS).*$", iName); 

if(xValue &lt;&gt; null AND UCASE(xValue) = "TRUE") then
             result := true;
endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_isIRC_CreditClassAvailable" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Returns if the IRC credit class value is available</Description>
<ExpressionText>result := "N";

for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
                 if(PersonalApplicantOutput.IRC_CREDIT_CLASS &lt;&gt; null AND PersonalApplicantOutput.IRC_CREDIT_CLASS &lt;&gt; "") then
                                  result := "Y";
                 endif
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_set_CreditClass6" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Set Credit class 6</Description>
<ExpressionText>for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do
	BusinessApplicantOutput.INITIAL_CREDIT_CLASS:="6";
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_set_CreditClass_S" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xDmFunction" Type="string"/>
</Locals>
<Description>Sets credit class review</Description>
<ExpressionText>for every Application.CreditRequest relative to Application do
	xDmFunction:=DMFunction;
endfor

if(xDmFunction="CCC" or xDmFunction="SCC")then
	For every Application.CreditApplication relative to Application do
		CreditApplication.REVIEW_CREDIT_CLASS := "S";
		CreditApplication.TEMPLATE_CODE := "CCC001";
	
	endfor
else if(xDmFunction="BCC" or xDmFunction="UWR" or xDmFunction="BVS")then
	For every Application.CreditApplication relative to Application do
		CreditApplication.REVIEW_CREDIT_CLASS := "S";
		CreditApplication.TEMPLATE_CODE := "BCC001";
	
	endfor
endif
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsTUInquiry" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Generate filters for TU Inquiry</Description>
<ExpressionText>    result := null;
  
    //INQUIRY
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.SEGMENT_TYPE = "IN11" OR iNORMALIZED_BUREAU_SEGMENTS.SEGMENT_TYPE = "IN") then
            if(iNORMALIZED_BUREAU_SEGMENTS.IS_DEDUP_INQ = null or iNORMALIZED_BUREAU_SEGMENTS.IS_DEDUP_INQ &lt;&gt; true) then
                       iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY := true;
            endif
    endif

    

    //MONTHS-INQ
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_INQ := 9999;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY AND iNORMALIZED_BUREAU_SEGMENTS.INQUIRY_DATE &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.INQUIRY_DATE) &lt;&gt; "") then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_INQ := TimestampDiff("months", iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.INQUIRY_DATE))  
    endif



    //ALE-INQ
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE_INQ := false;
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CAP_INQ := false;
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC_INQ := false;
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LFI_INQ := false;
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIN_INQ := false;
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ILN_INQ := false;

    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY) then
         if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null and iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "A") then
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE_INQ := true;
            endif
         if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null and iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "Q") then
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CAP_INQ := true;
            endif
         if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null and iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "B") then
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC_INQ := true;
            endif
         if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null and iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "F") then
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LFI_INQ := true;
            endif
         if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null and InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE, "F, Q", ",")) then
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIN_INQ := true;
            endif
         if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null and InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE, "F, I, P, V, Z", ",")) then
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ILN_INQ := true;
            endif
    endif

</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsTUAmount" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xAmount" Type="numeric"/>
<Local InitialValue="0.0" Name="xBalance" Type="numeric"/>
</Locals>
<Description>Generate filters for TU amount</Description>
<ExpressionText>    result := null;
  
   
    //AMOUNT
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT := 0;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true) then
        if(iNORMALIZED_BUREAU_SEGMENTS.CREDIT_LIMIT_AMT &lt;&gt; null AND Val(iNORMALIZED_BUREAU_SEGMENTS.CREDIT_LIMIT_AMT) &gt; 0)then
                 iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT := Val(iNORMALIZED_BUREAU_SEGMENTS.CREDIT_LIMIT_AMT);
        else if(iNORMALIZED_BUREAU_SEGMENTS.HIGH_CRED_AMT &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.HIGH_CRED_AMT) &gt; 0)then
                 iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT := Val(iNORMALIZED_BUREAU_SEGMENTS.HIGH_CRED_AMT);
        else if((iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null and iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "Y") OR 
                                  (iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE &lt;&gt; null and iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE = "YY")) then
                if(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) &lt;&gt; "" ) then 
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT := Val(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT);
                else 
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT := 0;
                endif
        else
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT := 0;
        endif endif endif
    
    else if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG = true) then
        if(iNORMALIZED_BUREAU_SEGMENTS.ORIGINAL_AMOUNT &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.ORIGINAL_AMOUNT) &gt; 0)then
                 iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT := Val(iNORMALIZED_BUREAU_SEGMENTS.ORIGINAL_AMOUNT);
        else if(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) &lt;&gt; "" ) then 
                    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT := Max(0, Val(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT));
        else
              iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT := 0;
        endif endif
    endif endif
    
   
    //VALID-AMOUNT
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true) then
        if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "Y" AND iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE = "YY") then
                 if((iNORMALIZED_BUREAU_SEGMENTS.CREDIT_LIMIT_AMT &lt;&gt; null AND Val(iNORMALIZED_BUREAU_SEGMENTS.CREDIT_LIMIT_AMT) &gt; 0) OR 
                                    (iNORMALIZED_BUREAU_SEGMENTS.HIGH_CRED_AMT &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.HIGH_CRED_AMT) &gt; 0) OR
                                    (iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) &gt;= 0)) then
                         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT := true;
                 else
                         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT := false;
                 endif
        else
                 if((iNORMALIZED_BUREAU_SEGMENTS.CREDIT_LIMIT_AMT &lt;&gt; null AND Val(iNORMALIZED_BUREAU_SEGMENTS.CREDIT_LIMIT_AMT) &gt; 0) OR 
                                    (iNORMALIZED_BUREAU_SEGMENTS.HIGH_CRED_AMT &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.HIGH_CRED_AMT) &gt; 0)) then
                         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT := true;
                 else
                         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT := false;
                 endif
        endif
    
    else if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG = true) then
        if((iNORMALIZED_BUREAU_SEGMENTS.ORIGINAL_AMOUNT &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.ORIGINAL_AMOUNT) &lt;&gt; "") OR 
                                 (iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) &lt;&gt; "") )then
                 iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT := true;
        else
                 iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT := false;
        endif
    endif endif 


    //AMONT_PAST_DUE
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT_PAST_DUE := 0;
    if(iNORMALIZED_BUREAU_SEGMENTS.PAST_DUE_AMT &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.PAST_DUE_AMT) &lt;&gt; "")then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT_PAST_DUE  :=  VAL(iNORMALIZED_BUREAU_SEGMENTS.PAST_DUE_AMT);
    endif


    //BALANCE
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE := 0;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true) then
            if(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) &lt;&gt; "") then
                  if(VAL(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) &gt;= iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT_PAST_DUE) then
                          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE := VAL(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT);
                  else
                          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT_PAST_DUE;
                  endif
            else
                     iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT_PAST_DUE;
            endif
    else if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG = true) then
                     iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE := VAL(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT);
    endif endif


    //AVAILABLE-CREDIT
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AVAILABLE_CREDIT := 0;
    if( (iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT = null OR TRIM(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) = "") OR (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT = 0) ) then
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AVAILABLE_CREDIT := 0;
    else 
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AVAILABLE_CREDIT := MAX(0, (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT - VAL(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT)));
    endif
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AVAILABLE_CREDIT &gt;= 1000000) then
              iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AVAILABLE_CREDIT := 0;
    endif


    //MONTHLY-PAYMENT
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHLY_PAYMENT := 0;
    if(iNORMALIZED_BUREAU_SEGMENTS.TERMS_FREQ &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.TERMS_FREQ, "M, P, W, X, Y, S, Q, B, L, E, V", ",")) then 
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHLY_PAYMENT := VAL(iNORMALIZED_BUREAU_SEGMENTS.TERMS_SCHED_MTH_PMT_AMT);
    else if (iNORMALIZED_BUREAU_SEGMENTS.PORTFOLIO_TYPE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.PORTFOLIO_TYPE = "R") then
               //iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHLY_PAYMENT := INT(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE * 0.0325);
               //Truncate logic removed from filters
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHLY_PAYMENT := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE * 0.0325;
    else if(iNORMALIZED_BUREAU_SEGMENTS.TERMS_FREQ &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.TERMS_PMT_SCHED_MTH = "MIN") then 
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHLY_PAYMENT := VAL(iNORMALIZED_BUREAU_SEGMENTS.TERMS_SCHED_MTH_PMT_AMT);
    endif endif endif
     

    //BTL
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BTL := 0;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT &lt;&gt; 0 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE &lt;&gt; 0) then
            xAmount := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
            xBalance := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE;
            //iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BTL := INT((xBalance/xAmount)*100);
            //Truncate logic removed from filters
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BTL := (xBalance/xAmount)*100;
    else
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BTL := 0;
    endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_PuertoRico_L_to_D" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Converts all PR strategy CC from L to D</Description>
<ExpressionText>

for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
        if(CreditApplication.isPuertoRico &lt;&gt; null and CreditApplication.isPuertoRico = "Y") then
			if (CreditApplication.PuertoRicoStrategy &lt;&gt; null  and CreditApplication.PuertoRicoStrategy &lt;&gt; "")then
				if(CreditApplication.PuertoRicoStrategy = "CHAMPION_1")then
					if(PersonalApplicantOutput.FINAL_CREDIT_CLASS &lt;&gt; null and PersonalApplicantOutput.FINAL_CREDIT_CLASS = "L")then
						PersonalApplicantOutput.FINAL_CREDIT_CLASS := "D";
						
					endif
				endif
			endif
		endif
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_BusCOBkIn7YrsSatus" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Was there a BK on the business in the last 7 Years. </Description>
<ExpressionText>result:=null;
for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do 
	if((BusinessApplicantOutput.BusIsBkInLast7Yrs&lt;&gt;null AND BusinessApplicantOutput.BusIsBkInLast7Yrs="PASS") OR (BusinessApplicantOutput.BusChargeOffNum=0))then
		result:="PASS";
	else if((BusinessApplicantOutput.BusIsBkInLast7Yrs&lt;&gt;null AND BusinessApplicantOutput.BusIsBkInLast7Yrs="FAIL") OR (BusinessApplicantOutput.BusChargeOffNum&gt;0))then
		result:="FAIL";
	endif endif
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_AssignVelocityCreditClass" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Assigns Velocity Credit Class</Description>
<ExpressionText>if(CreditApplication.type &lt;&gt; null AND CreditApplication.type = "Consumer") then
	for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to CreditApplication do 
		PersonalApplicantOutput.INITIAL_CREDIT_CLASS := "Y";
		PersonalApplicantOutput.FINAL_CREDIT_CLASS := "Y";
endfor
else if (CreditApplication.type &lt;&gt; null AND CreditApplication.type = "Business") then
               for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to CreditApplication do
                          BusinessApplicantOutput.INITIAL_CREDIT_CLASS := "6";
						  BusinessApplicantOutput.FINAL_CREDIT_CLASS := "6";
               endfor
endif endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsEFXFunctions" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xRateCode" Type="string"/>
</Locals>
<Description>Generate filters for EFX Functions</Description>
<ExpressionText>    result := null;
  

    //NC-DEROG
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NC_DEROG := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND 
                              (InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AM, AN, AX, AY, BG, BK, BQ, BR, BS, BW, BX, BY, BZ, CA, CB, CD, CH, CJ, CP, CQ, CT, CU, CY, CZ, DB, DJ, DK, DM, DN, DO, DU, EB, ED, EM, ER, ES, ET, EV, FC, FD, FU, FV, FX, GA, GB, GC, GD, GF, GH, GJ, GL, HM, HO, HX, IA, IK, IL, IM, IN", ",") OR 
                                          InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AM, AN, AX, AY, BG, BK, BQ, BR, BS, BW, BX, BY, BZ, CA, CB, CD, CH, CJ, CP, CQ, CT, CU, CY, CZ, DB, DJ, DK, DM, DN, DO, DU, EB, ED, EM, ER, ES, ET, EV, FC, FD, FU, FV, FX, GA, GB, GC, GD, GF, GH, GJ, GL, HM, HO, HX, IA, IK, IL, IM, IN", ",") )  ) then
           iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NC_DEROG := true;

    endif


    //Default Rate Code
 if(iNORMALIZED_BUREAU_SEGMENTS.RATE_CODE = null OR TRIM(iNORMALIZED_BUREAU_SEGMENTS.RATE_CODE) = "" OR InStringList(iNORMALIZED_BUREAU_SEGMENTS.RATE_CODE, "*, 0", ",")) then
            if(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE1 &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE1) &lt;= 1
                               AND iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE2 &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE2) &lt;= 1
                               AND iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE3 &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE3) &lt;= 1
                               AND (iNORMALIZED_BUREAU_SEGMENTS.NUM_30_DPD = null OR VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_30_DPD) = 0) 
                               AND (iNORMALIZED_BUREAU_SEGMENTS.NUM_60_DPD = null OR VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_60_DPD) = 0)
                               AND (iNORMALIZED_BUREAU_SEGMENTS.NUM_90_DPD = null OR VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_90_DPD) = 0) 
                               AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NC_DEROG = false
                               AND ((iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "Y") = false) ) then

                    xRateCode := "1";
            endif
    else
            xRateCode := iNORMALIZED_BUREAU_SEGMENTS.RATE_CODE;
    endif


    //NRATE
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NRATE := 0;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT) then
           if(xRateCode &lt;&gt; null AND InStringList(xRateCode, "0, 1, 2, 3, 4, 5, 6, 7, 8, 9", ",")) then
                        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NRATE := VAL(xRateCode);
           else if(xRateCode &lt;&gt; null AND InStringList(xRateCode, "F,G, H, M, Z, #, $", ",")) then
                        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NRATE := 9;
    endif endif endif
   
    //BUCKET
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BUCKET := 0;
    if(iNORMALIZED_BUREAU_SEGMENTS.NUM_90_DPD &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_90_DPD) &gt; 0) then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BUCKET := 4;
    else if(iNORMALIZED_BUREAU_SEGMENTS.NUM_60_DPD &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_60_DPD) &gt; 0) then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BUCKET := 3;
    else if(iNORMALIZED_BUREAU_SEGMENTS.NUM_30_DPD &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_30_DPD) &gt; 0) then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BUCKET := 2;
    else
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BUCKET := 0;
    endif endif endif


    //MAX-RATE
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE := 0;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT) then
           iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NRATE);
           if(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE1 &lt;&gt; null and TRIM(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE1) &lt;&gt; "") then
                     iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE, VAL(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE1));
           endif
           if(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE2 &lt;&gt; null and TRIM(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE2) &lt;&gt; "") then
                     iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE, VAL(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE2));
           endif
           if(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE3 &lt;&gt; null and TRIM(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE3) &lt;&gt; "") then
                     iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE, VAL(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE3));
           endif
           iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BUCKET);
           iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE, VAL(dm_MinMax_ValueInGrid(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED, "MAX")));
    
    endif
   

    //WE-BANKRUPTCY
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_BANKRUPTCY := 0;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT) then
         if((xRateCode &lt;&gt; null AND InStringList(xRateCode, "7, M, Z", ",")) OR  InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "BW, CP, DO, EV, HM, IA, IK, IL, IM, IN", ",") OR 
                                         InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "BW, CP, DO, EV, HM, IA, IK, IL, IM, IN", ",")) then
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_BANKRUPTCY := 1;
         endif
    endif


    //WE-DRGNOCOL
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_DRGNOCOL := 0;
    if( (  (xRateCode &lt;&gt; null AND InStringList(xRateCode, "7, 8, 9, F, G, H, M, Z, #, $", ",")) OR 
                             InStringList(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE1, "7, 8, 9", ",") OR 
                             InStringList(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE2, "7, 8, 9", ",") OR 
                             InStringList(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE3, "7, 8, 9", ",") OR 
                             InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AM, AN, AX, AY, BG, BK, BQ, BR, BS, BW, BX, BZ, CA, CB, CD, CH, CJ, CP, CQ, CT, CU, CY, DB, DJ, DK, DM, DN, DO, DU, EB, ED, EM, ES, ET, EV, FC, FD, FU, FV, FX, GA, GB, GC, GD, GF, GH, GJ, GL, HM, HO, HX, IA, IK, IL, IM, IN", ",") OR 
                             InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AM, AN, AX, AY, BG, BK, BQ, BR, BS, BW, BX, BZ, CA, CB, CD, CH, CJ, CP, CQ, CT, CU, CY, DB, DJ, DK, DM, DN, DO, DU, EB, ED, EM, ES, ET, EV, FC, FD, FU, FV, FX, GA, GB, GC, GD, GF, GH, GJ, GL, HM, HO, HX, IA, IK, IL, IM, IN", ",") ) 
    
                                             AND (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; "Y" AND NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "BY, CZ, ER", ",") AND NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "BY, CZ, ER", ",")) ) then
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_DRGNOCOL := 1;
    endif


    //WE-90NOCOL
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_90NOCOL := 0;
    if( (  (xRateCode &lt;&gt; null AND InStringList(xRateCode, "4, 5, 7, 8, 9, F, G, H, M, Z, #, $", ",")) OR 
                             InStringList(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE1, "4, 5, 7, 8, 9", ",") OR 
                             InStringList(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE2, "4, 5, 7, 8, 9", ",") OR 
                             InStringList(iNORMALIZED_BUREAU_SEGMENTS.PREVIOUS_RATE3, "4, 5, 7, 8, 9", ",") OR 
                             InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AM, AN, AX, AY, BG, BK, BQ, BR, BS, BW, BX, BZ, CA, CB, CD, CH, CJ, CP, CQ, CT, CU, CY, DB, DJ, DK, DM, DN, DO, DU, EB, ED, EM, ES, ET, EV, FC, FD, FU, FV, FX, GA, GB, GC, GD, GF, GH, GJ, GL, HM, HO, HX, IA, IK, IL, IM, IN", ",") OR 
                             InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AM, AN, AX, AY, BG, BK, BQ, BR, BS, BW, BX, BZ, CA, CB, CD, CH, CJ, CP, CQ, CT, CU, CY, DB, DJ, DK, DM, DN, DO, DU, EB, ED, EM, ES, ET, EV, FC, FD, FU, FV, FX, GA, GB, GC, GD, GF, GH, GJ, GL, HM, HO, HX, IA, IK, IL, IM, IN", ",") OR
                             CharCount("4", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED) &gt; 0 OR CharCount("5", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED) &gt; 0 OR
                             (iNORMALIZED_BUREAU_SEGMENTS.NUM_90_DPD &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_90_DPD) &gt; 0)) 
    
                                             AND (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; "Y" AND NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "BY, CZ, ER", ",") AND NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "BY, CZ, ER", ",")) ) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_90NOCOL := 1;
    endif


    //RATINGS-OF30
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RATINGS_OF30 := CharCount("2", iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED);
    if(xRateCode &lt;&gt; null AND xRateCode = "2") then
                     iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RATINGS_OF30 := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RATINGS_OF30 + 1;
    endif




    //WORST-EVER
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER := 0;
    if(InNumberList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE, "7, 8, 9", ",") OR 
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NC_DEROG OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "Y") then
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER := 400;
    else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE = 5) then
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER := 120;
    else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE = 4) then
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER := 90;
    else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE = 3) then
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER := 60;
    else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE = 2) then
                if(((iNORMALIZED_BUREAU_SEGMENTS.NUM_30_DPD &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_30_DPD) &gt; 3))  OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RATINGS_OF30 &gt; 3) then
                                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER := 34;
                else
                                //if Rate Code = 2
                                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER := 30;
                endif
    else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE = 2) then
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER := 30;
    else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MAX_RATE = 1) then
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER := 1;
    endif endif endif endif endif endif endif 




    //PRESENT-STATUS
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS := 0;
    if(((xRateCode &lt;&gt; null AND InStringList(xRateCode, "7, 8, 9, F, G, H, M, Z, #", ",")) OR 
                                                   ((iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "Y" OR 
                       InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "CZ, BY", ",") OR InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "CZ, BY", ",") ) AND
                                                              (iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) &gt; 0))  ) AND 
                  
                             (NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AY, BK, BQ, CA, CH, ED, ER, ET, FA", ",") AND NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AY, BK, BQ, CA, CH, ED, ER, ET, FA", ","))) then
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS := 400;
    else if (xRateCode &lt;&gt; null AND xRateCode = "5") then
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS := 120;
    else if (xRateCode &lt;&gt; null AND xRateCode = "4") then
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS := 90;
    else if (xRateCode &lt;&gt; null AND xRateCode = "3") then
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS := 60;
    else if (xRateCode &lt;&gt; null AND xRateCode = "2") then
                if(((iNORMALIZED_BUREAU_SEGMENTS.NUM_30_DPD &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.NUM_30_DPD) &gt; 3))  OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RATINGS_OF30 &gt; 3) then
                                 iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS := 34;
                else
                                 //if RATE_CODE = 2
                                 iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS := 30;
                endif
    else if (xRateCode &lt;&gt; null AND xRateCode = "2") then
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS := 30;
    else if (xRateCode &lt;&gt; null AND xRateCode = "1" OR
                       (InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AY, BK, BQ, CA, CH, ED, ER, ET, FA", ",")) OR
                       (InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AY, BK, BQ, CA, CH, ED, ER, ET, FA", ",")) OR
                                      ((iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "Y" OR
                  InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "CZ, BY", ",") OR InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "CZ, BY", ","))  
                                            AND (iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT = null OR VAL(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) = 0) )) then
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS := 1;
    endif endif endif endif endif endif endif 




</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_PCRv6ScoreModel" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="false" Name="xValidScore" Type="boolean"/>
<Local InitialValue="null" Name="xReportDate" Type="timestamp"/>
<Local InitialValue="null" Name="xScoreModel" Type="SCORE_MODEL"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode5" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode4" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode3" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode2" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode1" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xBureauName" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreName" Type="string"/>
<Local InitialValue="0" Name="xScoreValue" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xScoreModelCombined" Type="string"/>
<Local InitialValue="0.0" Name="xLNScoreValue" Type="numeric"/>
</Locals>
<Description>Populate Score model object with PCRv4 score.</Description>
<ExpressionText>result:=null;
xValidScore:=false;

xScoreName := "PCRv6";

for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do
          if(SCORES.PCR6 &lt;&gt; null AND SCORES.PCR6 &gt; 0) then
                    xValidScore := true;    
          endif
       xScoreValue := SCORES.PCR6;
endfor

for every Application.CreditApplication.PersonalApplicant.SCORES.SCORE_MODEL relative to PersonalApplicant do
          if(SCORE_MODEL.SCORE_NAME &lt;&gt; null AND SCORE_MODEL.SCORE_NAME = "PCRv4") then
                    xValidScore := true;
                    if(SCORE_MODEL.BUREAU_NAME &lt;&gt; null) then
                              xBureauName := SCORE_MODEL.BUREAU_NAME;
                    endif
                    if(SCORE_MODEL.REASON_CODE_1 &lt;&gt; null) then
                              xReasonCode1 := SCORE_MODEL.REASON_CODE_1;
                    endif
                    if(SCORE_MODEL.REASON_CODE_2 &lt;&gt; null) then
                              xReasonCode2 := SCORE_MODEL.REASON_CODE_2;
                    endif
                    if(SCORE_MODEL.REASON_CODE_3 &lt;&gt; null) then
               xReasonCode3 := SCORE_MODEL.REASON_CODE_3;
                    endif
                    if(SCORE_MODEL.REASON_CODE_4 &lt;&gt; null) then
                              xReasonCode4 := SCORE_MODEL.REASON_CODE_4;
                    endif
                    if(SCORE_MODEL.REASON_CODE_5 &lt;&gt; null) then
                              xReasonCode5 := SCORE_MODEL.REASON_CODE_5;
                    endif
     if(SCORE_MODEL.REPORT_DATE&lt;&gt;null)then
      xReportDate:=Timestamp( SCORE_MODEL.REPORT_DATE,null);
     endif
          endif
endfor


for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do
          xScoreModelCombined:=dm_CombinedModelReasonCodes;
endfor

if (xScoreModelCombined &lt;&gt; null AND xScoreModelCombined &lt;&gt; "LN" AND xValidScore) then

          xScoreModel:= new SCORE_MODEL;
          xSCoreModel.SCORE_NAME:=xScoreName;
          xScoreModel.SCORE_VALUE:=xScoreValue;
          xScoreModel.BUREAU_NAME:=xBureauName;
          xScoreModel.REPORT_DATE:=TimestampToDate( xReportDate);
          xScoreModel.REASON_CODE_1:=xReasonCode1;
          xScoreModel.REASON_CODE_2:=xReasonCode2;
          xScoreModel.REASON_CODE_3:=xReasonCode3;
          xScoreModel.REASON_CODE_4:=xReasonCode4;
          xScoreModel.REASON_CODE_5:=xReasonCode5;
          xScoreModel.IS_SCORE_MODEL_DECISION:=false;

          for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do
                    Attach(SCORES,xScoreModel);
          endfor 




else if (xScoreModelCombined &lt;&gt; null AND xScoreModelCombined = "LN") then
          xValidScore := false;
          for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.LNRiskViewDataSource.Response.Output.RiskViewResponseEx.Result.Models.Model.LNScores.LNScore relative to PersonalApplicant do
                    if(LNScore.Type&lt;&gt;null and LNScore.Type&lt;&gt;"")then
                              if(LNScore.Type="TelecomRVT12101" or LNScore.Type="TelecomRVT12121")then
                                        xLNScoreValue:=int(LNScore.Value);
                                        if(xLNScoreValue&gt;=0)then
                                                  xValidScore:=true;
                                        endif
                                        //xBureauName:="LEXISNEXIS";
                              endif
                    endif


                    if(xValidScore) then
							//re-initialising to blank as it hsould populate now as per LN data
							xReasonCode1:="";
							xReasonCode2:="";
							xReasonCode3:="";
							xReasonCode4:="";
							xReasonCode5:="";
                              for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.LNRiskViewDataSource.Response.Output.RiskViewResponseEx.Result.Models.Model.LNScores.LNScore.HighRiskIndicators.HighRiskIndicator relative to LNScore do
                                        if(HighRiskIndicator.Sequence=1)then
                                                  xReasonCode1:=RiskCode;
                                        else if(HighRiskIndicator.Sequence=2)then
                                                  xReasonCode2:=RiskCode;
                                        else if(HighRiskIndicator.Sequence=3)then
                                                  xReasonCode3:=RiskCode;
                                        else if(HighRiskIndicator.Sequence=4)then
                                                  xReasonCode4:=RiskCode;
                                        else if(HighRiskIndicator.Sequence=5)then
                                                  xReasonCode5:=RiskCode;
                                        endif endif endif endif endif
                               endfor
                    endif
          endfor
 
           if(xValidScore) then
                    xScoreModel:= new SCORE_MODEL;
                    xSCoreModel.SCORE_NAME:=xScoreName;
                    xScoreModel.SCORE_VALUE:=xScoreValue;
                    xScoreModel.BUREAU_NAME:=xBureauName;
                    xScoreModel.REPORT_DATE:=TimestampToDate( xReportDate);
                    xScoreModel.REASON_CODE_1:=xReasonCode1;
                    xScoreModel.REASON_CODE_2:=xReasonCode2;
                    xScoreModel.REASON_CODE_3:=xReasonCode3;
                    xScoreModel.REASON_CODE_4:=xReasonCode4;
                    xScoreModel.REASON_CODE_5:=xReasonCode5;
                    xScoreModel.IS_SCORE_MODEL_DECISION:=false;

                    for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do
                              Attach(SCORES,xScoreModel);
                    endfor 
          endif
          
endif
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_PGConsumerCCStatus" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Consumer Credit Class is A B or C</Description>
<ExpressionText>result:="false";
for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to CreditApplication do
	if(PersonalApplicantOutput.INITIAL_CREDIT_CLASS&lt;&gt;null and InStringList(PersonalApplicantOutput.INITIAL_CREDIT_CLASS,"A,B,C",","))then
	result:="true";
	endif
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_set_CreditClass5" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Set credit class 5</Description>
<ExpressionText>for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do
	BusinessApplicantOutput.INITIAL_CREDIT_CLASS:="5";
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_setWFMConsumerCCto_T" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="T" Name="xCreditClass" Type="string"/>
</Locals>
<Description>Sets the Consumer Credit Class</Description>
<ExpressionText>for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do 
		PersonalApplicantOutput.INITIAL_CREDIT_CLASS := xCreditClass;
		PersonalApplicantOutput.FINAL_CREDIT_CLASS := xCreditClass;
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_SortEFXInquiry" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iInquiry" Type="Inquiry"/>
</Inputs>
<Locals>
<Local InitialValue="null" Name="xInquiry" Type="Inquiry"/>
<Local InitialValue="&quot;&quot;" Name="xIndCode" Type="string"/>
</Locals>
<Description>Execute sort on EFX Inquiry</Description>
<ExpressionText>result := null;


for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.InquiryList.Inquiry relative to PersonalApplicant do 

          if(Inquiry.INQ_TO_DEDUP = null) then
                     xIndCode := RIGHT ( LEFT ( Inquiry.AbbreviationAndOrCustomerNumber,  5) , 2);
                     if( InStringList(xIndCode, "AN, AU, AL, FA", ",") )then
                                    Inquiry.INQ_TO_DEDUP := 1;
                     else if(InStringList(xIndCode, "FM, RE, RZ", ",")) then
                                   Inquiry.INQ_TO_DEDUP := 2;
                     else
                                   Inquiry.INQ_TO_DEDUP := 0;
                     endif endif
      

                     //set the value of Bank Inquiry as same
                     Inquiry.INQ_TO_DEDUPB := Inquiry.INQ_TO_DEDUP;
      
          endif
    
          if(iInquiry.INQ_TO_DEDUP = null) then
                     xIndCode := RIGHT ( LEFT ( iInquiry.AbbreviationAndOrCustomerNumber,  5) , 2);
                     if( InStringList(xIndCode, "AN, AU, AL, FA", ",") )then
                                    iInquiry.INQ_TO_DEDUP := 1;
                     else if(InStringList(xIndCode, "FM, RE, RZ", ",")) then
                                   iInquiry.INQ_TO_DEDUP := 2;
                     else
                                   iInquiry.INQ_TO_DEDUP := 0;
                     endif endif
      
      
                     //set the value of Bank Inquiry as same
                     iInquiry.INQ_TO_DEDUPB := iInquiry.INQ_TO_DEDUP;
          endif
    
           if(Inquiry.DAYS_INQ = null) then
                    Inquiry.DAYS_INQ := 9999;
                    if(Inquiry.InquiryDate &lt;&gt; null AND TRIM(Inquiry.InquiryDate) &lt;&gt; "") then
                                      Inquiry.DAYS_INQ := TimestampDiff("days", iProfileDate, dm_formatDate(Inquiry.InquiryDate));  
                   endif
           endif

           if(iInquiry.DAYS_INQ = null) then
                    iInquiry.DAYS_INQ := 9999;
                    if(iInquiry.InquiryDate &lt;&gt; null AND TRIM(iInquiry.InquiryDate) &lt;&gt; "") then
                                      iInquiry.DAYS_INQ := TimestampDiff("days", iProfileDate, dm_formatDate(iInquiry.InquiryDate));  
                   endif
           endif


            if(xInquiry = null) then
                         xInquiry := new Inquiry;
            endif
   
            if(iInquiry.INQ_TO_DEDUP &lt; Inquiry.INQ_TO_DEDUP  OR (iInquiry.INQ_TO_DEDUP = Inquiry.INQ_TO_DEDUP AND iInquiry.DAYS_INQ &lt; Inquiry.DAYS_INQ)  OR
                                                                                                   (iInquiry.INQ_TO_DEDUP = Inquiry.INQ_TO_DEDUP AND iInquiry.DAYS_INQ = Inquiry.DAYS_INQ  AND iInquiry.INQ_DEDUP_COUNTER &lt; Inquiry.INQ_DEDUP_COUNTER) ) then
                xInquiry.SourceSegment := Inquiry.SourceSegment;
                xInquiry.InquiryDate := Inquiry.InquiryDate;
                xInquiry.AbbreviationAndOrCustomerNumber := Inquiry.AbbreviationAndOrCustomerNumber;
                xInquiry.Type := Inquiry.Type;
                xInquiry.AccountNumber := Inquiry.AccountNumber;
                xInquiry.BureauMarket := Inquiry.BureauMarket;
                xInquiry.BureauSubMarket := Inquiry.BureauSubMarket;
                xInquiry.IndustryCode := Inquiry.IndustryCode;
                xInquiry.SubscriberNumber := Inquiry.SubscriberNumber;
                xInquiry.SubscriberName := Inquiry.SubscriberName;
                xInquiry.LoanType := Inquiry.LoanType;
                xInquiry.LoanAmount := Inquiry.LoanAmount;
                xInquiry.TermsDuration := Inquiry.TermsDuration;
                xInquiry.Y2kInquiryDate := Inquiry.Y2kInquiryDate;
                xInquiry.RequestorName := Inquiry.RequestorName;
                xInquiry.INQ_TO_DEDUP := Inquiry.INQ_TO_DEDUP;
                if(Inquiry.INQ_TO_DEDUPB &lt;&gt; null) then
                        xInquiry.INQ_TO_DEDUPB := Inquiry.INQ_TO_DEDUPB;
                endif
                xInquiry.DAYS_INQ := Inquiry.DAYS_INQ;
                xInquiry.IS_DUPLICATE_INQ := Inquiry.IS_DUPLICATE_INQ;
                if(Inquiry.IS_DUPLICATE_BANK_INQ &lt;&gt; null) then
                       xInquiry.IS_DUPLICATE_BANK_INQ := Inquiry.IS_DUPLICATE_BANK_INQ;
                endif
                xInquiry.INQ_DEDUP_COUNTER := Inquiry.INQ_DEDUP_COUNTER;
    

                Inquiry.SourceSegment := iInquiry.SourceSegment;
                Inquiry.InquiryDate := iInquiry.InquiryDate;
                Inquiry.AbbreviationAndOrCustomerNumber := iInquiry.AbbreviationAndOrCustomerNumber;
                Inquiry.Type := iInquiry.Type;
                Inquiry.AccountNumber := iInquiry.AccountNumber;
                Inquiry.BureauMarket := iInquiry.BureauMarket;
                Inquiry.BureauSubMarket := iInquiry.BureauSubMarket;
                Inquiry.IndustryCode := iInquiry.IndustryCode;
                Inquiry.SubscriberNumber := iInquiry.SubscriberNumber;
                Inquiry.SubscriberName := iInquiry.SubscriberName;
                Inquiry.LoanType := iInquiry.LoanType;
                Inquiry.LoanAmount := iInquiry.LoanAmount;
                Inquiry.TermsDuration := iInquiry.TermsDuration;
                Inquiry.Y2kInquiryDate := iInquiry.Y2kInquiryDate;
                Inquiry.RequestorName := iInquiry.RequestorName;
                Inquiry.INQ_TO_DEDUP := iInquiry.INQ_TO_DEDUP;
                if(iInquiry.INQ_TO_DEDUPB &lt;&gt; null) then
                        Inquiry.INQ_TO_DEDUPB := iInquiry.INQ_TO_DEDUPB;
                endif
                Inquiry.DAYS_INQ := iInquiry.DAYS_INQ;
                Inquiry.IS_DUPLICATE_INQ := iInquiry.IS_DUPLICATE_INQ;
                if(iInquiry.IS_DUPLICATE_BANK_INQ &lt;&gt; null) then
                       Inquiry.IS_DUPLICATE_BANK_INQ := iInquiry.IS_DUPLICATE_BANK_INQ;
                endif
                Inquiry.INQ_DEDUP_COUNTER := iInquiry.INQ_DEDUP_COUNTER;
    
    

                iInquiry.SourceSegment := xInquiry.SourceSegment;
                iInquiry.InquiryDate := xInquiry.InquiryDate;
                iInquiry.AbbreviationAndOrCustomerNumber := xInquiry.AbbreviationAndOrCustomerNumber;
                iInquiry.Type := xInquiry.Type;
                iInquiry.AccountNumber := xInquiry.AccountNumber;
                iInquiry.BureauMarket := xInquiry.BureauMarket;
                iInquiry.BureauSubMarket := xInquiry.BureauSubMarket;
                iInquiry.IndustryCode := xInquiry.IndustryCode;
                iInquiry.SubscriberNumber := xInquiry.SubscriberNumber;
                iInquiry.SubscriberName := xInquiry.SubscriberName;
                iInquiry.LoanType := xInquiry.LoanType;
                iInquiry.LoanAmount := xInquiry.LoanAmount;
                iInquiry.TermsDuration := xInquiry.TermsDuration;
                iInquiry.Y2kInquiryDate := xInquiry.Y2kInquiryDate;
                iInquiry.RequestorName := xInquiry.RequestorName;
                iInquiry.INQ_TO_DEDUP := xInquiry.INQ_TO_DEDUP;
                if(xInquiry.INQ_TO_DEDUPB &lt;&gt; null) then
                        iInquiry.INQ_TO_DEDUPB := xInquiry.INQ_TO_DEDUPB;
                endif
                iInquiry.DAYS_INQ := xInquiry.DAYS_INQ;
                iInquiry.IS_DUPLICATE_INQ := xInquiry.IS_DUPLICATE_INQ;
                if(xInquiry.IS_DUPLICATE_BANK_INQ &lt;&gt; null) then
                       iInquiry.IS_DUPLICATE_BANK_INQ := xInquiry.IS_DUPLICATE_BANK_INQ;
                endif
                iInquiry.INQ_DEDUP_COUNTER := xInquiry.INQ_DEDUP_COUNTER;
    
    
            endif

endfor 
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_ParseEFXInquiryData" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="string"/>
</Inputs>
<Locals>
<Local InitialValue="null" Name="xProfileDate" Type="timestamp"/>
<Local InitialValue="null" Name="xNormalizedSegmentObject" Type="NORMALIZED_BUREAU_SEGMENTS"/>
<Local InitialValue="null" Name="xBureauAttributes" Type="BUREAU_ATTRIBUTES"/>
</Locals>
<Description>Parse EFX Inquiry data</Description>
<ExpressionText>result := null;

for every Application.CreditApplication.PersonalApplicant relative to CreditApplication do

          //set to null for every applicant
          xBureauAttributes := null;

          //calculate Profile Date timestamp
          xProfileDate := dm_formatDate(iProfileDate);


          //create BureauAttributes Object if not available
          for every Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES relative to PersonalApplicant do
                  xBureauAttributes := BUREAU_ATTRIBUTES;
                  //Attach(BUREAU_ATTRIBUTES, xNormalizedSegmentObject);
          endfor
    
         if(xBureauAttributes = null) then
                  xBureauAttributes := new BUREAU_ATTRIBUTES;
                  ATTACH(PersonalApplicant, xBureauAttributes);
         endif

 
        //dedupe EFX inquiries
        dm_EFXDeDupInquiry(xProfileDate);


    
         //Parse Inquiries
        for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.InquiryList.Inquiry relative to PersonalApplicant do

                       xNormalizedSegmentObject := new NORMALIZED_BUREAU_SEGMENTS;
                       //populate all the Tradeline data
                      dm_PopulateInquiryListData(xNormalizedSegmentObject);
                      //PROFILE_DATE
                     xNormalizedSegmentObject.STAGG_FF_PROFILE_DATE := iProfileDate;
     
                     ATTACH(xBureauAttributes, xNormalizedSegmentObject);
       endfor


endfor




</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_STAGGAttributes" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="0.0" Name="xALE403TotalBalance" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE403TotalAmount" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL202TotalBalance" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL202TotalCount" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL403TotalBalance" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL403TotalAmount" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL524TotalRatingsOf60PM12" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL524TotalCount" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL703TotalMonthsOpen" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL703TotalCount" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC302TotalAmount" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC302TotalCount" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC403TotalBalance" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC403TotalAmount" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN302TotalAmount" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN302TotalCount" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN403TotalBalance" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN403TotalAmount" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN703TotalMonthsOpen" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN703TotalCount" Type="numeric"/>
<Local InitialValue="0.0" Name="xREP302TotalAmount" Type="numeric"/>
<Local InitialValue="0.0" Name="xREP302TotalCount" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV202TotalBalance" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV202TotalCount" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV302TotalAmount" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV302TotalCount" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV403TotalBalance" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV403TotalAmount" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV404TotalBalance" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV404TotalAmount" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV524TotalRatingsOf60PM12" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV524TotalCount" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV703TotalMonthsOpen" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV703TotalCount" Type="numeric"/>
<Local InitialValue="0.0" Name="xRTR403TotalBalance" Type="numeric"/>
<Local InitialValue="0.0" Name="xRTR403TotalAmount" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL201" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL207" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL208" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL301" Type="numeric"/>
</Locals>
<Description>Attributes calculations</Description>
<ExpressionText>result := null;

for every Application.CreditApplication.PersonalApplicant relative to CreditApplication do

     //Initialize Default values
     dm_InitializeBureauAttributes;

     //Generate Attributes
     for every Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES.NORMALIZED_BUREAU_SEGMENTS relative to PersonalApplicant do


          //GBL
          dm_STAGGAttributesGBL(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);


   
          //ALE
          dm_STAGGAttributesALE(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);

          //ALE403
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND 
                                                        NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                xALE403TotalBalance := xALE403TotalBalance + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE;
                xALE403TotalAmount := xALE403TotalAmount + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
          endif



          //ALL
          dm_STAGGAttributesALL(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);


          //ALL201
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                xALL201 := xALL201 + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE;
          endif

          //ALL202
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                xALL202TotalBalance := xALL202TotalBalance + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE;
                xALL202TotalCount := xALL202TotalCount + 1;
          endif
    

          //ALL207
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LEGAL AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_UNSAT) then
                xALL207 := xALL207 + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
          endif

          //ALL208
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                xALL208 := FORMATNUMBER(xALL208 + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHLY_PAYMENT, "0.0000");
          endif

          //ALL301
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                xALL301 := xALL301 + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
          endif

          //ALL403
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND 
                                                        NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                xALL403TotalBalance := xALL403TotalBalance + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE;
                xALL403TotalAmount := xALL403TotalAmount + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
          endif

          //ALL524
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 12) then
                xALL524TotalRatingsOf60PM12 := xALL524TotalRatingsOf60PM12 + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RATINGS_OF_60P_MONTHS12;
                xALL524TotalCount := xALL524TotalCount + 1;
          endif

          //ALL703
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 9998) then
                xALL703TotalMonthsOpen := xALL703TotalMonthsOpen + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN;
                xALL703TotalCount := xALL703TotalCount + 1;
          endif




          //AUT
          dm_STAGGAttributesAUT(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);
 


          //BAC
          dm_STAGGAttributesBAC(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);

          //BAC302
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT
                                                         AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                xBAC302TotalAmount := xBAC302TotalAmount + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
                xBAC302TotalCount := xBAC302TotalCount + 1;
          endif

          //BAC403
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND 
                                                        NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                xBAC403TotalBalance := xBAC403TotalBalance + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE;
                xBAC403TotalAmount := xBAC403TotalAmount + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
          endif




          //BNK
          dm_STAGGAttributesBNK(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);



          //BRR
          dm_STAGGAttributesBRR(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);



          //CAP
          dm_STAGGAttributesCAP(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);



          //CRU
          dm_STAGGAttributesCRU(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);



          //FIL
          dm_STAGGAttributesFIL(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);



          //FIN
          dm_STAGGAttributesFIN(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);



          //HEQ
          dm_STAGGAttributesHEQ(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);



          //ILN
          dm_STAGGAttributesILN(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);

          //ILN302
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT
                                                         AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                xILN302TotalAmount := xILN302TotalAmount + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
                xILN302TotalCount := xILN302TotalCount + 1;
          endif

          //ILN403
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND 
                                                        NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                xILN403TotalBalance := xILN403TotalBalance + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE;
                xILN403TotalAmount := xILN403TotalAmount + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
          endif

          //ILN703
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 9998) then
                xILN703TotalMonthsOpen := xILN703TotalMonthsOpen + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN;
                xILN703TotalCount := xILN703TotalCount + 1;
          endif



          //LFI
          dm_STAGGAttributesLFI(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);



          //REF
          dm_STAGGAttributesREF(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);



          //REP
          dm_STAGGAttributesREP(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);

          //REP302
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT
                                                         AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                xREP302TotalAmount := xREP302TotalAmount + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
                xREP302TotalCount := xREP302TotalCount + 1;
          endif




          //REV
          dm_STAGGAttributesREV(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);

          //REV202
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING
                                                         AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                xREV202TotalBalance := xREV202TotalBalance + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE;
                xREV202TotalCount := xREV202TotalCount + 1;
          endif

          //REV302
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT
                                                         AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                xREV302TotalAmount := xREV302TotalAmount + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
                xREV302TotalCount := xREV302TotalCount + 1;
          endif

          //REV403
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND 
                                                        NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                xREV403TotalBalance := xREV403TotalBalance + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE;
                xREV403TotalAmount := xREV403TotalAmount + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
          endif

          //REV404
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND 
                                                        NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 12) then
                xREV404TotalBalance := xREV404TotalBalance + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE;
                xREV404TotalAmount := xREV404TotalAmount + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
          endif

          //REV524
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 12) then
                xREV524TotalRatingsOf60PM12 := xREV524TotalRatingsOf60PM12 + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RATINGS_OF_60P_MONTHS12;
                xREV524TotalCount := xREV524TotalCount + 1;
          endif

          //REV703
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 9998) then
                xREV703TotalMonthsOpen := xREV703TotalMonthsOpen + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN;
                xREV703TotalCount := xREV703TotalCount + 1;
          endif





          //RTI
          dm_STAGGAttributesRTI(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);



          //RTL
          dm_STAGGAttributesRTL(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);



          //RTR
          dm_STAGGAttributesRTR(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);

          //RTR403
          if(NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND 
                                                        NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                xRTR403TotalBalance := xRTR403TotalBalance + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE;
                xRTR403TotalAmount := xRTR403TotalAmount + NORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
          endif
  
          //IRC
          dm_STAGGAttributesIRC(BUREAU_ATTRIBUTES, NORMALIZED_BUREAU_SEGMENTS);



     endfor
     // End Generate Attributes


     //Assign non-truncated calculated values 
     for every Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES relative to PersonalApplicant do
               //ALL201
               BUREAU_ATTRIBUTES.ALL201 := xALL201;
               //ALL207
               BUREAU_ATTRIBUTES.ALL207 := xALL207;
               //ALL208
               BUREAU_ATTRIBUTES.ALL208 := xALL208;
               //ALL301
               BUREAU_ATTRIBUTES.ALL301 := xALL301;
     endfor





     //Validate Attributes
     for every Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES relative to PersonalApplicant do
 
           //validate Attributes
           dm_ValidateAttributeValues;

     endfor
     //End Validating Attributes






     //Generate Ratio Attributes
     for every Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES relative to PersonalApplicant do
 
           //Generate Ratio Attributes



          //ALE403
          BUREAU_ATTRIBUTES.ALE403 := dm_CalculateRatio(xALE403TotalBalance, xALE403TotalAmount);
          BUREAU_ATTRIBUTES.ALE403 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE403, 0, 99999999);

          //ALE901
          BUREAU_ATTRIBUTES.ALE901 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ALE071, BUREAU_ATTRIBUTES.ALE005);
          BUREAU_ATTRIBUTES.ALE901 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE901, 0, 100);

          //ALE903
          BUREAU_ATTRIBUTES.ALE903 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ALE075, BUREAU_ATTRIBUTES.ALE005);
          BUREAU_ATTRIBUTES.ALE903 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE903, 0, 100);

          //ALE904
          BUREAU_ATTRIBUTES.ALE904 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ALE078, BUREAU_ATTRIBUTES.ALE005);
          BUREAU_ATTRIBUTES.ALE904 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE904, 0, 100);

          //ALE905
          BUREAU_ATTRIBUTES.ALE905 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ALE081, BUREAU_ATTRIBUTES.ALE005);
          BUREAU_ATTRIBUTES.ALE905 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE905, 0, 100);

          //ALE906
          BUREAU_ATTRIBUTES.ALE906 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ALE084, BUREAU_ATTRIBUTES.ALE005);
          BUREAU_ATTRIBUTES.ALE906 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE906, 0, 100);

          //ALE908
          BUREAU_ATTRIBUTES.ALE908 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ALE026, BUREAU_ATTRIBUTES.ALL026);
          BUREAU_ATTRIBUTES.ALE908 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE908, 0, 100);


          //ALL151
          BUREAU_ATTRIBUTES.ALL151 := BUREAU_ATTRIBUTES.ALL092 + BUREAU_ATTRIBUTES.ALL131 + BUREAU_ATTRIBUTES.ALL141;
          BUREAU_ATTRIBUTES.ALL151 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL151, 0, 99);

          //ALL152
          BUREAU_ATTRIBUTES.ALL152 := BUREAU_ATTRIBUTES.ALL134 + BUREAU_ATTRIBUTES.ALL143;
          BUREAU_ATTRIBUTES.ALL152 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL152, 0, 99);

          //ALL153
          BUREAU_ATTRIBUTES.ALL153 := BUREAU_ATTRIBUTES.ALL092 + BUREAU_ATTRIBUTES.ALL152;
          BUREAU_ATTRIBUTES.ALL153 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL153, 0, 99);

          //ALL155
          BUREAU_ATTRIBUTES.ALL155 := BUREAU_ATTRIBUTES.ALL091 + BUREAU_ATTRIBUTES.ALL131 + BUREAU_ATTRIBUTES.ALL141;
          BUREAU_ATTRIBUTES.ALL155 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL155, 0, 99);

           //ALL156
          BUREAU_ATTRIBUTES.ALL156 := BUREAU_ATTRIBUTES.ALL131 + BUREAU_ATTRIBUTES.ALL141;
          BUREAU_ATTRIBUTES.ALL156 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL156, 0, 99);

          //ALL202
          BUREAU_ATTRIBUTES.ALL202 := dm_CalculateAverage(xALL202TotalBalance, xALL202TotalCount);
          BUREAU_ATTRIBUTES.ALL202 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL202, 0, 999999999);

          //ALL403
          BUREAU_ATTRIBUTES.ALL403 := dm_CalculateRatio(xALL403TotalBalance, xALL403TotalAmount);
          BUREAU_ATTRIBUTES.ALL403 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL403, 0, 99999999);

          //ALL524
          BUREAU_ATTRIBUTES.ALL524 := dm_CalculateRatio(xALL524TotalRatingsOf60PM12, xALL524TotalCount);
          BUREAU_ATTRIBUTES.ALL524 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL524, 0, 9999);

          //ALL703
          BUREAU_ATTRIBUTES.ALL703 := dm_CalculateAverage(xALL703TotalMonthsOpen, xALL703TotalCount);
          BUREAU_ATTRIBUTES.ALL703 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL703, 0, 600);

          //ALL901
          BUREAU_ATTRIBUTES.ALL901 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ALL071, BUREAU_ATTRIBUTES.ALL005);
          BUREAU_ATTRIBUTES.ALL901 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL901, 0, 100);

          //ALL903
          BUREAU_ATTRIBUTES.ALL903 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ALL075, BUREAU_ATTRIBUTES.ALL005);
          BUREAU_ATTRIBUTES.ALL903 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL903, 0, 100);

          //ALL904
          BUREAU_ATTRIBUTES.ALL904 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ALL078, BUREAU_ATTRIBUTES.ALL005);
          BUREAU_ATTRIBUTES.ALL904 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL904, 0, 100);

          //ALL905
          BUREAU_ATTRIBUTES.ALL905 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ALL081, BUREAU_ATTRIBUTES.ALL005);
          BUREAU_ATTRIBUTES.ALL905 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL905, 0, 100);

          //ALL906
          BUREAU_ATTRIBUTES.ALL906 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ALL084, BUREAU_ATTRIBUTES.ALL005);
          BUREAU_ATTRIBUTES.ALL906 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL906, 0, 100);

          //ALL907
          BUREAU_ATTRIBUTES.ALL907 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ALL026, BUREAU_ATTRIBUTES.ALL001);
          BUREAU_ATTRIBUTES.ALL907 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL907, 0, 100);


          //BAC302
          BUREAU_ATTRIBUTES.BAC302 := dm_CalculateAverage(xBAC302TotalAmount, xBAC302TotalCount);
          BUREAU_ATTRIBUTES.BAC302 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC302, 0, 999999999);

          //BAC403
          BUREAU_ATTRIBUTES.BAC403 := dm_CalculateRatio(xBAC403TotalBalance, xBAC403TotalAmount);
          BUREAU_ATTRIBUTES.BAC403 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC403, 0, 99999999);

          //BAC901
          BUREAU_ATTRIBUTES.BAC901 := dm_CalculateRatio(BUREAU_ATTRIBUTES.BAC071, BUREAU_ATTRIBUTES.BAC005);
          BUREAU_ATTRIBUTES.BAC901 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC901, 0, 100);

          //BAC903
          BUREAU_ATTRIBUTES.BAC903 := dm_CalculateRatio(BUREAU_ATTRIBUTES.BAC075, BUREAU_ATTRIBUTES.BAC005);
          BUREAU_ATTRIBUTES.BAC903 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC903, 0, 100);

          //BAC904
          BUREAU_ATTRIBUTES.BAC904 := dm_CalculateRatio(BUREAU_ATTRIBUTES.BAC078, BUREAU_ATTRIBUTES.BAC005);
          BUREAU_ATTRIBUTES.BAC904 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC904, 0, 100);

          //BAC905
          BUREAU_ATTRIBUTES.BAC905 := dm_CalculateRatio(BUREAU_ATTRIBUTES.BAC081, BUREAU_ATTRIBUTES.BAC005);
          BUREAU_ATTRIBUTES.BAC905 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC905, 0, 100);

          //BAC906
          BUREAU_ATTRIBUTES.BAC906 := dm_CalculateRatio(BUREAU_ATTRIBUTES.BAC084, BUREAU_ATTRIBUTES.BAC005);
          BUREAU_ATTRIBUTES.BAC906 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC906, 0, 100);

          //BAC908
          BUREAU_ATTRIBUTES.BAC908 := dm_CalculateRatio(BUREAU_ATTRIBUTES.BAC026, BUREAU_ATTRIBUTES.ALL026);
          BUREAU_ATTRIBUTES.BAC908 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC908, 0, 100);


          //ILN302
          BUREAU_ATTRIBUTES.ILN302 := dm_CalculateAverage(xILN302TotalAmount, xILN302TotalCount);
          BUREAU_ATTRIBUTES.ILN302 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN302, 0, 999999999);

          //ILN403
          BUREAU_ATTRIBUTES.ILN403 := dm_CalculateRatio(xILN403TotalBalance, xILN403TotalAmount);
          BUREAU_ATTRIBUTES.ILN403 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN403, 0, 99999999);

          //ILN703
          BUREAU_ATTRIBUTES.ILN703 := dm_CalculateAverage(xILN703TotalMonthsOpen, xILN703TotalCount);
          BUREAU_ATTRIBUTES.ILN703 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN703, 0, 600);

          //ILN901
          BUREAU_ATTRIBUTES.ILN901 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ILN071, BUREAU_ATTRIBUTES.ILN005);
          BUREAU_ATTRIBUTES.ILN901 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN901, 0, 100);

          //ILN903
          BUREAU_ATTRIBUTES.ILN903 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ILN075, BUREAU_ATTRIBUTES.ILN005);
          BUREAU_ATTRIBUTES.ILN903 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN903, 0, 100);

          //ILN904
          BUREAU_ATTRIBUTES.ILN904 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ILN078, BUREAU_ATTRIBUTES.ILN005);
          BUREAU_ATTRIBUTES.ILN904 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN904, 0, 100);

          //ILN905
          BUREAU_ATTRIBUTES.ILN905 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ILN081, BUREAU_ATTRIBUTES.ILN005);
          BUREAU_ATTRIBUTES.ILN905 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN905, 0, 100);

          //ILN906
          BUREAU_ATTRIBUTES.ILN906 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ILN084, BUREAU_ATTRIBUTES.ILN005);
          BUREAU_ATTRIBUTES.ILN906 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN906, 0, 100);

          //ILN908
          BUREAU_ATTRIBUTES.ILN908 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ILN026, BUREAU_ATTRIBUTES.ALL026);
          BUREAU_ATTRIBUTES.ILN908 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN908, 0, 100);

          //ILN914
          BUREAU_ATTRIBUTES.ILN914 := dm_CalculateRatio(BUREAU_ATTRIBUTES.ILN001, BUREAU_ATTRIBUTES.ALL001);
          BUREAU_ATTRIBUTES.ILN914 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN914, 0, 100);


          //REP302
          BUREAU_ATTRIBUTES.REP302 := dm_CalculateAverage(xREP302TotalAmount, xREP302TotalCount);
          BUREAU_ATTRIBUTES.REP302 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP302, 0, 999999999);

          //REP901
          BUREAU_ATTRIBUTES.REP901 := dm_CalculateRatio(BUREAU_ATTRIBUTES.REP071, BUREAU_ATTRIBUTES.REP005);
          BUREAU_ATTRIBUTES.REP901 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP901, 0, 100);

          //REP903
          BUREAU_ATTRIBUTES.REP903 := dm_CalculateRatio(BUREAU_ATTRIBUTES.REP075, BUREAU_ATTRIBUTES.REP005);
          BUREAU_ATTRIBUTES.REP903 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP903, 0, 100);

          //REP904
          BUREAU_ATTRIBUTES.REP904 := dm_CalculateRatio(BUREAU_ATTRIBUTES.REP078, BUREAU_ATTRIBUTES.REP005);
          BUREAU_ATTRIBUTES.REP904 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP904, 0, 100);

          //REP905
          BUREAU_ATTRIBUTES.REP905 := dm_CalculateRatio(BUREAU_ATTRIBUTES.REP081, BUREAU_ATTRIBUTES.REP005);
          BUREAU_ATTRIBUTES.REP905 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP905, 0, 100);

          //REP906
          BUREAU_ATTRIBUTES.REP906 := dm_CalculateRatio(BUREAU_ATTRIBUTES.REP084, BUREAU_ATTRIBUTES.REP005);
          BUREAU_ATTRIBUTES.REP906 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP906, 0, 100);

          //REP908
          BUREAU_ATTRIBUTES.REP908 := dm_CalculateRatio(BUREAU_ATTRIBUTES.REP026, BUREAU_ATTRIBUTES.ALL026);
          BUREAU_ATTRIBUTES.REP908 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP908, 0, 100);



          //REV202
          BUREAU_ATTRIBUTES.REV202 := dm_CalculateAverage(xREV202TotalBalance, xREV202TotalCount);
          BUREAU_ATTRIBUTES.REV202 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV202, 0, 999999999);

          //REV302
          BUREAU_ATTRIBUTES.REV302 := dm_CalculateAverage(xREV302TotalAmount, xREV302TotalCount);
          BUREAU_ATTRIBUTES.REV302 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV302, 0, 999999999);

          //REV403
          BUREAU_ATTRIBUTES.REV403 := dm_CalculateRatio(xREV403TotalBalance, xREV403TotalAmount);
          BUREAU_ATTRIBUTES.REV403 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV403, 0, 99999999);

          //REV404
          BUREAU_ATTRIBUTES.REV404 := dm_CalculateRatio(xREV404TotalBalance, xREV404TotalAmount);
          BUREAU_ATTRIBUTES.REV404 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV404, 0, 99999999);

          //REV524
          BUREAU_ATTRIBUTES.REV524 := dm_CalculateRatio(xREV524TotalRatingsOf60PM12, xREV524TotalCount);
          BUREAU_ATTRIBUTES.REV524 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV524, 0, 1300);

          //REV703
          BUREAU_ATTRIBUTES.REV703 := dm_CalculateAverage(xREV703TotalMonthsOpen, xREV703TotalCount);
          BUREAU_ATTRIBUTES.REV703 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV703, 0, 600);

          //REV901
          BUREAU_ATTRIBUTES.REV901 := dm_CalculateRatio(BUREAU_ATTRIBUTES.REV071, BUREAU_ATTRIBUTES.REV005);
          BUREAU_ATTRIBUTES.REV901 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV901, 0, 100);

          //REV903
          BUREAU_ATTRIBUTES.REV903 := dm_CalculateRatio(BUREAU_ATTRIBUTES.REV075, BUREAU_ATTRIBUTES.REV005);
          BUREAU_ATTRIBUTES.REV903 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV903, 0, 100);

          //REV904
          BUREAU_ATTRIBUTES.REV904 := dm_CalculateRatio(BUREAU_ATTRIBUTES.REV078, BUREAU_ATTRIBUTES.REV005);
          BUREAU_ATTRIBUTES.REV904 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV904, 0, 100);

          //REV905
          BUREAU_ATTRIBUTES.REV905 := dm_CalculateRatio(BUREAU_ATTRIBUTES.REV081, BUREAU_ATTRIBUTES.REV005);
          BUREAU_ATTRIBUTES.REV905 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV905, 0, 100);

          //REV906
          BUREAU_ATTRIBUTES.REV906 := dm_CalculateRatio(BUREAU_ATTRIBUTES.REV084, BUREAU_ATTRIBUTES.REV005);
          BUREAU_ATTRIBUTES.REV906 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV906, 0, 100);

          //REV908
          BUREAU_ATTRIBUTES.REV908 := dm_CalculateRatio(BUREAU_ATTRIBUTES.REV026, BUREAU_ATTRIBUTES.ALL026);
          BUREAU_ATTRIBUTES.REV908 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV908, 0, 100);


          //RTL901
          BUREAU_ATTRIBUTES.RTL901 := dm_CalculateRatio(BUREAU_ATTRIBUTES.RTL071, BUREAU_ATTRIBUTES.RTL005);
          BUREAU_ATTRIBUTES.RTL901 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL901, 0, 100);

          //RTL903
          BUREAU_ATTRIBUTES.RTL903 := dm_CalculateRatio(BUREAU_ATTRIBUTES.RTL075, BUREAU_ATTRIBUTES.RTL005);
          BUREAU_ATTRIBUTES.RTL903 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL903, 0, 100);

          //RTL904
          BUREAU_ATTRIBUTES.RTL904 := dm_CalculateRatio(BUREAU_ATTRIBUTES.RTL078, BUREAU_ATTRIBUTES.RTL005);
          BUREAU_ATTRIBUTES.RTL904 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL904, 0, 100);

          //RTL905
          BUREAU_ATTRIBUTES.RTL905 := dm_CalculateRatio(BUREAU_ATTRIBUTES.RTL081, BUREAU_ATTRIBUTES.RTL005);
          BUREAU_ATTRIBUTES.RTL905 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL905, 0, 100);

          //RTL906
          BUREAU_ATTRIBUTES.RTL906 := dm_CalculateRatio(BUREAU_ATTRIBUTES.RTL084, BUREAU_ATTRIBUTES.RTL005);
          BUREAU_ATTRIBUTES.RTL906 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL906, 0, 100);

          //RTL908
          BUREAU_ATTRIBUTES.RTL908 := dm_CalculateRatio(BUREAU_ATTRIBUTES.RTL026, BUREAU_ATTRIBUTES.ALL026);
          BUREAU_ATTRIBUTES.RTL908 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL908, 0, 100);


          //RTR403
          BUREAU_ATTRIBUTES.RTR403 := dm_CalculateRatio(xRTR403TotalBalance, xRTR403TotalAmount);
          BUREAU_ATTRIBUTES.RTR403 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR403, 0, 99999999);

          //RTR901
          BUREAU_ATTRIBUTES.RTR901 := dm_CalculateRatio(BUREAU_ATTRIBUTES.RTR071, BUREAU_ATTRIBUTES.RTR005);
          BUREAU_ATTRIBUTES.RTR901 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR901, 0, 100);

          //RTR903
          BUREAU_ATTRIBUTES.RTR903 := dm_CalculateRatio(BUREAU_ATTRIBUTES.RTR075, BUREAU_ATTRIBUTES.RTR005);
          BUREAU_ATTRIBUTES.RTR903 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR903, 0, 100);

          //RTR904
          BUREAU_ATTRIBUTES.RTR904 := dm_CalculateRatio(BUREAU_ATTRIBUTES.RTR078, BUREAU_ATTRIBUTES.RTR005);
          BUREAU_ATTRIBUTES.RTR904 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR904, 0, 100);

          //RTR905
          BUREAU_ATTRIBUTES.RTR905 := dm_CalculateRatio(BUREAU_ATTRIBUTES.RTR081, BUREAU_ATTRIBUTES.RTR005);
          BUREAU_ATTRIBUTES.RTR905 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR905, 0, 100);

          //RTR906
          BUREAU_ATTRIBUTES.RTR906 := dm_CalculateRatio(BUREAU_ATTRIBUTES.RTR084, BUREAU_ATTRIBUTES.RTR005);
          BUREAU_ATTRIBUTES.RTR906 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR906, 0, 100);

          //RTR908
          BUREAU_ATTRIBUTES.RTR908 := dm_CalculateRatio(BUREAU_ATTRIBUTES.RTR026, BUREAU_ATTRIBUTES.ALL026);
          BUREAU_ATTRIBUTES.RTR908 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR908, 0, 100);



     endfor
     //End generating Ratio Attributes


endfor
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesIRC" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Calculate the IRC attributes</Description>
<ExpressionText>result := null;
//iBUREAU_ATTRIBUTES.IRC004:=0;
//iBUREAU_ATTRIBUTES.IRC005:=0;


//IRC004
if(iNORMALIZED_BUREAU_SEGMENTS.TELCO AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt;= 90 
                                                                   AND iNORMALIZED_BUREAU_SEGMENTS.MONTHS_STATUS_IRC&lt;=24 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE &gt;= 50) then
               iBUREAU_ATTRIBUTES.IRC004 := iBUREAU_ATTRIBUTES.IRC004 + 1;
endif

//IRC005
if(iNORMALIZED_BUREAU_SEGMENTS.IS_TMOBILE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt;= 90 
                                                                AND iNORMALIZED_BUREAU_SEGMENTS.MONTHS_STATUS_IRC&lt;=24 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE &gt;= 50) then
              iBUREAU_ATTRIBUTES.IRC005 := iBUREAU_ATTRIBUTES.IRC005 + 1;
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_setPSWL_CC" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xCreditClass" Type="string"/>
</Locals>
<Description>Sets the Credit Class to Whitelist Credit Class</Description>
<ExpressionText>for every Application.CreditApplication.WHITE_LIST relative to Application do
	if (WHITE_LIST.CREDIT_CLASS&lt;&gt;null and WHITE_LIST.CREDIT_CLASS&lt;&gt;"") then
			xCreditClass:=WHITE_LIST.CREDIT_CLASS;
	endif
 endfor
 
 if(xCreditClass&lt;&gt;"") then 
	for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to Application do 
		PersonalApplicantOutput.INITIAL_CREDIT_CLASS := xCreditClass;
		PersonalApplicantOutput.FINAL_CREDIT_CLASS := xCreditClass;
endfor
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_GetVariableParameterValue" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iSegment" Type="string"/>
<Input Name="iVariable" Type="string"/>
</Inputs>
<Locals/>
<Description>Get Adverse Action Parameter value for a variable</Description>
<ExpressionText>result := 0;

if(iSegment = "Clean") then

             //Clean segment Parameter Values based on Variable
             if(iVariable = "ALE908") then
                          result := -0.010598;
             else if(iVariable = "ALL021") then
                          result := 0.1252704;
             else if(iVariable = "ALL062") then
                          result := -0.058832;
             else if(iVariable = "ALL804") then
                          result := 0.1722149;
             else if(iVariable = "BAC045") then
                          result := 0.5491862;
             else if(iVariable = "BAC908") then
                          result := -0.011906;
             else if(iVariable = "ILN022") then
                          result := 0.0783878;
             else if(iVariable = "ILN901") then
                          result := -0.006033;
             else if(iVariable = "REP908") then
                          result := -0.022714;
             else if(iVariable = "REV901") then
                          result := -0.010845;
             endif endif endif endif endif endif endif endif endif endif 
else if (iSegment = "Derog") then

             //Derog segment Parameter Values based on Variable
             if(iVariable = "ALE001") then
                          result := -0.052029;
             else if(iVariable = "ALE801") then
                          result := -0.11273;
             else if(iVariable = "ALE908") then
                          result := -0.003903;
             else if(iVariable = "ALL022") then
                          result := 0.0688578;
             else if(iVariable = "ALL052") then
                          result := 0.2697169;
             else if(iVariable = "ALL084") then
                          result := 0.0250423;
             else if(iVariable = "ALL146") then
                          result := -0.256476;
             else if(iVariable = "ALL301") then
                          result := -0.00000361;
             else if(iVariable = "ALL701") then
                          result := -0.002372;
             else if(iVariable = "ALL702") then
                          result := -0.002278;
             else if(iVariable = "ALL740") then
                          result := -0.014457;
             else if(iVariable = "ALL804") then
                          result := 0.1012543;
             else if(iVariable = "BAC078") then
                          result := -0.113965;
             else if(iVariable = "BAC801") then
                          result := 0.0350093;
             else if(iVariable = "BAC901") then
                          result := -0.001938;
             else if(iVariable = "BAC908") then
                          result := -0.005679;
             else if(iVariable = "CAP801") then
                          result := -0.106779;
             else if(iVariable = "FIN801") then
                          result := 0.0618298;
             else if(iVariable = "ILN102") then
                          result := -0.062217;
             else if(iVariable = "ILN116") then
                          result := -0.135327;
             else if(iVariable = "ILN804") then
                          result := -0.092353;
             else if(iVariable = "REP081") then
                          result := -0.104738;
             else if(iVariable = "REV044") then
                          result := 0.061238;
             else if(iVariable = "RTL901") then
                          result := -0.001973;
             else if(iVariable = "RTR078") then
                          result := -0.084938;
             else if(iVariable = "RTR401") then
                          result := -0.000087;
             else if(iVariable = "BAC503d0") then
                          result := 0.0674267;
             else if(iVariable = "BAC503d1") then
                          result := -0.293883;
             else if(iVariable = "ILN503d0") then
                          result := 0.1998753;
             else if(iVariable = "ILN503d1") then
                          result := -0.150614;
             else if(iVariable = "ILN503d3") then
                          result := -0.102037;
             else if(iVariable = "REP501d0") then
                          result := 0.1681424;
             else if(iVariable = "REP601d0") then
                          result := -0.233072;
             else if(iVariable = "REV501d0") then
                          result := 0.080209;
             else if(iVariable = "REV501d3") then
                          result := -0.252998;
             else if(iVariable = "REv601d1") then
                          result := -0.152181;
             endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif 
             endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif 
endif
endif

</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_SetECOAReasonCodesBCC" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="0.0" Name="xBusinessAge" Type="numeric"/>
<Local InitialValue="false" Name="xNegFileFlag" Type="boolean"/>
<Local InitialValue="&quot;&quot;" Name="xBusinessBureauAvailable" Type="string"/>
<Local InitialValue="false" Name="xOFACFlag" Type="boolean"/>
<Local InitialValue="null" Name="xECOAReason" Type="ECOA_REASON"/>
<Local InitialValue="null" Name="xECOAReasonList" Type="ECOA_REASON_LIST"/>
<Local InitialValue="0.0" Name="xActiveTradesCount" Type="numeric"/>
<Local InitialValue="0.0" Name="xRecentTradesCount" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xBKLast7Years" Type="string"/>
<Local InitialValue="0.0" Name="xChargeOffCount" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xFinalCreditClass" Type="string"/>
<Local InitialValue="false" Name="xLettersCreditClass" Type="boolean"/>
<Local InitialValue="false" Name="xGamingVelocity" Type="boolean"/>
<Local InitialValue="0.0" Name="xJudgmentAndLienCount" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xMarketSize" Type="string"/>
<Local InitialValue="0.0" Name="xBusinessScore" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xBureauName" Type="string"/>
</Locals>
<Description>Populate ECOA Reason List with the appropriate flags fro BCC flow </Description>
<ExpressionText>result:=0;

xECOAReasonList:= new ECOA_REASON_LIST;

//Market Size
xMarketSize := dm_get_MarketSize;

	//Gaming Counter
	for every Application.CreditApplication.CreditApplicationOutput relative to CreditApplication do
			if(CreditApplicationOutput.GamingVelocity &lt;&gt; null ) then
					 xGamingVelocity := CreditApplicationOutput.GamingVelocity;
			endif
	endfor

//ECOA Neg File Flag
for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to CreditApplication do

		//ECOA OFAC Flags
        if(BusinessApplicant.OFACFlag&lt;&gt;null and BusinessApplicant.OFACFlag&lt;&gt;"" and BusinessApplicant.OFACFlag="Y")then
             xOFACFlag:=true;
        endif
		
        if(BusinessApplicantOutput.NegAvailable &lt;&gt; null AND BusinessApplicantOutput.NegAvailable &lt;&gt; "" AND BusinessApplicantOutput.NegAvailable = "Y") then
                xNegFileFlag := true;
        endif

        //Age in years
		if (BusinessApplicantOutput.BusAgeInYears &lt;&gt; null) then
			xBusinessAge := BusinessApplicantOutput.BusAgeInYears;  
		endif
  
        //Active Trades Count 
		if (BusinessApplicantOutput.BusActiveTradesNum &lt;&gt; null) then
			xActiveTradesCount := BusinessApplicantOutput.BusActiveTradesNum;
		endif
		
        //Recent Trade Count
		if (BusinessApplicantOutput.BusNumRecentTrades &lt;&gt; null) then
			xRecentTradesCount := BusinessApplicantOutput.BusNumRecentTrades;
		endif
  
        //Bankruptcy in last 7 years
		if (BusinessApplicantOutput.BusIsBkInLast7Yrs &lt;&gt; null) then
			xBKLast7Years := BusinessApplicantOutput.BusIsBkInLast7Yrs;
		endif
    
        //Total Chargeoff Count
		if (BusinessApplicantOutput.BusChargeOffNum &lt;&gt; null) then
			xChargeOffCount := BusinessApplicantOutput.BusChargeOffNum;
		endif
   
        //Judgement and Lien Count
		if (BusinessApplicantOutput.BusJudgementLienNum &lt;&gt; null) then
			xJudgmentAndLienCount := BusinessApplicantOutput.BusJudgementLienNum;
		endif
    
        //Business Bureau Report available
        xBusinessBureauAvailable := dm_isBusBureauPresent;
		
		if(BusinessApplicantOutput.businessBureauName &lt;&gt; null) then
			xBureauName := BusinessApplicantOutput.businessBureauName;
		endif
		
		if(BusinessApplicantOutput.BusRiskScore &lt;&gt; null) then
			xBusinessScore := BusinessApplicantOutput.BusRiskScore;
		endif
		
		if(BusinessApplicantOutput.FINAL_CREDIT_CLASS &lt;&gt; null) then
			xFinalCreditClass := BusinessApplicantOutput.FINAL_CREDIT_CLASS;
		endif
		
  
endfor

xLettersCreditClass := InStringList(xFinalCreditClass, "0, 5, 7, 6", ",");

//Attached ECOA Reasons to ECOA Reson List
if(xOFACFlag)then
        xECOAReason:= new ECOA_REASON;
        xECOAReason.ECOA_PRINTABLE:="Y";
        xECOAReason.ECOA_RANK:="1100";
        xECOAReason.ECOA_REASON_CODE:="1100";
        Attach(xECOAReasonList,xECOAReason);
endif
if(xNegFileFlag)then
        xECOAReason:= new ECOA_REASON;
        xECOAReason.ECOA_PRINTABLE:="Y";
        xECOAReason.ECOA_RANK:="1300";
        xECOAReason.ECOA_REASON_CODE:="1300";
        Attach(xECOAReasonList,xECOAReason);
endif
if(xGamingVelocity)then
        xECOAReason:= new ECOA_REASON;
        xECOAReason.ECOA_PRINTABLE:="Y";
        xECOAReason.ECOA_RANK:="1350";
        xECOAReason.ECOA_REASON_CODE:="1350";
        Attach(xECOAReasonList,xECOAReason);
endif
if(xBusinessAge &lt; 3)then
        xECOAReason:= new ECOA_REASON;
        xECOAReason.ECOA_PRINTABLE:="Y";
        xECOAReason.ECOA_RANK:="1400";
        xECOAReason.ECOA_REASON_CODE:="1400";
        Attach(xECOAReasonList,xECOAReason);
endif

if(xBusinessBureauAvailable = "YES" AND (xActiveTradesCount &lt; 3  OR xRecentTradesCount &lt; 3)) then
        xECOAReason:= new ECOA_REASON;
        xECOAReason.ECOA_PRINTABLE:="Y";
        xECOAReason.ECOA_RANK:="1600";
        xECOAReason.ECOA_REASON_CODE:="1600";
        Attach(xECOAReasonList,xECOAReason);
endif
if(xBKLast7Years = "Y" AND  xLettersCreditClass = true)then
        xECOAReason:= new ECOA_REASON;
        xECOAReason.ECOA_PRINTABLE:="Y";
        xECOAReason.ECOA_RANK:="1710";
        xECOAReason.ECOA_REASON_CODE:="1710";
        Attach(xECOAReasonList,xECOAReason);
endif
if((xChargeOffCount &gt; 0 OR xJudgmentAndLienCount &gt; 0)  AND xLettersCreditClass = true)then
        xECOAReason:= new ECOA_REASON;
        xECOAReason.ECOA_PRINTABLE:="Y";
        xECOAReason.ECOA_RANK:="1720";
        xECOAReason.ECOA_REASON_CODE:="1720";
        Attach(xECOAReasonList,xECOAReason);
endif
if(xMarketSize = "SMALL" AND
                                                                 ((xBureauName = "XPB" AND xBusinessScore &lt; 9520) OR
                                                                           (xBureauName = " EFX" AND xBusinessScore &lt; 517)) )then
         //TODO
        xECOAReason:= new ECOA_REASON;
        xECOAReason.ECOA_PRINTABLE:="Y";
        xECOAReason.ECOA_RANK:="1900";
        xECOAReason.ECOA_REASON_CODE:="1900";
        Attach(xECOAReasonList,xECOAReason);
endif


//Attach ECOA Reason List to Credit Class
Attach(CreditApplication,xECOAReasonList);

</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_TUDeDupInquiry" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
</Inputs>
<Locals>
<Local InitialValue="9999" Name="xPrevDaysInq" Type="numeric"/>
<Local InitialValue="-1" Name="xPrevInqToDedup" Type="numeric"/>
<Local InitialValue="0.0" Name="xNewInqToDedup" Type="numeric"/>
</Locals>
<Description>DeDup TU Inquiry</Description>
<ExpressionText>result := null;


//Delete Duplicates
for every Application.CreditApplication.PersonalApplicant relative to CreditApplication do

            //sort the inquiries on specified conditions. 
            for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.InquiryList.Inquiry relative to PersonalApplicant do 
                              dm_SortTUInquiry(iProfileDate, Inquiry);
            endfor
  
            //execute DEDUP logic 
            for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.InquiryList.Inquiry relative to PersonalApplicant do 
                              xNewInqToDedup := Inquiry.INQ_TO_DEDUP;
         
                              //if first record
                              if(xPrevInqToDedup &lt; 0) then
                                           xPrevInqToDedup := xNewInqToDedup;
                              endif
         
                             //if values are not equals initialize to default
                             if(xPrevInqToDedup &lt;&gt; xNewInqToDedup) then
                                          xPrevDaysInq := 9999;
                                          xPrevInqToDedup := xNewInqToDedup;
                            endif
       
       
                           if(xNewInqToDedup &gt; 0) then
                                         if(dm_AbsoluteDifferenceValue(xPrevDaysInq, Inquiry.DAYS_INQ)  &lt; 14) then
                                                       Inquiry.IS_DUPLICATE_INQ := true;
                                         else
                                                       xPrevDaysInq := Inquiry.DAYS_INQ;
                                         endif
                           endif
            endfor
endfor

</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesLFI" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>calculates LFI Attributes</Description>
<ExpressionText>          result := null;

          //LFI801
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LFI_INQ) then
                iBUREAU_ATTRIBUTES.LFI801 := iBUREAU_ATTRIBUTES.LFI801 + 1;
          endif 
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_AssignChampionChallenger" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xNeustarStrategy" Type="string"/>
</Locals>
<Description>Assign Champion Challenger Strategies</Description>
<ExpressionText>result:="N";
//Puerto Rico Strategy
if(isPuertoRico &lt;&gt; null AND  isPuertoRico = "Y") then
	if(Application.StrategySelectionRandomNumber &lt; 50000000) then
		result:="Y";
		CreditApplication.PuertoRicoStrategy := "CHALLENGER_1";
	else
		CreditApplication.PuertoRicoStrategy := "CHAMPION_1";
	endif
endif

//Neustar Strategy
xNeustarStrategy := "N";

// 10% of 99999999 use Challenger strategies
if(Application.StrategySelectionRandomNumber &lt;&gt; null AND 
                                  Application.StrategySelectionRandomNumber &lt; 10000000) then
             
                //use Challenger
                xNeustarStrategy := "Y";
endif


if(xNeustarStrategy = "Y") then
        CreditApplication.NeustarStrategy := "CHALLENGER_1";
else
        CreditApplication.NeustarStrategy := "CHAMPION_1";
endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_set_isDecisionNegFile" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xLowestCC" Type="string"/>
<Local InitialValue="0.0" Name="xTemp" Type="numeric"/>
</Locals>
<Description>Sets decision neg file</Description>
<ExpressionText>result:="";

for every Application.CreditApplication.PersonalApplicant.NegFileDetails relative to PersonalApplicant do

           if(NegFileDetails.RESULTING_CREDIT_CLASS &lt;&gt; null AND 
                                                          ((NegFileDetails.ActivityType &lt;&gt; null AND NegFileDetails.ActivityType &lt;&gt; "WOR") AND 
                                                                                                        (NegFileDetails.ARBalance &lt;&gt; null AND NegFileDetails.ARBalance &gt; 0 ) ) )then
                      //derive lowest credit class,higher the numeric value lower the credit class
                      if(NegFileDetails.RESULTING_CREDIT_CLASS = "A")then
                                 xTemp:=Max(xTemp,1);
                      
                      else if(NegFileDetails.RESULTING_CREDIT_CLASS = "B")then
                                 xTemp:=Max(xTemp,2);
                      
                      else if(NegFileDetails.RESULTING_CREDIT_CLASS = "C")then
                                 xTemp:=Max(xTemp,3);
                      
                      else if(NegFileDetails.RESULTING_CREDIT_CLASS = "L")then
                                 xTemp:=Max(xTemp,4);
                      
                      else if(NegFileDetails.RESULTING_CREDIT_CLASS = "D")then
                                 xTemp:=Max(xTemp,5);
                      
                      else if(NegFileDetails.RESULTING_CREDIT_CLASS = "H")then
                                 xTemp:=Max(xTemp,6);
                      
                      else if(NegFileDetails.RESULTING_CREDIT_CLASS = "I")then
                                 xTemp:=Max(xTemp,7);
                      
                      else if(NegFileDetails.RESULTING_CREDIT_CLASS = "Y")then
                                 xTemp:=Max(xTemp,8);

                      endif endif endif endif endif endif endif endif
           endif

endfor

if(xTemp = 1)then
           xLowestCC:="A";
 
 else if(xTemp = 2)then
           xLowestCC:="B";
 
 else if(xTemp = 3)then
           xLowestCC:="C";
 
 else if(xTemp = 4)then
           xLowestCC:="L";
 
 else if(xTemp = 5)then
           xLowestCC:="D";
 
 else if(xTemp = 6)then
           xLowestCC:="H";
 
 else if(xTemp = 7)then
           xLowestCC:="I";
 
 else if(xTemp = 8)then
           xLowestCC:="Y";
 endif  endif endif endif endif endif endif endif

 
for every Application.CreditApplication.PersonalApplicant.NegFileDetails relative to PersonalApplicant do
           if(NegFileDetails.RESULTING_CREDIT_CLASS &lt;&gt; null and NegFileDetails.RESULTING_CREDIT_CLASS = xLowestCC) then
                       if((NegFileDetails.ActivityType &lt;&gt; null AND NegFileDetails.ActivityType &lt;&gt; "WOR") AND 
                                                                                                        (NegFileDetails.ARBalance &lt;&gt; null AND NegFileDetails.ARBalance &gt; 0 ) ) then
																										
                                            NegFileDetails.isDecisionNegFile:=true;
                      endif
           endif
endfor

for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
           PersonalApplicantOutput.RESULT_NEG_CREDIT_CLASS:=xLowestCC
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_AssignKBAReason" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iReason" Type="string"/>
</Inputs>
<Locals/>
<Description>Assigns the KBA reason</Description>
<ExpressionText>result := null;

if(iReason &lt;&gt; null) then
          result := iReason;

          for every Application.CreditApplication relative to Application do 
                    CreditApplication.KBAReasonCode := iReason;
          endfor
		  
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsEFXBureau" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="string"/>
</Inputs>
<Locals>
<Local InitialValue="null" Name="xProfileDate" Type="timestamp"/>
</Locals>
<Description>Generate filters for EFX bureau</Description>
<ExpressionText>result := null;

//set the Profile Date timestamp object
if(iProfileDate &lt;&gt; null) then
            xProfileDate := dm_GetParsedDateYYYYMM(iProfileDate);
endif

//calculate filters
for every Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES.NORMALIZED_BUREAU_SEGMENTS relative to PersonalApplicant do
  
    //Global Filters
    dm_STAGGFiltersAndFunctionsEFXProfileGlobal(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);
 
    //Tradeline Filters
    dm_STAGGFiltersAndFunctionsEFXTradeline(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);


    //Accuont Status Filters
    dm_STAGGFiltersAndFunctionsEFXAccountStatus(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);
  
 
     //Amount Filters
    dm_STAGGFiltersAndFunctionsEFXAmount(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);
 
  
     //Accuont Type Filters
    dm_STAGGFiltersAndFunctionsEFXAccountType(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);
 
 
     //Group Functions Filters
    dm_STAGGFiltersAndFunctionsEFXGroupFilters(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);  
 


    //Dates Filters
    dm_STAGGFiltersAndFunctionsEFXDates(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);  

 
     //MonthsAgo Filters
    dm_STAGGFiltersAndFunctionsEFXMonthsAgo(xProfileDate, NORMALIZED_BUREAU_SEGMENTS); 
 
 
    //Functions Filters
    dm_STAGGFiltersAndFunctionsEFXFunctions(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);  
 
  
 
    //Grid Filters
    dm_STAGGFiltersAndFunctionsEFXGridFilters(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);  
  


    //Public Record Filters
    dm_STAGGFiltersAndFunctionsEFXPublicRecord(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);  
  

    //Inquiry Filters
    dm_STAGGFiltersAndFunctionsEFXInquiry(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);  
  
    //IRC
    dm_STAGGFiltersAndFunctionsEFXIRC(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);

endfor 
//End 


</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_GetBlankSpaces" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iCount" Type="numeric"/>
</Inputs>
<Locals/>
<Description>Returns a string of blank spaces on count</Description>
<ExpressionText>//Append a large STRING to be able to return a blank characters. 
result  :=   "                                                                                                                                                                                                                                                                                                                                                                        ";

if(iCount &gt; 0) then
                    result := LEFT(result, iCount);
else
                    result := "";
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesBRR" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>calculates BRR Attributes</Description>
<ExpressionText>          result := null;

          //BRR026
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BRR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.BRR026 := iBUREAU_ATTRIBUTES.BRR026 + 1;
          endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesREV" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xMaximum" Type="numeric"/>
</Locals>
<Description>calculates REV Attributes</Description>
<ExpressionText>          result := null;

          //REV001
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.REV001 := iBUREAU_ATTRIBUTES.REV001 + 1;
          endif

          //REV002
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.REV002 := iBUREAU_ATTRIBUTES.REV002 + 1;
          endif

          //REV005
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.REV005 := iBUREAU_ATTRIBUTES.REV005 + 1;
          endif

          //REV006
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.REV006 := iBUREAU_ATTRIBUTES.REV006 + 1;
          endif

          //REV007
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN) then
                iBUREAU_ATTRIBUTES.REV007 := iBUREAU_ATTRIBUTES.REV007 + 1;
          endif

          //REV022
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 12) then
                iBUREAU_ATTRIBUTES.REV022 := iBUREAU_ATTRIBUTES.REV022 + 1;
          endif

          //REV023
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 24) then
                iBUREAU_ATTRIBUTES.REV023 := iBUREAU_ATTRIBUTES.REV023 + 1;
          endif

          //REV024
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 12) then
                iBUREAU_ATTRIBUTES.REV024 := iBUREAU_ATTRIBUTES.REV024 + 1;
          endif

          //REV026
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.REV026 := iBUREAU_ATTRIBUTES.REV026 + 1;
          endif

          //REV028
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &gt;= 6) then
                iBUREAU_ATTRIBUTES.REV028 := iBUREAU_ATTRIBUTES.REV028 + 1;
          endif

          //REV038
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT &gt;= 1000 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN) then
                iBUREAU_ATTRIBUTES.REV038 := iBUREAU_ATTRIBUTES.REV038 + 1;
          endif

          //REV044
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BTL &gt;= 90
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.REV044 := iBUREAU_ATTRIBUTES.REV044 + 1;
          endif

          //REV064
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt;= 30
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.REV064 := iBUREAU_ATTRIBUTES.REV064 + 1;
          endif

          //REV067
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt;= 90
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.REV067 := iBUREAU_ATTRIBUTES.REV067 + 1;
          endif

          //REV071
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) = 1) then
                iBUREAU_ATTRIBUTES.REV071 := iBUREAU_ATTRIBUTES.REV071 + 1;
          endif
       
          //REV074
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 34) then
                iBUREAU_ATTRIBUTES.REV074 := iBUREAU_ATTRIBUTES.REV074 + 1;
          endif

          //REV075
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30) then
                iBUREAU_ATTRIBUTES.REV075 := iBUREAU_ATTRIBUTES.REV075 + 1;
          endif

          //REV076
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 60) then
                iBUREAU_ATTRIBUTES.REV076 := iBUREAU_ATTRIBUTES.REV076 + 1;
          endif

          //REV077
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) = 60) then
                iBUREAU_ATTRIBUTES.REV077 := iBUREAU_ATTRIBUTES.REV077 + 1;
          endif

          //REV078
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 60) then
                iBUREAU_ATTRIBUTES.REV078 := iBUREAU_ATTRIBUTES.REV078 + 1;
          endif

          //REV080
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 90 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 180) then
                iBUREAU_ATTRIBUTES.REV080 := iBUREAU_ATTRIBUTES.REV080 + 1;
          endif

          //REV081
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 90) then
                iBUREAU_ATTRIBUTES.REV081 := iBUREAU_ATTRIBUTES.REV081 + 1;
          endif

          //REV084
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER = 400) then
                iBUREAU_ATTRIBUTES.REV084 := iBUREAU_ATTRIBUTES.REV084 + 1;
          endif

          //REV085
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 = 400) then
                iBUREAU_ATTRIBUTES.REV085 := iBUREAU_ATTRIBUTES.REV085 + 1;
          endif

          //REV086
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 = 400) then
                iBUREAU_ATTRIBUTES.REV086 := iBUREAU_ATTRIBUTES.REV086 + 1;
          endif

          //REV101
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 = 1) then
                iBUREAU_ATTRIBUTES.REV101 := iBUREAU_ATTRIBUTES.REV101 + 1;
          endif

          //REV102
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 = 1) then
                iBUREAU_ATTRIBUTES.REV102 := iBUREAU_ATTRIBUTES.REV102 + 1;
          endif

          //REV103
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &lt;= 34) then
                iBUREAU_ATTRIBUTES.REV103 := iBUREAU_ATTRIBUTES.REV103 + 1;
          endif

          //REV104
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 30) then
                iBUREAU_ATTRIBUTES.REV104 := iBUREAU_ATTRIBUTES.REV104 + 1;
          endif

          //REV105
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &lt;= 34) then
                iBUREAU_ATTRIBUTES.REV105 := iBUREAU_ATTRIBUTES.REV105 + 1;
          endif

          //REV106
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &gt;= 30) then
                iBUREAU_ATTRIBUTES.REV106 := iBUREAU_ATTRIBUTES.REV106 + 1;
          endif

          //REV107
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &lt;= 60) then
                iBUREAU_ATTRIBUTES.REV107 := iBUREAU_ATTRIBUTES.REV107 + 1;
          endif

          //REV108
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &lt;= 60) then
                iBUREAU_ATTRIBUTES.REV108 := iBUREAU_ATTRIBUTES.REV108 + 1;
          endif

          //REV109
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &lt;= 60) then
                iBUREAU_ATTRIBUTES.REV109 := iBUREAU_ATTRIBUTES.REV109 + 1;
          endif

          //REV110
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 = 60) then
                iBUREAU_ATTRIBUTES.REV110 := iBUREAU_ATTRIBUTES.REV110 + 1;
          endif

          //REV111
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 = 60) then
                iBUREAU_ATTRIBUTES.REV111 := iBUREAU_ATTRIBUTES.REV111 + 1;
          endif

          //REV112
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 = 90) then
                iBUREAU_ATTRIBUTES.REV112 := iBUREAU_ATTRIBUTES.REV112 + 1;
          endif

          //REV113
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 90 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &lt;= 180) then
                iBUREAU_ATTRIBUTES.REV113 := iBUREAU_ATTRIBUTES.REV113 + 1;
          endif

          //REV114
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 90) then
                iBUREAU_ATTRIBUTES.REV114 := iBUREAU_ATTRIBUTES.REV114 + 1;
          endif

          //REV115
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &gt;= 90) then
                iBUREAU_ATTRIBUTES.REV115 := iBUREAU_ATTRIBUTES.REV115 + 1;
          endif

          //REV116
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &gt;= 90 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &lt;= 180) then
                iBUREAU_ATTRIBUTES.REV116 := iBUREAU_ATTRIBUTES.REV116 + 1;
          endif

          //REV117
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &lt;= 34) then
                iBUREAU_ATTRIBUTES.REV117 := iBUREAU_ATTRIBUTES.REV117 + 1;
          endif

          //REV118
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 120) then
                iBUREAU_ATTRIBUTES.REV118 := iBUREAU_ATTRIBUTES.REV118 + 1;
          endif

          //REV119
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 = 60) then
                iBUREAU_ATTRIBUTES.REV119 := iBUREAU_ATTRIBUTES.REV119 + 1;
          endif

          //REV122
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &gt;= 90 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &lt;= 180) then
                iBUREAU_ATTRIBUTES.REV122 := iBUREAU_ATTRIBUTES.REV122 + 1;
          endif

          //REV124
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 60) then
                iBUREAU_ATTRIBUTES.REV124 := iBUREAU_ATTRIBUTES.REV124 + 1;
          endif

          //REV125
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &gt;= 60) then
                iBUREAU_ATTRIBUTES.REV125 := iBUREAU_ATTRIBUTES.REV125 + 1;
          endif

          //REV126
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 = 1) then
                iBUREAU_ATTRIBUTES.REV126 := iBUREAU_ATTRIBUTES.REV126 + 1;
          endif

          //REV127
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &gt;= 30) then
                iBUREAU_ATTRIBUTES.REV127 := iBUREAU_ATTRIBUTES.REV127 + 1;
          endif

          //REV128
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &gt;= 60) then
                iBUREAU_ATTRIBUTES.REV128 := iBUREAU_ATTRIBUTES.REV128 + 1;
          endif

          //REV129
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &gt;= 90) then
                iBUREAU_ATTRIBUTES.REV129 := iBUREAU_ATTRIBUTES.REV129 + 1;
          endif

          //REV130
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 = 400) then
                iBUREAU_ATTRIBUTES.REV130 := iBUREAU_ATTRIBUTES.REV130 + 1;
          endif

          //REV201
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.REV201 := iBUREAU_ATTRIBUTES.REV201 + iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE;
          endif

          //REV301
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT 
                                                        AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.REV301 := iBUREAU_ATTRIBUTES.REV301 + iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
          endif

          //REV401
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT 
                                                        AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.REV401 := iBUREAU_ATTRIBUTES.REV401 + iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AVAILABLE_CREDIT;
          endif

          //REV501
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                xMaximum := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD);
                iBUREAU_ATTRIBUTES.REV501 := MAX(iBUREAU_ATTRIBUTES.REV501, xMaximum);
          endif

          //REV502
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.REV502 := MAX(iBUREAU_ATTRIBUTES.REV502, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12);
          endif

          //REV503
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.REV503 := MAX(iBUREAU_ATTRIBUTES.REV503, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24);
          endif

          //REV504
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 36) then
                xMaximum := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD);
                iBUREAU_ATTRIBUTES.REV504 := MAX(iBUREAU_ATTRIBUTES.REV504, xMaximum);
          endif

          //REV601
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN) then
                iBUREAU_ATTRIBUTES.REV601 := MAX(iBUREAU_ATTRIBUTES.REV601, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS);
          endif

          //REV701
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 9998) then
                iBUREAU_ATTRIBUTES.REV701 := MAX(iBUREAU_ATTRIBUTES.REV701, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN);
          endif

          //REV702
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 9998) then
                iBUREAU_ATTRIBUTES.REV702 := MIN(iBUREAU_ATTRIBUTES.REV702, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN);
          endif

          //REV720
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL &lt;= 9998) then
                iBUREAU_ATTRIBUTES.REV720 := MIN(iBUREAU_ATTRIBUTES.REV720, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL);
          endif

          //REV724
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36 &lt;= 9998) then
                iBUREAU_ATTRIBUTES.REV724 := MIN(iBUREAU_ATTRIBUTES.REV724, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36);
          endif

          //REV740
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P &lt;= 9998) then
                iBUREAU_ATTRIBUTES.REV740 := MIN(iBUREAU_ATTRIBUTES.REV740, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P);
          endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_AssignInProcessNegFileDetailsComplete" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Assigns In Process NegFileDetails to completed state </Description>
<ExpressionText>result := null;

//find and set completed value for only inprocess optimized offer
for every Application.CreditApplication.PersonalApplicant.NegFileDetails  in dor_InProcessNegFile  do
NegFileDetails.InProcess := 2;
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsTUProfileGlobal" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Generate filters for TU Profile Global</Description>
<ExpressionText>    result := null;
  
    //DESEASED
    if(iNORMALIZED_BUREAU_SEGMENTS.SEGMENT_TYPE = "TR" AND (iNORMALIZED_BUREAU_SEGMENTS.ECOA = "X" OR iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE = "DEC")) then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_DECEASED := 1;
    else  if((iNORMALIZED_BUREAU_SEGMENTS.SEGMENT_TYPE = "CL" OR iNORMALIZED_BUREAU_SEGMENTS.SEGMENT_TYPE = "CL11") AND (iNORMALIZED_BUREAU_SEGMENTS.ECOA = "X")) then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_DECEASED := 1;
    else  if((iNORMALIZED_BUREAU_SEGMENTS.SEGMENT_TYPE = "PR" OR iNORMALIZED_BUREAU_SEGMENTS.SEGMENT_TYPE = "PR11") AND (iNORMALIZED_BUREAU_SEGMENTS.ECOA = "X" OR iNORMALIZED_BUREAU_SEGMENTS.RECORD_TYPE = "DZ")) then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_DECEASED := 1;
    else
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_DECEASED := 0;
    endif endif endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_SelectScoreModel" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xApplicationType" Type="string"/>
</Locals>
<Description>Selects the proper Score Model for Decision</Description>
<ExpressionText>result:="0";
if(CreditApplication.type&lt;&gt;null and CreditApplication.type&lt;&gt;"")then
	xApplicationType:=CreditApplication.Type;
endif

for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to CreditApplication do
	if(InStringList(PersonalApplicantOutput.FINAL_CREDIT_CLASS,"C,D,H,I,L,Y,S",",") and xApplicationType="Consumer" or (CreditApplication.REVIEW_CREDIT_CLASS &lt;&gt; null and CreditApplication.REVIEW_CREDIT_CLASS = "S")) then
		CreditApplication.TEMPLATE_CODE:="CCC001";
	endif
endfor
For every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to CreditApplication do
	if(InStringList(BusinessApplicantOutput.FINAL_CREDIT_CLASS,"0,5,6,7",",") and  xApplicationType="Business" or (CreditApplication.REVIEW_CREDIT_CLASS &lt;&gt; null AND CreditApplication.REVIEW_CREDIT_CLASS = "S")) then
		CreditApplication.TEMPLATE_CODE:="BCC001";
	endif
endfor

If(PuertoRicoStrategy=null or PuertoRicoStrategy="CHALLENGER_1") then
	for every Application.CreditApplication.PersonalApplicant.SCORES relative to CreditApplication do
		If(SCORES.PCR6&gt;0) then
			for every Application.CreditApplication.PersonalApplicant.SCORES.SCORE_MODEL in dor_PCRv6ScoreModel do
				SCORE_MODEL.IS_SCORE_MODEL_DECISION:=true;
			endfor
		else If(SCORES.PCR4&gt;0) then
			for every Application.CreditApplication.PersonalApplicant.SCORES.SCORE_MODEL in dor_PCRv4ScoreModel do
				SCORE_MODEL.IS_SCORE_MODEL_DECISION:=true;
			endfor
		else If(SCORES.LNScore&lt;&gt;null) then
			for every Application.CreditApplication.PersonalApplicant.SCORES.SCORE_MODEL in dor_LNScoreModel do
				SCORE_MODEL.IS_SCORE_MODEL_DECISION:=true;
			endfor
		else
			for every Application.CreditApplication.PersonalApplicant.SCORES.SCORE_MODEL in dor_PCRv4ScoreModel do
				SCORE_MODEL.IS_SCORE_MODEL_DECISION:=true;
			endfor
		endif
		endif
		endif
	endfor
else if (PuertoRicoStrategy="CHAMPION_1")then
	for every Application.CreditApplication.PersonalApplicant.SCORES.SCORE_MODEL in dor_NA3ScoreModel do
		SCORE_MODEL.IS_SCORE_MODEL_DECISION:=true;
	endfor
	for every Application.CreditApplication.PersonalApplicant.SCORES.SCORE_MODEL in dor_AEScoreModel do
		SCORE_MODEL.IS_SCORE_MODEL_DECISION:=true;
	endfor
endif
endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_CalculatePCR6Score" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="0" Name="xPCR6_Score" Type="numeric"/>
<Local InitialValue="0.0" Name="xLogodds" Type="numeric"/>
<Local InitialValue="0" Name="xPCR4_Score" Type="numeric"/>
<Local InitialValue="null" Name="xLexixNexisScore" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xScorable" Type="string"/>
</Locals>
<Description>Calculate PCR6 Score</Description>
<ExpressionText>xPCR6_Score := 0;
xScorable := dm_isScorable;

//if Scorable
if(xScorable = "Y") then
        for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.LNRiskViewDataSource.Response.Output.RiskViewResponseEx.Result.Models.Model.LNScores.LNScore relative to PersonalApplicant do
                if(LNScore.Value &lt;&gt; null)then
                        xLexixNexisScore := LNScore.Value;
                endif
        endfor
	
        for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do
                if(SCORES.PCR4 &lt;&gt; null and SCORES.PCR4 &gt; 0 )then
                        xPCR4_Score := SCORES.PCR4;
                endif


                if (xLexixNexisScore = null OR xLexixNexisScore &lt; 500) then
                                xPCR6_Score := xPCR4_Score;
                else if(xLexixNexisScore &gt;= 500) then
                                xLogodds := -7.9375 + (0.00864 * xLexixNexisScore) + (0.00423 * xPCR4_Score);
                                xPCR6_Score := Round((1 /(1 + exp((-1 * xLogodds)))) * 1000);
                endif
                endif
		
                SCORES.PCR6 := xPCR6_Score;
        endfor
		
//not scorable
else 
        //not scorable PCR6 default PCR4
        for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do
                if(SCORES.PCR4 &lt;&gt; null) then
                        SCORES.PCR6 := SCORES.PCR4;
                endif
				
        endfor

endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsTUAccountType" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Generate filters for TU Account Type</Description>
<ExpressionText>    result := null;
  
    
    //REVOLVING
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR AND (iNORMALIZED_BUREAU_SEGMENTS.PORTFOLIO_TYPE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.PORTFOLIO_TYPE, "C, R", "," ))) then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING := true;
    endif

    //REAL-PROPERTY
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR ) then
        if( iNORMALIZED_BUREAU_SEGMENTS.PORTFOLIO_TYPE &lt;&gt; null ) then
            if(iNORMALIZED_BUREAU_SEGMENTS.PORTFOLIO_TYPE = "M" ) then
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY := true;
        
        else if(iNORMALIZED_BUREAU_SEGMENTS.PORTFOLIO_TYPE = "I" AND 
           ( (iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE, "CV, FI, FH, FR, HE, HI, MB, PI, RE, RL, RM, RT, SI, SM, VA, VM", ",")) OR
            (iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE, "FHA, FHI, HEQ, VAL", ","))    )) then
     
  
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY := true;
     endif endif endif endif



     //COLL-EXT
     iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLL_EXT := false;
     if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG OR 
             (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "Y")) then
    
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLL_EXT := true;
     endif
 

     //INSTALL
     iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL := false;
     if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true) then
             if((iNORMALIZED_BUREAU_SEGMENTS.PORTFOLIO_TYPE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.PORTFOLIO_TYPE = "I") AND
                          (iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE &lt;&gt; null AND NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE, "CV, FI, FH, FR, HE, HI, MB, PI, RE, RL, RM, RT, SI, SM, VA, VM", ",")) AND
                          (iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE, "FHA, FHI, HEQ, VAL", ",")) AND
                          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLL_EXT = false) then
     
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL := true;
    
     endif endif


     //COLLECTION
     iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECTION := false;
     if((iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "Y") OR 
           (iNORMALIZED_BUREAU_SEGMENTS.MOP &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.MOP, "9B, 9P", ",") )    OR
           (iNORMALIZED_BUREAU_SEGMENTS.MAX_DELINQ_MOP &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.MAX_DELINQ_MOP, "9B, 9P", ",") )   OR
           (iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE, "AOA, BDC, CCC, CLA, COL, CPM, CPP, PCL", ",") )    OR
           iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG = true) then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECTION := true;
     endif



    //COLL-INT
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLL_INT := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; "Y") then
            if(   (iNORMALIZED_BUREAU_SEGMENTS.MOP &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.MOP, "9B, 9P", ",") )    OR
                      (iNORMALIZED_BUREAU_SEGMENTS.MAX_DELINQ_MOP &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.MAX_DELINQ_MOP, "9B, 9P", ",") )   OR
                      (iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE, "AOA,BDC, CCC, CLA, COL, CPM, CPP, PCL", ",") ) ) then
        
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLL_INT := true;
     endif endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_InitializeBureauAttributes" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Initializes the default value of Attributes</Description>
<ExpressionText>result := null;


for every Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES relative to PersonalApplicant do

          BUREAU_ATTRIBUTES.ALE001 := 0;
          BUREAU_ATTRIBUTES.ALE002 := 0;
          BUREAU_ATTRIBUTES.ALE005 := 0;
          BUREAU_ATTRIBUTES.ALE007 := 0;
          BUREAU_ATTRIBUTES.ALE022 := 0;
          BUREAU_ATTRIBUTES.ALE023 := 0;
          BUREAU_ATTRIBUTES.ALE026 := 0;
          BUREAU_ATTRIBUTES.ALE071 := 0;
          BUREAU_ATTRIBUTES.ALE074 := 0;
          BUREAU_ATTRIBUTES.ALE075 := 0;
          BUREAU_ATTRIBUTES.ALE076 := 0;
          BUREAU_ATTRIBUTES.ALE077 := 0;
          BUREAU_ATTRIBUTES.ALE078 := 0;
          BUREAU_ATTRIBUTES.ALE080 := 0;
          BUREAU_ATTRIBUTES.ALE081 := 0;
          BUREAU_ATTRIBUTES.ALE084 := 0;
          BUREAU_ATTRIBUTES.ALE403 := 0;
          BUREAU_ATTRIBUTES.ALE501 := 0;
          BUREAU_ATTRIBUTES.ALE502 := 0;
          BUREAU_ATTRIBUTES.ALE503 := 0;
          BUREAU_ATTRIBUTES.ALE601 := 0;
          BUREAU_ATTRIBUTES.ALE720 := 9999;
          BUREAU_ATTRIBUTES.ALE724 := 9999;
          BUREAU_ATTRIBUTES.ALE740 := 9999;
          BUREAU_ATTRIBUTES.ALE801 := 0;
          BUREAU_ATTRIBUTES.ALE804 := 0;
          BUREAU_ATTRIBUTES.ALE901 := 0;
          BUREAU_ATTRIBUTES.ALE903 := 0;
          BUREAU_ATTRIBUTES.ALE904 := 0;
          BUREAU_ATTRIBUTES.ALE905 := 0;
          BUREAU_ATTRIBUTES.ALE906 := 0;
          BUREAU_ATTRIBUTES.ALE908 := 0;
          BUREAU_ATTRIBUTES.ALL001 := 0;
          BUREAU_ATTRIBUTES.ALL002 := 0;
          BUREAU_ATTRIBUTES.ALL003 := 0;
          BUREAU_ATTRIBUTES.ALL005 := 0;
          BUREAU_ATTRIBUTES.ALL006 := 0;
          BUREAU_ATTRIBUTES.ALL007 := 0;
          BUREAU_ATTRIBUTES.ALL010 := 0;
          BUREAU_ATTRIBUTES.ALL021 := 0;
          BUREAU_ATTRIBUTES.ALL022 := 0;
          BUREAU_ATTRIBUTES.ALL023 := 0;
          BUREAU_ATTRIBUTES.ALL024 := 0;
          BUREAU_ATTRIBUTES.ALL026 := 0;
          BUREAU_ATTRIBUTES.ALL051 := 0;
          BUREAU_ATTRIBUTES.ALL052 := 0;
          BUREAU_ATTRIBUTES.ALL062 := 0;
          BUREAU_ATTRIBUTES.ALL064 := 0;
          BUREAU_ATTRIBUTES.ALL067 := 0;
          BUREAU_ATTRIBUTES.ALL071 := 0;
          BUREAU_ATTRIBUTES.ALL074 := 0;
          BUREAU_ATTRIBUTES.ALL075 := 0;
          BUREAU_ATTRIBUTES.ALL076 := 0;
          BUREAU_ATTRIBUTES.ALL077 := 0;
          BUREAU_ATTRIBUTES.ALL078 := 0;
          BUREAU_ATTRIBUTES.ALL080 := 0;
          BUREAU_ATTRIBUTES.ALL081 := 0;
          BUREAU_ATTRIBUTES.ALL082 := 0;
          BUREAU_ATTRIBUTES.ALL084 := 0;
          BUREAU_ATTRIBUTES.ALL085 := 0;
          BUREAU_ATTRIBUTES.ALL086 := 0;
          BUREAU_ATTRIBUTES.ALL090 := 0;
          BUREAU_ATTRIBUTES.ALL091 := 0;
          BUREAU_ATTRIBUTES.ALL092 := 0;
          BUREAU_ATTRIBUTES.ALL101 := 0;
          BUREAU_ATTRIBUTES.ALL102 := 0;
          BUREAU_ATTRIBUTES.ALL103 := 0;
          BUREAU_ATTRIBUTES.ALL104 := 0;
          BUREAU_ATTRIBUTES.ALL105 := 0;
          BUREAU_ATTRIBUTES.ALL106 := 0;
          BUREAU_ATTRIBUTES.ALL107 := 0;
          BUREAU_ATTRIBUTES.ALL108 := 0;
          BUREAU_ATTRIBUTES.ALL109 := 0;
          BUREAU_ATTRIBUTES.ALL110 := 0;
          BUREAU_ATTRIBUTES.ALL111 := 0;
          BUREAU_ATTRIBUTES.ALL112 := 0;
          BUREAU_ATTRIBUTES.ALL113 := 0;
          BUREAU_ATTRIBUTES.ALL114 := 0;
          BUREAU_ATTRIBUTES.ALL115 := 0;
          BUREAU_ATTRIBUTES.ALL116 := 0;
          BUREAU_ATTRIBUTES.ALL117 := 0;
          BUREAU_ATTRIBUTES.ALL118 := 0;
          BUREAU_ATTRIBUTES.ALL119 := 0;
          BUREAU_ATTRIBUTES.ALL122 := 0;
          BUREAU_ATTRIBUTES.ALL124 := 0;
          BUREAU_ATTRIBUTES.ALL125 := 0;
          BUREAU_ATTRIBUTES.ALL126 := 0;
          BUREAU_ATTRIBUTES.ALL127 := 0;
          BUREAU_ATTRIBUTES.ALL128 := 0;
          BUREAU_ATTRIBUTES.ALL129 := 0;
          BUREAU_ATTRIBUTES.ALL130 := 0;
          BUREAU_ATTRIBUTES.ALL131 := 0;
          BUREAU_ATTRIBUTES.ALL134 := 0;
          BUREAU_ATTRIBUTES.ALL136 := 0;
          BUREAU_ATTRIBUTES.ALL141 := 0;
          BUREAU_ATTRIBUTES.ALL142 := 0;
          BUREAU_ATTRIBUTES.ALL143 := 0;
          BUREAU_ATTRIBUTES.ALL144 := 0;
          BUREAU_ATTRIBUTES.ALL145 := 0;
          BUREAU_ATTRIBUTES.ALL146 := 0;
          BUREAU_ATTRIBUTES.ALL151 := 0;
          BUREAU_ATTRIBUTES.ALL152 := 0;
          BUREAU_ATTRIBUTES.ALL153 := 0;
          BUREAU_ATTRIBUTES.ALL155 := 0;
          BUREAU_ATTRIBUTES.ALL156 := 0;
          BUREAU_ATTRIBUTES.ALL201 := 0;
          BUREAU_ATTRIBUTES.ALL202 := 0;
          BUREAU_ATTRIBUTES.ALL207 := 0;
          BUREAU_ATTRIBUTES.ALL208 := 0;
          BUREAU_ATTRIBUTES.ALL301 := 0;
          BUREAU_ATTRIBUTES.ALL403 := 0;
          BUREAU_ATTRIBUTES.ALL501 := 0;
          BUREAU_ATTRIBUTES.ALL502 := 0;
          BUREAU_ATTRIBUTES.ALL503 := 0;
          BUREAU_ATTRIBUTES.ALL504 := 0;
          BUREAU_ATTRIBUTES.ALL505 := 0;
          BUREAU_ATTRIBUTES.ALL524 := 0;
          BUREAU_ATTRIBUTES.ALL601 := 0;
          BUREAU_ATTRIBUTES.ALL602 := 0;
          BUREAU_ATTRIBUTES.ALL701 := 0;
          BUREAU_ATTRIBUTES.ALL702 := 9999;
          BUREAU_ATTRIBUTES.ALL703 := 0;
          BUREAU_ATTRIBUTES.ALL720 := 9999;
          BUREAU_ATTRIBUTES.ALL724 := 9999;
          BUREAU_ATTRIBUTES.ALL740 := 9999;
          BUREAU_ATTRIBUTES.ALL760 := 9999;
          BUREAU_ATTRIBUTES.ALL780 := 9999;
          BUREAU_ATTRIBUTES.ALL790 := 9999;
          BUREAU_ATTRIBUTES.ALL801 := 0;
          BUREAU_ATTRIBUTES.ALL803 := 0;
          BUREAU_ATTRIBUTES.ALL804 := 0;
          BUREAU_ATTRIBUTES.ALL805 := 9999;
          BUREAU_ATTRIBUTES.ALL806 := 0;
          BUREAU_ATTRIBUTES.ALL807 := 0;
          BUREAU_ATTRIBUTES.ALL901 := 0;
          BUREAU_ATTRIBUTES.ALL903 := 0;
          BUREAU_ATTRIBUTES.ALL904 := 0;
          BUREAU_ATTRIBUTES.ALL905 := 0;
          BUREAU_ATTRIBUTES.ALL906 := 0;
          BUREAU_ATTRIBUTES.ALL907 := 0;
          BUREAU_ATTRIBUTES.AUT001 := 0;
          BUREAU_ATTRIBUTES.AUT071 := 0;
          BUREAU_ATTRIBUTES.AUT720 := 9999;
          BUREAU_ATTRIBUTES.BAC001 := 0;
          BUREAU_ATTRIBUTES.BAC002 := 0;
          BUREAU_ATTRIBUTES.BAC005 := 0;
          BUREAU_ATTRIBUTES.BAC007 := 0;
          BUREAU_ATTRIBUTES.BAC022 := 0;
          BUREAU_ATTRIBUTES.BAC023 := 0;
          BUREAU_ATTRIBUTES.BAC026 := 0;
          BUREAU_ATTRIBUTES.BAC028 := 0;
          BUREAU_ATTRIBUTES.BAC031 := 0;
          BUREAU_ATTRIBUTES.BAC035 := 0;
          BUREAU_ATTRIBUTES.BAC037 := 0;
          BUREAU_ATTRIBUTES.BAC042 := 0;
          BUREAU_ATTRIBUTES.BAC044 := 0;
          BUREAU_ATTRIBUTES.BAC045 := 0;
          BUREAU_ATTRIBUTES.BAC071 := 0;
          BUREAU_ATTRIBUTES.BAC074 := 0;
          BUREAU_ATTRIBUTES.BAC075 := 0;
          BUREAU_ATTRIBUTES.BAC076 := 0;
          BUREAU_ATTRIBUTES.BAC077 := 0;
          BUREAU_ATTRIBUTES.BAC078 := 0;
          BUREAU_ATTRIBUTES.BAC080 := 0;
          BUREAU_ATTRIBUTES.BAC081 := 0;
          BUREAU_ATTRIBUTES.BAC084 := 0;
          BUREAU_ATTRIBUTES.BAC302 := 0;
          BUREAU_ATTRIBUTES.BAC303 := 0;
          BUREAU_ATTRIBUTES.BAC401 := 0;
          BUREAU_ATTRIBUTES.BAC403 := 0;
          BUREAU_ATTRIBUTES.BAC501 := 0;
          BUREAU_ATTRIBUTES.BAC502 := 0;
          BUREAU_ATTRIBUTES.BAC503 := 0;
          BUREAU_ATTRIBUTES.BAC601 := 0;
          BUREAU_ATTRIBUTES.BAC801 := 0;
          BUREAU_ATTRIBUTES.BAC804 := 0;
          BUREAU_ATTRIBUTES.BAC901 := 0;
          BUREAU_ATTRIBUTES.BAC903 := 0;
          BUREAU_ATTRIBUTES.BAC904 := 0;
          BUREAU_ATTRIBUTES.BAC905 := 0;
          BUREAU_ATTRIBUTES.BAC906 := 0;
          BUREAU_ATTRIBUTES.BAC908 := 0;
          BUREAU_ATTRIBUTES.BNK001 := 0;
          BUREAU_ATTRIBUTES.BNK026 := 0;
          BUREAU_ATTRIBUTES.BRR026 := 0;
          BUREAU_ATTRIBUTES.CAP026 := 0;
          BUREAU_ATTRIBUTES.CAP801 := 0;
          BUREAU_ATTRIBUTES.CRU001 := 0;
          BUREAU_ATTRIBUTES.FIL001 := 0;
          BUREAU_ATTRIBUTES.FIL022 := 0;
          BUREAU_ATTRIBUTES.FIL023 := 0;
          BUREAU_ATTRIBUTES.FIN001 := 0;
          BUREAU_ATTRIBUTES.FIN026 := 0;
          BUREAU_ATTRIBUTES.FIN601 := 0;
          BUREAU_ATTRIBUTES.FIN801 := 0;
          BUREAU_ATTRIBUTES.GBL007 := 0;
          BUREAU_ATTRIBUTES.HEQ001 := 0;
          BUREAU_ATTRIBUTES.ILN001 := 0;
          BUREAU_ATTRIBUTES.ILN002 := 0;
          BUREAU_ATTRIBUTES.ILN005 := 0;
          BUREAU_ATTRIBUTES.ILN006 := 0;
          BUREAU_ATTRIBUTES.ILN007 := 0;
          BUREAU_ATTRIBUTES.ILN022 := 0;
          BUREAU_ATTRIBUTES.ILN023 := 0;
          BUREAU_ATTRIBUTES.ILN026 := 0;
          BUREAU_ATTRIBUTES.ILN064 := 0;
          BUREAU_ATTRIBUTES.ILN067 := 0;
          BUREAU_ATTRIBUTES.ILN071 := 0;
          BUREAU_ATTRIBUTES.ILN074 := 0;
          BUREAU_ATTRIBUTES.ILN075 := 0;
          BUREAU_ATTRIBUTES.ILN076 := 0;
          BUREAU_ATTRIBUTES.ILN077 := 0;
          BUREAU_ATTRIBUTES.ILN078 := 0;
          BUREAU_ATTRIBUTES.ILN080 := 0;
          BUREAU_ATTRIBUTES.ILN081 := 0;
          BUREAU_ATTRIBUTES.ILN084 := 0;
          BUREAU_ATTRIBUTES.ILN085 := 0;
          BUREAU_ATTRIBUTES.ILN086 := 0;
          BUREAU_ATTRIBUTES.ILN101 := 0;
          BUREAU_ATTRIBUTES.ILN102 := 0;
          BUREAU_ATTRIBUTES.ILN103 := 0;
          BUREAU_ATTRIBUTES.ILN104 := 0;
          BUREAU_ATTRIBUTES.ILN105 := 0;
          BUREAU_ATTRIBUTES.ILN106 := 0;
          BUREAU_ATTRIBUTES.ILN107 := 0;
          BUREAU_ATTRIBUTES.ILN108 := 0;
          BUREAU_ATTRIBUTES.ILN109 := 0;
          BUREAU_ATTRIBUTES.ILN110 := 0;
          BUREAU_ATTRIBUTES.ILN111 := 0;
          BUREAU_ATTRIBUTES.ILN112 := 0;
          BUREAU_ATTRIBUTES.ILN113 := 0;
          BUREAU_ATTRIBUTES.ILN114 := 0;
          BUREAU_ATTRIBUTES.ILN115 := 0;
          BUREAU_ATTRIBUTES.ILN116 := 0;
          BUREAU_ATTRIBUTES.ILN117 := 0;
          BUREAU_ATTRIBUTES.ILN118 := 0;
          BUREAU_ATTRIBUTES.ILN119 := 0;
          BUREAU_ATTRIBUTES.ILN122 := 0;
          BUREAU_ATTRIBUTES.ILN124 := 0;
          BUREAU_ATTRIBUTES.ILN125 := 0;
          BUREAU_ATTRIBUTES.ILN126 := 0;
          BUREAU_ATTRIBUTES.ILN127 := 0;
          BUREAU_ATTRIBUTES.ILN128 := 0;
          BUREAU_ATTRIBUTES.ILN129 := 0;
          BUREAU_ATTRIBUTES.ILN130 := 0;
          BUREAU_ATTRIBUTES.ILN201 := 0;
          BUREAU_ATTRIBUTES.ILN301 := 0;
          BUREAU_ATTRIBUTES.ILN302 := 0;
          BUREAU_ATTRIBUTES.ILN403 := 0;
          BUREAU_ATTRIBUTES.ILN501 := 0;
          BUREAU_ATTRIBUTES.ILN502 := 0;
          BUREAU_ATTRIBUTES.ILN503 := 0;
          BUREAU_ATTRIBUTES.ILN504 := 0;
          BUREAU_ATTRIBUTES.ILN601 := 0;
          BUREAU_ATTRIBUTES.ILN701 := 0;
          BUREAU_ATTRIBUTES.ILN702 := 9999;
          BUREAU_ATTRIBUTES.ILN703 := 0;
          BUREAU_ATTRIBUTES.ILN720 := 9999;
          BUREAU_ATTRIBUTES.ILN724 := 9999;
          BUREAU_ATTRIBUTES.ILN740 := 9999;
          BUREAU_ATTRIBUTES.ILN801 := 0;
          BUREAU_ATTRIBUTES.ILN804 := 0;
          BUREAU_ATTRIBUTES.ILN901 := 0;
          BUREAU_ATTRIBUTES.ILN903 := 0;
          BUREAU_ATTRIBUTES.ILN904 := 0;
          BUREAU_ATTRIBUTES.ILN905 := 0;
          BUREAU_ATTRIBUTES.ILN906 := 0;
          BUREAU_ATTRIBUTES.ILN908 := 0;
          BUREAU_ATTRIBUTES.ILN914 := 0;
		  
		  BUREAU_ATTRIBUTES.IRC004 := 0;
		  BUREAU_ATTRIBUTES.IRC005 := 0;
		  
          BUREAU_ATTRIBUTES.LFI801 := 0;
          BUREAU_ATTRIBUTES.REF001 := 0;
          BUREAU_ATTRIBUTES.REP001 := 0;
          BUREAU_ATTRIBUTES.REP002 := 0;
          BUREAU_ATTRIBUTES.REP005 := 0;
          BUREAU_ATTRIBUTES.REP026 := 0;
          BUREAU_ATTRIBUTES.REP071 := 0;
          BUREAU_ATTRIBUTES.REP074 := 0;
          BUREAU_ATTRIBUTES.REP075 := 0;
          BUREAU_ATTRIBUTES.REP076 := 0;
          BUREAU_ATTRIBUTES.REP077 := 0;
          BUREAU_ATTRIBUTES.REP078 := 0;
          BUREAU_ATTRIBUTES.REP080 := 0;
          BUREAU_ATTRIBUTES.REP081 := 0;
          BUREAU_ATTRIBUTES.REP084 := 0;
          BUREAU_ATTRIBUTES.REP302 := 0;
          BUREAU_ATTRIBUTES.REP501 := 0;
          BUREAU_ATTRIBUTES.REP503 := 0;
          BUREAU_ATTRIBUTES.REP601 := 0;
          BUREAU_ATTRIBUTES.REP901 := 0;
          BUREAU_ATTRIBUTES.REP903 := 0;
          BUREAU_ATTRIBUTES.REP904 := 0;
          BUREAU_ATTRIBUTES.REP905 := 0;
          BUREAU_ATTRIBUTES.REP906 := 0;
          BUREAU_ATTRIBUTES.REP908 := 0;
          BUREAU_ATTRIBUTES.REV001 := 0;
          BUREAU_ATTRIBUTES.REV002 := 0;
          BUREAU_ATTRIBUTES.REV005 := 0;
          BUREAU_ATTRIBUTES.REV006 := 0;
          BUREAU_ATTRIBUTES.REV007 := 0;
          BUREAU_ATTRIBUTES.REV022 := 0;
          BUREAU_ATTRIBUTES.REV023 := 0;
          BUREAU_ATTRIBUTES.REV024 := 0;
          BUREAU_ATTRIBUTES.REV026 := 0;
          BUREAU_ATTRIBUTES.REV028 := 0;
          BUREAU_ATTRIBUTES.REV038 := 0;
          BUREAU_ATTRIBUTES.REV044 := 0;
          BUREAU_ATTRIBUTES.REV064 := 0;
          BUREAU_ATTRIBUTES.REV067 := 0;
          BUREAU_ATTRIBUTES.REV071 := 0;
          BUREAU_ATTRIBUTES.REV074 := 0;
          BUREAU_ATTRIBUTES.REV075 := 0;
          BUREAU_ATTRIBUTES.REV076 := 0;
          BUREAU_ATTRIBUTES.REV077 := 0;
          BUREAU_ATTRIBUTES.REV078 := 0;
          BUREAU_ATTRIBUTES.REV080 := 0;
          BUREAU_ATTRIBUTES.REV081 := 0;
          BUREAU_ATTRIBUTES.REV084 := 0;
          BUREAU_ATTRIBUTES.REV085 := 0;
          BUREAU_ATTRIBUTES.REV086 := 0;
          BUREAU_ATTRIBUTES.REV101 := 0;
          BUREAU_ATTRIBUTES.REV102 := 0;
          BUREAU_ATTRIBUTES.REV103 := 0;
          BUREAU_ATTRIBUTES.REV104 := 0;
          BUREAU_ATTRIBUTES.REV105 := 0;
          BUREAU_ATTRIBUTES.REV106 := 0;
          BUREAU_ATTRIBUTES.REV107 := 0;
          BUREAU_ATTRIBUTES.REV108 := 0;
          BUREAU_ATTRIBUTES.REV109 := 0;
          BUREAU_ATTRIBUTES.REV110 := 0;
          BUREAU_ATTRIBUTES.REV111 := 0;
          BUREAU_ATTRIBUTES.REV112 := 0;
          BUREAU_ATTRIBUTES.REV113 := 0;
          BUREAU_ATTRIBUTES.REV114 := 0;
          BUREAU_ATTRIBUTES.REV115 := 0;
          BUREAU_ATTRIBUTES.REV116 := 0;
          BUREAU_ATTRIBUTES.REV117 := 0;
          BUREAU_ATTRIBUTES.REV118 := 0;
          BUREAU_ATTRIBUTES.REV119 := 0;
          BUREAU_ATTRIBUTES.REV122 := 0;
          BUREAU_ATTRIBUTES.REV124 := 0;
          BUREAU_ATTRIBUTES.REV125 := 0;
          BUREAU_ATTRIBUTES.REV126 := 0;
          BUREAU_ATTRIBUTES.REV127 := 0;
          BUREAU_ATTRIBUTES.REV128 := 0;
          BUREAU_ATTRIBUTES.REV129 := 0;
          BUREAU_ATTRIBUTES.REV130 := 0;
          BUREAU_ATTRIBUTES.REV201 := 0;
          BUREAU_ATTRIBUTES.REV202 := 0;
          BUREAU_ATTRIBUTES.REV301 := 0;
          BUREAU_ATTRIBUTES.REV302 := 0;
          BUREAU_ATTRIBUTES.REV401 := 0;
          BUREAU_ATTRIBUTES.REV403 := 0;
          BUREAU_ATTRIBUTES.REV404 := 0;
          BUREAU_ATTRIBUTES.REV501 := 0;
          BUREAU_ATTRIBUTES.REV502 := 0;
          BUREAU_ATTRIBUTES.REV503 := 0;
          BUREAU_ATTRIBUTES.REV504 := 0;
          BUREAU_ATTRIBUTES.REV524 := 0;
          BUREAU_ATTRIBUTES.REV601 := 0;
          BUREAU_ATTRIBUTES.REV701 := 0;
          BUREAU_ATTRIBUTES.REV702 := 9999;
          BUREAU_ATTRIBUTES.REV703 := 0;
          BUREAU_ATTRIBUTES.REV720 := 9999;
          BUREAU_ATTRIBUTES.REV724 := 9999;
          BUREAU_ATTRIBUTES.REV740 := 9999;
          BUREAU_ATTRIBUTES.REV901 := 0;
          BUREAU_ATTRIBUTES.REV903 := 0;
          BUREAU_ATTRIBUTES.REV904 := 0;
          BUREAU_ATTRIBUTES.REV905 := 0;
          BUREAU_ATTRIBUTES.REV906 := 0;
          BUREAU_ATTRIBUTES.REV908 := 0;
          BUREAU_ATTRIBUTES.RTI026 := 0;
          BUREAU_ATTRIBUTES.RTL001 := 0;
          BUREAU_ATTRIBUTES.RTL002 := 0;
          BUREAU_ATTRIBUTES.RTL005 := 0;
          BUREAU_ATTRIBUTES.RTL026 := 0;
          BUREAU_ATTRIBUTES.RTL071 := 0;
          BUREAU_ATTRIBUTES.RTL074 := 0;
          BUREAU_ATTRIBUTES.RTL075 := 0;
          BUREAU_ATTRIBUTES.RTL076 := 0;
          BUREAU_ATTRIBUTES.RTL077 := 0;
          BUREAU_ATTRIBUTES.RTL078 := 0;
          BUREAU_ATTRIBUTES.RTL080 := 0;
          BUREAU_ATTRIBUTES.RTL081 := 0;
          BUREAU_ATTRIBUTES.RTL084 := 0;
          BUREAU_ATTRIBUTES.RTL501 := 0;
          BUREAU_ATTRIBUTES.RTL502 := 0;
          BUREAU_ATTRIBUTES.RTL503 := 0;
          BUREAU_ATTRIBUTES.RTL901 := 0;
          BUREAU_ATTRIBUTES.RTL903 := 0;
          BUREAU_ATTRIBUTES.RTL904 := 0;
          BUREAU_ATTRIBUTES.RTL905 := 0;
          BUREAU_ATTRIBUTES.RTL906 := 0;
          BUREAU_ATTRIBUTES.RTL908 := 0;
          BUREAU_ATTRIBUTES.RTR001 := 0;
          BUREAU_ATTRIBUTES.RTR002 := 0;
          BUREAU_ATTRIBUTES.RTR005 := 0;
          BUREAU_ATTRIBUTES.RTR007 := 0;
          BUREAU_ATTRIBUTES.RTR022 := 0;
          BUREAU_ATTRIBUTES.RTR023 := 0;
          BUREAU_ATTRIBUTES.RTR026 := 0;
          BUREAU_ATTRIBUTES.RTR028 := 0;
          BUREAU_ATTRIBUTES.RTR031 := 0;
          BUREAU_ATTRIBUTES.RTR035 := 0;
          BUREAU_ATTRIBUTES.RTR044 := 0;
          BUREAU_ATTRIBUTES.RTR071 := 0;
          BUREAU_ATTRIBUTES.RTR074 := 0;
          BUREAU_ATTRIBUTES.RTR075 := 0;
          BUREAU_ATTRIBUTES.RTR076 := 0;
          BUREAU_ATTRIBUTES.RTR077 := 0;
          BUREAU_ATTRIBUTES.RTR078 := 0;
          BUREAU_ATTRIBUTES.RTR080 := 0;
          BUREAU_ATTRIBUTES.RTR081 := 0;
          BUREAU_ATTRIBUTES.RTR084 := 0;
          BUREAU_ATTRIBUTES.RTR303 := 0;
          BUREAU_ATTRIBUTES.RTR401 := 0;
          BUREAU_ATTRIBUTES.RTR403 := 0;
          BUREAU_ATTRIBUTES.RTR501 := 0;
          BUREAU_ATTRIBUTES.RTR601 := 0;
          BUREAU_ATTRIBUTES.RTR901 := 0;
          BUREAU_ATTRIBUTES.RTR903 := 0;
          BUREAU_ATTRIBUTES.RTR904 := 0;
          BUREAU_ATTRIBUTES.RTR905 := 0;
          BUREAU_ATTRIBUTES.RTR906 := 0;
          BUREAU_ATTRIBUTES.RTR908 := 0;

endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_AdverseActionDerogSegment_Orig" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xBureauName" Type="string"/>
<Local InitialValue="0.0" Name="xRTR401" Type="numeric"/>
<Local InitialValue="0.0" Name="xRTR078" Type="numeric"/>
<Local InitialValue="0.0" Name="xRTL901" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV044" Type="numeric"/>
<Local InitialValue="0.0" Name="xREP081" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN804" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN116" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN102" Type="numeric"/>
<Local InitialValue="0.0" Name="xFIN801" Type="numeric"/>
<Local InitialValue="0.0" Name="xCAP801" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC908" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC901" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC801" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC078" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL804" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL740" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL702" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL701" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL301" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL146" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL084" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL052" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL022" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE908" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE801" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE001" Type="numeric"/>
<Local InitialValue="0.0" Name="xLNScore" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR6" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4" Type="numeric"/>
<Local InitialValue="0.0" Name="xREv601d1_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV501d3_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV501d0_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xREP601d0_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xREP501d0_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN503d3_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN503d1_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN503d0_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC503d1_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC503d0_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xRTR401_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xRTR078_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xRTL901_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV044_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xREP081_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN804_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN116_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN102_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xFIN801_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xCAP801_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC908_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC901_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC801_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC078_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL804_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL740_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL702_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL701_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL301_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL146_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL084_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL052_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL022_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE908_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE801_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE001_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xREv601d1_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV501d3_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV501d0_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xREP601d0_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xREP501d0_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN503d3_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN503d1_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN503d0_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC503d1_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC503d0_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xRTR401_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xRTR078_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xRTL901_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV044_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xREP081_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN804_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN116_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN102_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE001_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE801_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL022_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL052_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL084_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL146_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL301_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL701_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL702_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL740_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC078_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC801_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL804_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC901_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC908_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xCAP801_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xFIN801_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE908_m" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xSubmodel" Type="string"/>
<Local InitialValue="null" Name="xAdverseActionList" Type="AdverseActionList"/>
<Local InitialValue="null" Name="xAdverseAction" Type="AdverseAction"/>
</Locals>
<Description>Adverse action logic Derog Segment</Description>
<ExpressionText>result:=null;
xAdverseActionList:=new AdverseActionList;

for every Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES relative to PersonalApplicant do

             xALE001 := dm_ValidateValue(ALE001, 0, 6);
             xALE801 := dm_ValidateValue(ALE801, 0, 1);
             xALE908 := dm_ValidateValue(ALE908, 0, 50);
             xALL022 := dm_ValidateValue(ALL022, 0, 5);
             xALL052 := dm_ValidateValue(ALL052, 0, 1);
             xALL084 := dm_ValidateValue(ALL084, 0, 20);
             xALL146 := dm_ValidateValue(ALL146, 0, 1);
             xALL301 := dm_ValidateValue(ALL301, 0, 250000);
             xALL701 := dm_ValidateValue(ALL701, 0, 300);
             xALL702 := dm_ValidateValue(ALL702, 0, 80);
             xALL740 := dm_ValidateValue(ALL740, 0, 20);
             xALL804 := dm_ValidateValue(ALL804, 0, 7);
             xBAC078 := dm_ValidateValue(BAC078, 0, 3);
             xBAC801 := dm_ValidateValue(BAC801, 0, 3);
             xBAC901 := dm_ValidateValue(BAC901, 0, 100);
             xBAC908 := dm_ValidateValue(BAC908, 0, 100);
             xCAP801 := dm_ValidateValue(CAP801, 0, 1);
             xFIN801 := dm_ValidateValue(FIN801, 0, 3);
             xILN102 := dm_ValidateValue(ILN102, 0, 5);
             xILN116 := dm_ValidateValue(ILN116, 0, 1);
             xILN804 := dm_ValidateValue(ILN804, 0, 3);
             xREP081 := dm_ValidateValue(REP081, 0, 1);
             xREV044 := dm_ValidateValue(REV044, 0, 3);
             xRTL901 := dm_ValidateValue(RTL901, 0, 100);
             xRTR078 := dm_ValidateValue(RTR078, 0, 2);
             xRTR401 := dm_ValidateValue(RTR401, 0, 5000);

	//Assign Clean or Derog
	if (ALL081 &lt;= 0) then xSubmodel := "Clean"; else xSubmodel := "Derog"; endif
	
	//Clean Submodel logic for Adverse Action
	if(xSubmodel="Derog")then
		xALE001_m:=1;
		xALE801_m:=0;
		xALE908_m:=8;
		xALL022_m:=1;
		xALL052_m:=0;
		xALL084_m:=6;
		xALL146_m:=0;
		xALL301_m:=25000;
		xALL701_m:=105;
		xALL702_m:=28;
		xALL740_m:=6;
		xALL804_m:=3;
		xBAC078_m:=1;
		xBAC801_m:=1;
		xBAC901_m:=28;
		xBAC908_m:=14;
		xCAP801_m:=0;
		xFIN801_m:=1;
		xILN102_m:=1;
		xILN116_m:=0;
		xILN804_m:=1;
		xREP081_m:=0;
		xREV044_m:=0;
		xRTL901_m:=28;
		xRTR078_m:=0;
		xRTR401_m:=200;
		xBAC503d0_m:=0.5;
		xBAC503d1_m:=0.2;
		xILN503d0_m:=0.4;
		xILN503d1_m:=0.3;
		xILN503d3_m:=0.2;
		xREP501d0_m:=0.8;
		xREP601d0_m:=0.9;
		xREV501d0_m:=0.3;
		xREV501d3_m:=0.1;
		xREv601d1_m:=0.4;
		
		xALE001_b:=-0.052029;
		xALE801_b:=-0.11273;
		xALE908_b:=-0.003903;
		xALL022_b:=0.0688578;
		xALL052_b:=0.2697169;
		xALL084_b:=0.0250423;
		xALL146_b:=-0.256476;
		xALL301_b:=-0.00000361;
		xALL701_b:=-0.002372;
		xALL702_b:=-0.002278;
		xALL740_b:=-0.014457;
		xALL804_b:=0.1012543;
		xBAC078_b:=-0.113965;
		xBAC801_b:=0.0350093;
		xBAC901_b:=-0.001938;
		xBAC908_b:=-0.005679;
		xCAP801_b:=-0.106779;
		xFIN801_b:=0.0618298;
		xILN102_b:=-0.062217;
		xILN116_b:=-0.135327;
		xILN804_b:=-0.092353;
		xREP081_b:=-0.104738;
		xREV044_b:=0.061238;
		xRTL901_b:=-0.001973;
		xRTR078_b:=-0.084938;
		xRTR401_b:=-0.000087;
		xBAC503d0_b:=0.0674267;
		xBAC503d1_b:=-0.293883;
		xILN503d0_b:=0.1998753;
		xILN503d1_b:=-0.150614;
		xILN503d3_b:=-0.102037;
		xREP501d0_b:=0.1681424;
		xREP601d0_b:=-0.233072;
		xREV501d0_b:=0.080209;
		xREV501d3_b:=-0.252998;
		xREv601d1_b:=-0.152181;
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALE001";
		xAdverseAction.Weighted_Mean:=xALE001_m*xALE001_b;
		xAdverseAction.Weighted_Actual:=xALE001*xALE001_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="11";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALE801";
		xAdverseAction.Weighted_Mean:=xALE801_m*xALE801_b;
		xAdverseAction.Weighted_Actual:=xALE801*xALE801_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="12";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALE908";
		xAdverseAction.Weighted_Mean:=xALE908_m*xALE908_b;
		xAdverseAction.Weighted_Actual:=xALE908*xALE908_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="13";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL022";
		xAdverseAction.Weighted_Mean:=xALL022_m*xALL022_b;
		xAdverseAction.Weighted_Actual:=xALL022*xALL022_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="14";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL052";
		xAdverseAction.Weighted_Mean:=xALL052_m*xALL052_b;
		xAdverseAction.Weighted_Actual:=xALL052*xALL052_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="15";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL084";
		xAdverseAction.Weighted_Mean:=xALL084_m*xALL084_b;
		xAdverseAction.Weighted_Actual:=xALL084*xALL084_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="16";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL146";
		xAdverseAction.Weighted_Mean:=xALL146_m*xALL146_b;
		xAdverseAction.Weighted_Actual:=xALL146*xALL146_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="17";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL301";
		xAdverseAction.Weighted_Mean:=xALL301_m*xALL301_b;
		xAdverseAction.Weighted_Actual:=xALL301*xALL301_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="18";
		Attach(xAdverseActionList,xAdverseAction);
			
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL701";
		xAdverseAction.Weighted_Mean:=xALL701_m*xALL701_b;
		xAdverseAction.Weighted_Actual:=xALL701*xALL701_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="19";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL702";
		xAdverseAction.Weighted_Mean:=xALL702_m*xALL702_b;
		xAdverseAction.Weighted_Actual:=xALL702*xALL702_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="20";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL740";
		xAdverseAction.Weighted_Mean:=xALL740_m*xALL740_b;
		xAdverseAction.Weighted_Actual:=xALL740*xALL740_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="21";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL804";
		xAdverseAction.Weighted_Mean:=xALL804_m*xALL804_b;
		xAdverseAction.Weighted_Actual:=xALL804*xALL804_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="22";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="BAC078";
		xAdverseAction.Weighted_Mean:=xBAC078_m*xBAC078_b;
		xAdverseAction.Weighted_Actual:=xBAC078*xBAC078_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="23";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="BAC801";
		xAdverseAction.Weighted_Mean:=xBAC801_m*xBAC801_b;
		xAdverseAction.Weighted_Actual:=xBAC801*xBAC801_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="24";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="BAC901";
		xAdverseAction.Weighted_Mean:=xBAC901_m*xBAC901_b;
		xAdverseAction.Weighted_Actual:=xBAC901*xBAC901_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="25";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="BAC908";
		xAdverseAction.Weighted_Mean:=xBAC908_m*xBAC908_b;
		xAdverseAction.Weighted_Actual:=xBAC908*xBAC908_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="26";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="CAP801";
		xAdverseAction.Weighted_Mean:=xCAP801_m*xCAP801_b;
		xAdverseAction.Weighted_Actual:=xCAP801*xCAP801_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="27";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="FIN801";
		xAdverseAction.Weighted_Mean:=xFIN801_m*xFIN801_b;
		xAdverseAction.Weighted_Actual:=xFIN801*xFIN801_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="28";
		Attach(xAdverseActionList,xAdverseAction);
			
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ILN102";
		xAdverseAction.Weighted_Mean:=xILN102_m*xILN102_b;
		xAdverseAction.Weighted_Actual:=xILN102*xILN102_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="29";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ILN116";
		xAdverseAction.Weighted_Mean:=xILN116_m*xILN116_b;
		xAdverseAction.Weighted_Actual:=xILN116*xILN116_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="30";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ILN804";
		xAdverseAction.Weighted_Mean:=xILN804_m*xILN804_b;
		xAdverseAction.Weighted_Actual:=xILN804*xILN804_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="31";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="REP081";
		xAdverseAction.Weighted_Mean:=xREP081_m*xREP081_b;
		xAdverseAction.Weighted_Actual:=xREP081*xREP081_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="32";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="xREV044";
		xAdverseAction.Weighted_Mean:=xREV044_m*xREV044_b;
		xAdverseAction.Weighted_Actual:=xREV044*xREV044_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="33";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="RTL901";
		xAdverseAction.Weighted_Mean:=xRTL901_m*xRTL901_b;
		xAdverseAction.Weighted_Actual:=xRTL901*xRTL901_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="34";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="RTR078";
		xAdverseAction.Weighted_Mean:=xRTR078_m*xRTR078_b;
		xAdverseAction.Weighted_Actual:=xRTR078*xRTR078_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="35";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="RTR401";
		xAdverseAction.Weighted_Mean:=xRTR401_m*xRTR401_b;
		xAdverseAction.Weighted_Actual:=xRTR401*xRTR401_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="36";
		Attach(xAdverseActionList,xAdverseAction);
	
	
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="BAC503d0";
		xAdverseAction.Weighted_Mean:=xBAC503d0_m*xBAC503d0_b;
		xAdverseAction.Weighted_Actual:=BAC503d0*xBAC503d0_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="37";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="BAC503d1";
		xAdverseAction.Weighted_Mean:=xBAC503d1_m*xBAC503d1_b;
		xAdverseAction.Weighted_Actual:=BAC503d1*xBAC503d1_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="37";
		Attach(xAdverseActionList,xAdverseAction);
			
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ILN503d0";
		xAdverseAction.Weighted_Mean:=xILN503d0_m*xILN503d0_b;
		xAdverseAction.Weighted_Actual:=ILN503d0*xILN503d0_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="38";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ILN503d1";
		xAdverseAction.Weighted_Mean:=xILN503d1_m*xILN503d1_b;
		xAdverseAction.Weighted_Actual:=ILN503d1*xILN503d1_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="38";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ILN503d3";
		xAdverseAction.Weighted_Mean:=xILN503d3_m*xILN503d3_b;
		xAdverseAction.Weighted_Actual:=ILN503d3*xILN503d3_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="38";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="REP501d0";
		xAdverseAction.Weighted_Mean:=xREP501d0_m*xREP501d0_b;
		xAdverseAction.Weighted_Actual:=REP501d0*xREP501d0_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="39";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="REP601d0";
		xAdverseAction.Weighted_Mean:=xREP601d0_m*xREP601d0_b;
		xAdverseAction.Weighted_Actual:=REP601d0*xREP601d0_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="40";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="REV501d0";
		xAdverseAction.Weighted_Mean:=xREV501d0_m*xREV501d0_b;
		xAdverseAction.Weighted_Actual:=REV501d0*xREV501d0_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="41";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="REV501d3";
		xAdverseAction.Weighted_Mean:=xREV501d3_m*xREV501d3_b;
		xAdverseAction.Weighted_Actual:=REV501d3*xREV501d3_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="41";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="REv601d1";
		xAdverseAction.Weighted_Mean:=xREv601d1_m*xREv601d1_b;
		xAdverseAction.Weighted_Actual:=REv601d1*xREv601d1_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="42";
		Attach(xAdverseActionList,xAdverseAction);
	endif
endfor

if(xSubmodel="Derog")then
for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do
	if(SCORES.PCR4&lt;&gt;null) then
			xPCR4:=SCORES.PCR4;
		endif
		if(SCORES.PCR6&lt;&gt;null)then
			xPCR6:=SCORES.PCR6;
		endif
		if(SCORES.LNScore&lt;&gt;null)then
			xLNScore:=SCORES.LNScore;
		endif
			if(SCORES.BureauName&lt;&gt;null)then		
			xBureauName:=SCORES.BureauName;
			endif		
endfor
xAdverseActionList.AABureauName:=xBureauName;
xAdverseActionList.PCRV4Score:=xPCR4;
xAdverseActionList.PCRV6Score:=xPCR6;
xAdverseActionList.LNScore:=xLNScore;

for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
	Attach(PersonalApplicantOutput,xAdverseActionList);
endfor
endif

for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.AdverseActionList.AdverseAction relative to PersonalApplicant do
	if(InStringList(AdverseAction.Variable,"ALE801, ALL804, BAC801, CAP801, FIN801, ILN804",","))then
		AdverseAction.INQ:="Y"
	else
		AdverseAction.INQ:="N"
	endif

endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsEFXInquiry" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Generate filters for EFX Inquiry</Description>
<ExpressionText>    result := null;
  
    //INQUIRY
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.SEGMENT_TYPE = "IQ") then
            if(iNORMALIZED_BUREAU_SEGMENTS.IS_DEDUP_INQ = null or iNORMALIZED_BUREAU_SEGMENTS.IS_DEDUP_INQ &lt;&gt; true) then
                       iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY := true;
            endif
    endif

    

    //MONTHS-INQ
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_INQ := 9999;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY AND iNORMALIZED_BUREAU_SEGMENTS.INQUIRY_DATE &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.INQUIRY_DATE) &lt;&gt; "") then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_INQ := TimestampDiff("months", iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.INQUIRY_DATE))  
    endif



    //ALE-INQ
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE_INQ := false;
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CAP_INQ := false;
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC_INQ := false;
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LFI_INQ := false;
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIN_INQ := false;
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ILN_INQ := false;

    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY) then
         if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE, "AN, AU, AL, FA", ",")) then
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE_INQ := true;
            endif
         if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE = "FA") then
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CAP_INQ := true;
            endif
         if((iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null and iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "B")   OR
                                                                 (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE, "FC, FS, ON", ",")) ) then
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC_INQ := true;
            endif
         if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE = "FP") then
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LFI_INQ := true;
            endif
         if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE, "FA, FF, FP", ",")) then
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIN_INQ := true;
            endif
         if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE, "AN, AU, FA, FC, FP, FS, FZ, HM, MH, IZ, RE, RZ, SM, VS, ZS, ZZ", ",")) then
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ILN_INQ := true;
            endif
    endif

</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_get_AlertFlag_CsVsAd" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Checks for flag Consumer Statement Victim Statement Active Duty</Description>
<ExpressionText>result:="N";
for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS relative to PersonalApplicant do
if(OTHERS&lt;&gt; null) then
if ( OTHERS.ScoreFlagVS &lt;&gt; null and OTHERS.ScoreFlagVS &lt;&gt;"") then
	if( OTHERS.ScoreFlagVS = "Y") then
		result:="Y";
else if ( OTHERS.ScoreFlagCS &lt;&gt; null and OTHERS.ScoreFlagCS &lt;&gt;"") then
				if (OTHERS.ScoreFlagCS="Y") then
						result:="Y";
	else  if ( OTHERS.SCoreFlagACTIVEDUTY &lt;&gt; null and OTHERS.SCoreFlagACTIVEDUTY &lt;&gt;"") then
				if(OTHERS.SCoreFlagACTIVEDUTY="Y")then
					result:="Y";
				endif
			 endif
			 endif
           endif
       endif
endif
endif
endfor
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant.SCORES" Name="dm_CombinedModelReasonCodes" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="0.0" Name="xGroupLN" Type="numeric"/>
<Local InitialValue="0.0" Name="xGroupPCR" Type="numeric"/>
</Locals>
<Description>Determines what score model reason codes to use.</Description>
<ExpressionText>result:="0";

//Score Mapping ï¿½ PCR V4 
if(SCORES.PCR4 &lt;&gt; null and SCORES.PCR4 &gt;= 0) then
	if(SCORES.PCR4&gt;= 0 and SCORES.PCR4&lt;299) then
		xGroupPCR:=1;
	else if (SCORES.PCR4&gt;= 299 and SCORES.PCR4&lt;341) then
		xGroupPCR:=2;
	else if (SCORES.PCR4&gt;= 341 and SCORES.PCR4&lt;375) then
		xGroupPCR:=3;
	else if (SCORES.PCR4&gt;= 375 and SCORES.PCR4&lt;404) then
		xGroupPCR:=4;
	else if (SCORES.PCR4&gt;= 404 and SCORES.PCR4&lt;436) then
		xGroupPCR:=5;
	else if (SCORES.PCR4&gt;= 436 and SCORES.PCR4&lt;470) then
		xGroupPCR:=6;
	else if (SCORES.PCR4&gt;= 470 and SCORES.PCR4&lt;507) then
		xGroupPCR:=7;
	else if (SCORES.PCR4&gt;= 507 and SCORES.PCR4&lt;544) then
		xGroupPCR:=8;
	else if (SCORES.PCR4&gt;= 544 and SCORES.PCR4&lt;580) then
		xGroupPCR:=9;
	else if (SCORES.PCR4&gt;= 580 and SCORES.PCR4&lt;616) then
		xGroupPCR:=10;
	else if (SCORES.PCR4&gt;= 616 and SCORES.PCR4&lt;655) then
		xGroupPCR:=11;
	else if (SCORES.PCR4&gt;= 655 and SCORES.PCR4&lt;698) then
		xGroupPCR:=12;
	else if (SCORES.PCR4&gt;= 698 and SCORES.PCR4&lt;745) then
		xGroupPCR:=13;
	else if (SCORES.PCR4&gt;= 745 and SCORES.PCR4&lt;787) then
		xGroupPCR:=14;
	else if (SCORES.PCR4&gt;= 787 and SCORES.PCR4&lt;838) then
		xGroupPCR:=15;
	else if (SCORES.PCR4&gt;= 838 and SCORES.PCR4&lt;883) then
		xGroupPCR:=16;
	else if (SCORES.PCR4&gt;= 883 and SCORES.PCR4&lt;922) then
		xGroupPCR:=17;
	else if (SCORES.PCR4&gt;= 922 and SCORES.PCR4&lt;952) then
		xGroupPCR:=18;
	else if (SCORES.PCR4&gt;= 952 and SCORES.PCR4&lt;972) then
		xGroupPCR:=19;
	else if (SCORES.PCR4&gt;= 972 ) then
		xGroupPCR:=20;
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
endif

//Score Mapping ï¿½ Lexis-Nexis
if(SCORES.LNSCore&lt;&gt;null and SCORES.LNScore&gt;=0)then
	if(SCORES.LNScore&gt;=0 and SCORES.LNScore&lt;609) then
		xGroupLN:=1;
	else if(SCORES.LNScore&gt;=609 and SCORES.LNScore&lt;628) then
		xGroupLN:=2;
	else if(SCORES.LNScore&gt;=628 and SCORES.LNScore&lt;640) then
		xGroupLN:=3;
	else if(SCORES.LNScore&gt;=640 and SCORES.LNScore&lt;650) then
		xGroupLN:=4;
	else if(SCORES.LNScore&gt;=650 and SCORES.LNScore&lt;658) then
		xGroupLN:=5;
	else if(SCORES.LNScore&gt;=658 and SCORES.LNScore&lt;665) then
		xGroupLN:=6;
	else if(SCORES.LNScore&gt;=665 and SCORES.LNScore&lt;672) then
		xGroupLN:=7;
	else if(SCORES.LNScore&gt;=672 and SCORES.LNScore&lt;678) then
		xGroupLN:=8;
	else if(SCORES.LNScore&gt;=678 and SCORES.LNScore&lt;685) then
		xGroupLN:=9;
	else if(SCORES.LNScore&gt;=685 and SCORES.LNScore&lt;691) then
		xGroupLN:=10;
	else if(SCORES.LNScore&gt;=691 and SCORES.LNScore&lt;698) then
		xGroupLN:=11;
	else if(SCORES.LNScore&gt;=698 and SCORES.LNScore&lt;705) then
		xGroupLN:=12;
	else if(SCORES.LNScore&gt;=705 and SCORES.LNScore&lt;713) then
		xGroupLN:=13;
	else if(SCORES.LNScore&gt;=713 and SCORES.LNScore&lt;721) then
		xGroupLN:=14;
	else if(SCORES.LNScore&gt;=721 and SCORES.LNScore&lt;731) then
		xGroupLN:=15;
	else if(SCORES.LNScore&gt;=731 and SCORES.LNScore&lt;743) then
		xGroupLN:=16;
	else if(SCORES.LNScore&gt;=743 and SCORES.LNScore&lt;758) then
		xGroupLN:=17;
	else if(SCORES.LNScore&gt;=758 and SCORES.LNScore&lt;777) then
		xGroupLN:=18;
	else if(SCORES.LNScore&gt;=777 and SCORES.LNScore&lt;805) then
		xGroupLN:=19;
	else if(SCORES.LNScore&gt;=805) then
		xGroupLN:=20;
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
endif

//Compare Score Groups
if(SCORES.LNScore&lt;0)then
	result:="PCRV4";
else if(xGroupLN = xGroupPCR)then
	result:="PCRV4";
else if(xGroupLN &lt; xGroupPCR) then
	result:="LN";
else if(xGroupLN &gt; xGroupPCR) then
	result :="PCRV4";
endif
endif
endif
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_set_CreditClass2" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Set Credit class 2</Description>
<ExpressionText>for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do
	BusinessApplicantOutput.INITIAL_CREDIT_CLASS:="2";
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_STAGGFiltersAndFunctions" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xBureau" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xProfileDate" Type="string"/>
</Locals>
<Description>Wrapper to generate Filters and Functions specific to bureau</Description>
<ExpressionText>result := null;

for every Application.CreditApplication.PersonalApplicant relative to CreditApplication do
     for every  Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.HeaderList.Header relative to PersonalApplicant do
         xBureau := Header.Bureau;
         xProfileDate := Header.DateOfThisReport;
   endfor
   
   
   //parse Bureau Data
   dm_ParseBureauData(xProfileDate);
   
   
   if(xBureau &lt;&gt; null AND xBureau = "TU4.1") then
            //Parse TU Inquiry data
            dm_ParseTUInquiryData(xProfileDate);
   
            //Process TU Filters
            dm_STAGGFiltersAndFunctionsTUBureau(xProfileDate);
   
   else if(xBureau &lt;&gt; null AND xBureau = "EFU") then
            //Parse EFX Inquiry data
            dm_ParseEFXInquiryData(xProfileDate);
   
            //Process EFX Filters
           dm_STAGGFiltersAndFunctionsEFXBureau(xProfileDate);
   endif endif
   
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsEFXIRC" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Generate filters related to IRC</Description>
<ExpressionText>result:=null;



//EFX update the values as-is if available
//MONTHS-STATUS-IRC
iNORMALIZED_BUREAU_SEGMENTS.MONTHS_STATUS_IRC := 9999;
if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_STATUS &lt;&gt; null) then
               iNORMALIZED_BUREAU_SEGMENTS.MONTHS_STATUS_IRC := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_STATUS;
endif


//Commented out because its TU logic. 
/*
//MONTHS-STATUS-IRC
iNORMALIZED_BUREAU_SEGMENTS.MONTHS_STATUS_IRC := 9999;
if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT = true) then
               xDateVerified := dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.DATE_VERIFIED);
               xPaymentPatternStartDate := dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_START_DATE);
               //	xProfileDate:=dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PROFILE_DATE);
               if(xDateVerified &lt;&gt; xPaymentPatternStartDate) then
                              if( TimestampDiff("days", xDateVerified, xPaymentPatternStartDate) &gt; 0) then
                                             //xEffectiveDateDiff:=TimestampDiff("moths",xProfileDate,xDateVerified);
                                             xEffectiveDateDiff:= TimestampDiff("months",iProfileDate,xDateVerified);
                                             xPayPatternStartDateDiff := TimestampDiff("months",iProfileDate, xPaymentPatternStartDate);
                                             iNORMALIZED_BUREAU_SEGMENTS.MONTHS_STATUS_IRC := Min(xPayPatternStartDateDiff,xEffectiveDateDiff);
                              endif
               else
                              iNORMALIZED_BUREAU_SEGMENTS.MONTHS_STATUS_IRC := 9999;
               endif
else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG = true) then
               if(iNORMALIZED_BUREAU_SEGMENTS.DATE_OPENED &lt;&gt; null AND Trim(iNORMALIZED_BUREAU_SEGMENTS.DATE_OPENED) &lt;&gt; "") then
                              iNORMALIZED_BUREAU_SEGMENTS.MONTHS_STATUS_IRC := TimestampDiff("months",iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.DATE_OPENED));
               else
                              iNORMALIZED_BUREAU_SEGMENTS.MONTHS_STATUS_IRC := 9999;
               endif
endif endif
*/




//TELCO
iNORMALIZED_BUREAU_SEGMENTS.TELCO:=false;
if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT = true) then
               if(iNORMALIZED_BUREAU_SEGMENTS.SUBSCRIBER_NAME&lt;&gt;null AND dm_GetTELCO(iNORMALIZED_BUREAU_SEGMENTS.SUBSCRIBER_NAME) = true)then
                              iNORMALIZED_BUREAU_SEGMENTS.TELCO:=true;
               else
                              iNORMALIZED_BUREAU_SEGMENTS.TELCO:=false;
               endif
else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG = true) then
               if(iNORMALIZED_BUREAU_SEGMENTS.CREDITOR_NAME &lt;&gt; null AND dm_GetTELCO(iNORMALIZED_BUREAU_SEGMENTS.CREDITOR_NAME) = true)then
                              iNORMALIZED_BUREAU_SEGMENTS.TELCO:=true;
               else
                              iNORMALIZED_BUREAU_SEGMENTS.TELCO:=false;
               endif
endif endif

//IS-TMOBILE
iNORMALIZED_BUREAU_SEGMENTS.IS_TMOBILE:=false;
if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT = true) then
               if(iNORMALIZED_BUREAU_SEGMENTS.SUBSCRIBER_NAME &lt;&gt; null AND dm_GetTMOBILE(iNORMALIZED_BUREAU_SEGMENTS.SUBSCRIBER_NAME) = true )then
                              iNORMALIZED_BUREAU_SEGMENTS.IS_TMOBILE := true;
               else
                              iNORMALIZED_BUREAU_SEGMENTS.IS_TMOBILE := false;
               endif
else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG&lt;&gt;null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG = true) then
               if(iNORMALIZED_BUREAU_SEGMENTS.CREDITOR_NAME &lt;&gt; null AND dm_GetTMOBILE(iNORMALIZED_BUREAU_SEGMENTS.CREDITOR_NAME) = true)then
                              iNORMALIZED_BUREAU_SEGMENTS.IS_TMOBILE := true;
               else
                              iNORMALIZED_BUREAU_SEGMENTS.IS_TMOBILE := false;
               endif
endif endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_PRScoreModel" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="-999" Name="xScoreValue" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xScoreName" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode5" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode4" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode3" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode2" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode1" Type="string"/>
<Local InitialValue="null" Name="xScoreModel" Type="SCORE_MODEL"/>
<Local InitialValue="null" Name="xReportDate" Type="timestamp"/>
<Local InitialValue="&quot;&quot;" Name="xBureauName" Type="string"/>
</Locals>
<Description>Assign Puerto Rico Score from the Bureau to Score Model element </Description>
<ExpressionText>result:="0";

for every Application.CreditApplication.PersonalApplicant.SCORES relative to CreditApplication do           
	if(SCORES.BureauName&lt;&gt;null)then		
		xBureauName:=SCORES.BureauName;
	endif	
 endfor 
	 
if(xBureauName="TU")then
       for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse relative to CreditApplication do
              for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.HeaderList.Header relative to ParsedResponse do
                     if(DateOfThisReport&lt;&gt;null and DateOfThisReport&lt;&gt;"")then
									xReportDate:= dm_formatDate(Trim(DateOfThisReport));
                                 //  xReportDate:=TimestampFromStr(Trim(DateOfThisReport));
                     endif
              endfor
              for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.ScoringList.Scoring relative to ParsedResponse do
                     if(Scoring.Score&lt;&gt;null and Scoring.Score&lt;&gt;"") then 
                            if(Scoring.ModelTypeIndicator &lt;&gt; null and Scoring.ModelTypeIndicator="00Q87")then
                                   xScoreName:="NA3";
								   if(Scoring.Score &lt;&gt; null) then
                                   xScoreValue:=val(Scoring.Score);
								  	endif
                                   if(Scoring.FirstReasonCode&lt;&gt;null and Scoring.FirstReasonCode&lt;&gt;"")then
                                          xReasonCode1:=Scoring.FirstReasonCode;
                                   endif
                                   if(Scoring.SecondReasonCode&lt;&gt;null and Scoring.SecondReasonCode&lt;&gt;"")then
                                          xReasonCode2:=Scoring.SecondReasonCode;
                                   endif
                                   if(Scoring.ThirdReasonCode&lt;&gt;null and Scoring.ThirdReasonCode&lt;&gt;"")then
                                          xReasonCode3:=Scoring.ThirdReasonCode;
                                   endif
                                   if(Scoring.FourthReasonCode&lt;&gt;null and Scoring.FourthReasonCode&lt;&gt;"")then
                                          xReasonCode4:=Scoring.FourthReasonCode;
                                   endif
                            endif
                     endif
              endfor
       endfor
endif
if(xBureauName="EFX")then
       for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse relative to CreditApplication do
              for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.HeaderList.Header relative to ParsedResponse do
                     if(DateOfThisReport&lt;&gt;null and DateOfThisReport&lt;&gt;"")then
					 		xReportDate:= dm_formatDate(Trim(DateOfThisReport));
                          //  xReportDate:=TimestampFromStr(Trim(DateOfThisReport));
                     endif
              endfor
              for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.ScoringList.Scoring relative to ParsedResponse do
                     if(Scoring.Score&lt;&gt;null and Scoring.Score&lt;&gt;"") then 
                            if(Scoring.Code &lt;&gt; null and Scoring.Code="02725")then
                                   xScoreName:="AE";
								    if(Scoring.Score &lt;&gt; null) then
                               		    xScoreValue:=val(Scoring.Score);
									endif
                                   if(Scoring.FirstReasonCode&lt;&gt;null and Scoring.FirstReasonCode&lt;&gt;"")then
                                          xReasonCode1:=Scoring.FirstReasonCode;
                                   endif
                                   if(Scoring.SecondReasonCode&lt;&gt;null and Scoring.SecondReasonCode&lt;&gt;"")then
                                          xReasonCode2:=Scoring.SecondReasonCode;
                                   endif
                                   if(Scoring.ThirdReasonCode&lt;&gt;null and Scoring.ThirdReasonCode&lt;&gt;"")then
                                          xReasonCode3:=Scoring.ThirdReasonCode;
                                   endif
                                   if(Scoring.FourthReasonCode&lt;&gt;null and Scoring.FourthReasonCode&lt;&gt;"")then
                                          xReasonCode4:=Scoring.FourthReasonCode;
                                   endif
                            endif
                     endif
              endfor
       endfor
endif		
 

 if(xScoreName &lt;&gt; null AND TRIM(xScoreName) &lt;&gt; "") then 
         xScoreModel:= new SCORE_MODEL;
         xSCoreModel.SCORE_NAME:=xScoreName;
         xScoreModel.SCORE_VALUE:=int(xScoreValue);
         xScoreModel.BUREAU_NAME:=xBureauName;
         xScoreModel.REPORT_DATE:=TimestampToDate( xReportDate);
         xScoreModel.REASON_CODE_1:=xReasonCode1;
         xScoreModel.REASON_CODE_2:=xReasonCode2;
         xScoreModel.REASON_CODE_3:=xReasonCode3;
         xScoreModel.REASON_CODE_4:=xReasonCode4;
         xScoreModel.REASON_CODE_5:=xReasonCode5;
		 xScoreModel.IS_SCORE_MODEL_DECISION:=false;


         for every Application.CreditApplication.PersonalApplicant.SCORES relative to CreditApplication do
                  Attach(SCORES,xScoreModel);
         endfor 
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_CalculatePCR4Score" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="true" Name="xScorable" Type="boolean"/>
<Local InitialValue="0.0" Name="xCh212" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xSubmodel" Type="string"/>
<Local InitialValue="null" Name="xPCR4_Score" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_Score" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_Prob" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_LogOdds" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_REV601d1" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_REV501d3" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_REV501d0" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_REP601d0" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_REP501d0" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_ILN503d3" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_ILN503d1" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_ILN503d0" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_BAC503d1" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_BAC503d0" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Clean_Score" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Clean_Prob" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Clean_LogOdds" Type="numeric"/>
<Local InitialValue="0.0" Name="xCh240" Type="numeric"/>
<Local InitialValue="0.0" Name="xCh220" Type="numeric"/>
<Local InitialValue="0.0" Name="xCh213" Type="numeric"/>
<Local InitialValue="0.0" Name="xCh410" Type="numeric"/>
<Local InitialValue="0.0" Name="xCh110" Type="numeric"/>
<Local InitialValue="0.0" Name="xCh120" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_RTR401" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_RTR078" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_RTL901" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_REV044" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_REP081" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_ILN804" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_ILN116" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_ILN102" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_FIN801" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_CAP801" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_BAC908" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_BAC901" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_BAC801" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_BAC078" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_ALL804" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_ALL740" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_ALL702" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_ALL701" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_ALL301" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_ALL146" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_ALL084" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_ALL052" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_ALL022" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_ALE908" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_ALE801" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Derog_ALE001" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Clean_REV901" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Clean_REP908" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Clean_ILN901" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Clean_ILN022" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Clean_BAC908" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Clean_BAC045" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Clean_ALL804" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Clean_ALL062" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Clean_ALL021" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4_Clean_ALE908" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xPCR4_Channel" Type="string"/>
</Locals>
<Description>Calculates PCR4 score value</Description>
<ExpressionText>//retrieve value
for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
            xScorable := PersonalApplicantOutput.isScorable;
endfor

//retrieve PCR4 score
if( NOT xScorable) then
               for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do
         				     xPCR4_Score := SCORES.PCR4;
               endfor        
endif
 
 for every Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES relative to PersonalApplicant do
             xPCR4_Channel := CreditApplication.T_CHANNEL_CODE;

             xPCR4_Clean_ALE908 := dm_ValidateValue(ALE908, 0, 10);
             xPCR4_Clean_ALL021 := dm_ValidateValue(ALL021, 0, 3);
             xPCR4_Clean_ALL062 := dm_ValidateValue(ALL062, 0, 15);
             xPCR4_Clean_ALL804 := dm_ValidateValue(ALL804, 0, 7);
             xPCR4_Clean_BAC045 := dm_ValidateValue(BAC045, 0, 1);
             xPCR4_Clean_BAC908 := dm_ValidateValue(BAC908, 0, 100);
             xPCR4_Clean_ILN022 := dm_ValidateValue(ILN022, 0, 2);
             xPCR4_Clean_ILN901 := dm_ValidateValue(ILN901, 0, 100);
             xPCR4_Clean_REP908 := dm_ValidateValue(REP908, 0, 33);
             xPCR4_Clean_REV901 := dm_ValidateValue(REV901, 0, 100);
             
             xPCR4_Derog_ALE001 := dm_ValidateValue(ALE001, 0, 6);
             xPCR4_Derog_ALE801 := dm_ValidateValue(ALE801, 0, 1);
             xPCR4_Derog_ALE908 := dm_ValidateValue(ALE908, 0, 50);
             xPCR4_Derog_ALL022 := dm_ValidateValue(ALL022, 0, 5);
             xPCR4_Derog_ALL052 := dm_ValidateValue(ALL052, 0, 1);
             xPCR4_Derog_ALL084 := dm_ValidateValue(ALL084, 0, 20);
             xPCR4_Derog_ALL146 := dm_ValidateValue(ALL146, 0, 1);
             xPCR4_Derog_ALL301 := dm_ValidateValue(ALL301, 0, 250000);
             xPCR4_Derog_ALL701 := dm_ValidateValue(ALL701, 0, 300);
             xPCR4_Derog_ALL702 := dm_ValidateValue(ALL702, 0, 80);
             xPCR4_Derog_ALL740 := dm_ValidateValue(ALL740, 0, 20);
             xPCR4_Derog_ALL804 := dm_ValidateValue(ALL804, 0, 7);
             xPCR4_Derog_BAC078 := dm_ValidateValue(BAC078, 0, 3);
             xPCR4_Derog_BAC801 := dm_ValidateValue(BAC801, 0, 3);
             xPCR4_Derog_BAC901 := dm_ValidateValue(BAC901, 0, 100);
             xPCR4_Derog_BAC908 := dm_ValidateValue(BAC908, 0, 100);
             xPCR4_Derog_CAP801 := dm_ValidateValue(CAP801, 0, 1);
             xPCR4_Derog_FIN801 := dm_ValidateValue(FIN801, 0, 3);
             xPCR4_Derog_ILN102 := dm_ValidateValue(ILN102, 0, 5);
             xPCR4_Derog_ILN116 := dm_ValidateValue(ILN116, 0, 1);
             xPCR4_Derog_ILN804 := dm_ValidateValue(ILN804, 0, 3);
             xPCR4_Derog_REP081 := dm_ValidateValue(REP081, 0, 1);
             xPCR4_Derog_REV044 := dm_ValidateValue(REV044, 0, 3);
             xPCR4_Derog_RTL901 := dm_ValidateValue(RTL901, 0, 100);
             xPCR4_Derog_RTR078 := dm_ValidateValue(RTR078, 0, 2);
             xPCR4_Derog_RTR401 := dm_ValidateValue(RTR401, 0, 5000);
             

             if( BAC503 = 0 ) then xPCR4_Derog_BAC503d0 := 1; endif
             if( BAC503 = 1 ) then xPCR4_Derog_BAC503d1 := 1; endif
             if( ILN503 = 0 ) then xPCR4_Derog_ILN503d0 := 1; endif
             if( ILN503 = 1 ) then xPCR4_Derog_ILN503d1 := 1; endif
             if( InNumberList(ILN503, "30, 34, 60, 90, 120, 150, 180", ",") ) then xPCR4_Derog_ILN503d3 := 1; endif
             if( REP501 = 0 ) then xPCR4_Derog_REP501d0 := 1; endif
             if( REP601 = 0 ) then xPCR4_Derog_REP601d0 := 1; endif
             if( REV501 = 0 ) then xPCR4_Derog_REV501d0 := 1; endif
             if( InNumberList(REV501, "30, 34, 60, 90, 120, 150, 180", ",") ) then xPCR4_Derog_REV501d3 := 1; endif
             if( REV601 = 1 ) then xPCR4_Derog_REV601d1 := 1; else xPCR4_Derog_REV601d1 := 0; endif
	
	
	BAC503d0:=xPCR4_Derog_BAC503d0;
	BAC503d1:=xPCR4_Derog_BAC503d1;
	ILN503d0:=xPCR4_Derog_ILN503d0;
	ILN503d1:=xPCR4_Derog_ILN503d1;
	ILN503d3:=xPCR4_Derog_ILN503d3;
	REP501d0:=xPCR4_Derog_REP501d0;
	REP601d0:=xPCR4_Derog_REP601d0;
	REV501d0:=xPCR4_Derog_REV501d0;
	REV501d3:=xPCR4_Derog_REV501d3;
	REV601d1:=xPCR4_Derog_REV601d1;

             //Assign Clean or Derog
             if (ALL081 &lt;= 0) then xSubmodel := "Clean"; else xSubmodel := "Derog"; endif
             
             //Assign channel values. 
             if ( xPCR4_Channel = "212" ) then xCh212 := 1; endif
             if ( xPCR4_Channel = "120" ) then xCh120 := 1; endif
             if ( xPCR4_Channel = "110" ) then xCh110 := 1; endif
             if ( xPCR4_Channel = "410" ) then xCh410 := 1; endif
             if ( xPCR4_Channel = "213" ) then xCh213 := 1; endif
             if ( xPCR4_Channel = "220" ) then xCh220 := 1; endif
             if ( xPCR4_Channel = "240" ) then xCh240 := 1; endif
                           
             
             if (xSubmodel = "Clean" and xScorable) then 
                         //CLEAN
                         // Score Calculation 
                         xPCR4_Clean_LogOdds := -0.448022 + 
                                                        ( xPCR4_Clean_ALE908 * ( -0.010598 )) + 
                                                        ( xPCR4_Clean_ALL021 * ( 0.1252704 )) + 
                                                        ( xPCR4_Clean_ALL062 * ( -0.058832 )) + 
                                                        ( xPCR4_Clean_ALL804 * ( 0.1722149 )) + 
                                                        ( xPCR4_Clean_BAC045 * ( 0.5491862 )) + 
                                                        ( xPCR4_Clean_BAC908 * ( -0.011906 )) + 
                                                        ( xPCR4_Clean_ILN022 * ( 0.0783878 )) + 
                                                        ( xPCR4_Clean_ILN901 * ( -0.006033 )) + 
                                                        ( xPCR4_Clean_REP908 * ( -0.022714 )) + 
                                                        ( xPCR4_Clean_REV901 * ( -0.010845 )) + 
                                                        ( xCh212 * ( 0.1436213 )) + 
                                                        ( xCh120 * ( -0.681342 )) + 
                                                        ( xCh110 * ( -0.540263 )) + 
                                                        ( xCh410 * ( -0.796259 )) + 
                                                        ( xCh213 * ( -1.895837 )) + 
                                                        ( xCh220 * ( 0.8881439 )) + 
                                                        ( xCh240 * ( 0.8881439 ));
                                
                         xPCR4_Clean_Prob := 1 - Exp(xPCR4_Clean_LogOdds)/(1 + Exp(xPCR4_Clean_LogOdds));
                         xPCR4_Clean_Score :=  xPCR4_Clean_Prob * 1000 ; //Fix rounding issue to nearest 0.1
                         xPCR4_Clean_Score := dm_Decimal_Round(xPCR4_Clean_Score, 10);

                         xPCR4_Score := Round(xPCR4_Clean_Score); 
             else if  (xSubmodel = "Derog" and xScorable) then
                         //DEROG
                         // Score Calculation
                         xPCR4_Derog_LogOdds := 0.3135736 + 
                                                     ( xPCR4_Derog_ALE001 * ( -0.052029 )) + 
                                                     ( xPCR4_Derog_ALE801 * (  -0.11273 )) + 
                                                     ( xPCR4_Derog_ALE908 * ( -0.003903 )) + 
                                                     ( xPCR4_Derog_ALL022 * ( 0.0688578 )) + 
                                                     ( xPCR4_Derog_ALL052 * ( 0.2697169 )) + 
                                                     ( xPCR4_Derog_ALL084 * ( 0.0250423 )) + 
                                                     ( xPCR4_Derog_ALL146 * ( -0.256476 )) + 
                                                     ( xPCR4_Derog_ALL301 * ( -0.00000361 )) + 
                                                     ( xPCR4_Derog_ALL701 * ( -0.002372 )) + 
                                                     ( xPCR4_Derog_ALL702 * ( -0.002278 )) + 
                                                     ( xPCR4_Derog_ALL740 * ( -0.014457 )) + 
                                                     ( xPCR4_Derog_ALL804 * ( 0.1012543 )) + 
                                                     ( xPCR4_Derog_BAC078 * ( -0.113965 )) + 
                                                     ( xPCR4_Derog_BAC801 * ( 0.0350093 )) + 
                                                     ( xPCR4_Derog_BAC901 * ( -0.001938 )) + 
                                                     ( xPCR4_Derog_BAC908 * ( -0.005679 )) + 
                                                     ( xPCR4_Derog_CAP801 * ( -0.106779 )) + 
                                                     ( xPCR4_Derog_FIN801 * ( 0.0618298 )) + 
                                                     ( xPCR4_Derog_ILN102 * ( -0.062217 )) + 
                                                     ( xPCR4_Derog_ILN116 * ( -0.135327 )) + 
                                                     ( xPCR4_Derog_ILN804 * ( -0.092353 )) + 
                                                     ( xPCR4_Derog_REP081 * ( -0.104738 )) + 
                                                     ( xPCR4_Derog_REV044 * (  0.061238 )) + 
                                                     ( xPCR4_Derog_RTL901 * ( -0.001973 )) + 
                                                     ( xPCR4_Derog_RTR078 * ( -0.084938 )) + 
                                                     ( xPCR4_Derog_RTR401 * ( -0.000087 )) + 
                                                     ( xPCR4_Derog_BAC503d0 * ( 0.0674267 )) + 
                                                     ( xPCR4_Derog_BAC503d1 * ( -0.293883 )) + 
                                                     ( xPCR4_Derog_ILN503d0 * ( 0.1998753 )) + 
                                                     ( xPCR4_Derog_ILN503d1 * ( -0.150614 )) + 
                                                     ( xPCR4_Derog_ILN503d3 * ( -0.102037 )) + 
                                                     ( xPCR4_Derog_REP501d0 * ( 0.1681424 )) + 
                                                     ( xPCR4_Derog_REP601d0 * ( -0.233072 )) + 
                                                     ( xPCR4_Derog_REV501d0 * (  0.080209 )) + 
                                                     ( xPCR4_Derog_REV501d3 * ( -0.252998 )) + 
                                                     ( xPCR4_Derog_REV601d1 * ( -0.152181 )) + 
                                                     ( xCh212 * ( 0.0057367 )) + 
                                                     ( xCh120 * ( -0.577571 )) + 
                                                     ( xCh110 * (   -0.4011 )) + 
                                                     ( xCh410 * (  -0.85806 )) + 
                                                     ( xCh213 * ( -1.240582 )) + 
                                                     ( xCh220 * ( 0.0836999 )) + 
                                                     ( xCh240 * ( 0.0836999 ));
                                 
                         xPCR4_Derog_Prob := 1 - (exp(xPCR4_Derog_LogOdds)/(1 + exp(xPCR4_Derog_LogOdds)));
                         xPCR4_Derog_Score := xPCR4_Derog_Prob * 1000; //Rounding to nearest 0.1
                         xPCR4_Derog_Score := dm_Decimal_Round(xPCR4_Derog_Score, 10);

                         xPCR4_Score := Round(xPCR4_Derog_Score); 
             endif endif
 
endfor


//set score value
 for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do

                if(xPCR4_Score &lt;&gt; null) then
                        //set Score Value
                        SCORES.PCR4 := xPCR4_Score;
                endif
 endfor
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_BusinessSummary" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xBureauName" Type="string"/>
</Locals>
<Description>Summarizing Business Bureau</Description>
<ExpressionText>//Assign the Bureau Name
for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business relative to BusinessApplicant do 

          for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.EFBDataSource.Response.Output.EfxTransmit relative to business do 
                    if(efxInternalTranId &lt;&gt; null and Trim(efxInternalTranId) &lt;&gt; "")then
                              xBureauName := "EFX";
                    endif
          endfor

          //check for XPB if EFX is not present
          if(xBureauName = null OR TRIM(xBureauName) = "") then
                    for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.NetConnectResponse relative to business do 
                              if(NetConnectResponse. TransactionId &lt;&gt; null and Trim(NetConnectResponse. TransactionId) &lt;&gt; "")then
                                        xBureauName:="XPB";
                              endif
                    endfor   
           endif
endfor

//Assign Bureau Name
for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do 
          BusinessApplicantOutput.businessBureauName := xBureauName;
endfor 


//Summarize Bureau values. 
if(xBureauName = "EFX") then
                            dm_BusinessSummaryEFB;

else if(xBureauName = "XPB") then
                           dm_BusinessSummaryXPB;
endif endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_AdverseActionCleanSegment" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xBureauName" Type="string"/>
<Local InitialValue="0.0" Name="xREV901" Type="numeric"/>
<Local InitialValue="0.0" Name="xREP908" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN901" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN022" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC908" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC045" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL804" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL062" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL021" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE908" Type="numeric"/>
<Local InitialValue="0.0" Name="xLNScore" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR6" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV901_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV901_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xREP908_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xREP908_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN901_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN901_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN022_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN022_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC908_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC908_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC045_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC045_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL804_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL804_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL062_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL062_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL021_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL021_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE908_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE908_m" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xSubmodel" Type="string"/>
<Local InitialValue="null" Name="xAdverseActionList" Type="AdverseActionList"/>
<Local InitialValue="null" Name="xAdverseAction" Type="AdverseAction"/>
</Locals>
<Description>Adverse action logic</Description>
<ExpressionText>result:=null;
xAdverseActionList:=new AdverseActionList;

			 
for every Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES relative to PersonalApplicant do

	xALE908 := dm_ValidateValue(ALE908, 0, 10);
	xALL021 := dm_ValidateValue(ALL021, 0, 3);
	xALL062 := dm_ValidateValue(ALL062, 0, 15);
	xALL804 := dm_ValidateValue(ALL804, 0, 7);
	xBAC045 := dm_ValidateValue(BAC045, 0, 1);
	xBAC908 := dm_ValidateValue(BAC908, 0, 100);
	xILN022 := dm_ValidateValue(ILN022, 0, 2);
	xILN901 := dm_ValidateValue(ILN901, 0, 100);
	xREP908 := dm_ValidateValue(REP908, 0, 33);
	xREV901 := dm_ValidateValue(REV901, 0, 100);
	//Assign Clean or Derog
	if (ALL081 &lt;= 0) then xSubmodel := "Clean"; else xSubmodel := "Derog"; endif
	
	//Clean Submodel logic for Adverse Action
	if(xSubmodel="Clean")then

		xALE908_m:=2;
		xALL021_m:=1;
		xALL062_m:=5;
		xALL804_m:=2;
		xBAC045_m:=0;
		xBAC908_m:=35;
		xILN022_m:=0;
		xILN901_m:=50;
		xREP908_m:=5;
		xREV901_m:=70;
		
		xALE908_b:=-0.010598;
		xALL021_b:=0.1252704;
		xALL062_b:=-0.058832;
		xALL804_b:=0.1722149;
		xBAC045_b:=0.5491862;
		xBAC908_b:=-0.011906;
		xILN022_b:=0.0783878;
		xILN901_b:=-0.006033;
		xREP908_b:=-0.022714;
		xREV901_b:=-0.010845;
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALE908";
		xAdverseAction.Weighted_Mean:=xALE908_m*xALE908_b;
		xAdverseAction.Weighted_Actual:=xALE908*xALE908_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="1";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL021";
		xAdverseAction.Weighted_Mean:=xALL021_m*xALL021_b;
		xAdverseAction.Weighted_Actual:=xALL021*xALL021_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="2";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL062";
		xAdverseAction.Weighted_Mean:=xALL062_m*xALL062_b;
		xAdverseAction.Weighted_Actual:=xALL062*xALL062_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="3";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL804";
		xAdverseAction.Weighted_Mean:=xALL804_m*xALL804_b;
		xAdverseAction.Weighted_Actual:=xALL804*xALL804_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="4";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="BAC045";
		xAdverseAction.Weighted_Mean:=xBAC045_m*xBAC045_b;
		xAdverseAction.Weighted_Actual:=xBAC045*xBAC045_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="5";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="BAC908";
		xAdverseAction.Weighted_Mean:=xBAC908_m*xBAC908_b;
		xAdverseAction.Weighted_Actual:=xBAC908*xBAC908_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="6";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ILN022";
		xAdverseAction.Weighted_Mean:=xILN022_m*xILN022_b;
		xAdverseAction.Weighted_Actual:=xILN022*xILN022_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="7";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ILN901";
		xAdverseAction.Weighted_Mean:=xILN901_m*xILN901_b;
		xAdverseAction.Weighted_Actual:=xILN901*xILN901_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="8";
		Attach(xAdverseActionList,xAdverseAction);
			
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="REP908";
		xAdverseAction.Weighted_Mean:=xREP908_m*xREP908_b;
		xAdverseAction.Weighted_Actual:=xREP908*xREP908_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="9";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="REV901";
		xAdverseAction.Weighted_Mean:=xREV901_m*xREV901_b;
		xAdverseAction.Weighted_Actual:=xREV901*xREV901_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="10";
		Attach(xAdverseActionList,xAdverseAction);

	endif

	//Clean Submodel logic for Adverse Action
	if(xSubmodel="Derog")then
	endif
	
endfor

if(xSubmodel="Clean")then
	for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do
		if(SCORES.PCR4&lt;&gt;null) then
			xPCR4:=SCORES.PCR4;
		endif
		if(SCORES.PCR6&lt;&gt;null)then
			xPCR6:=SCORES.PCR6;
		endif
		if(SCORES.LNScore&lt;&gt;null)then
			xLNScore:=SCORES.LNScore;
		endif
		if(SCORES.BureauName&lt;&gt;null)then
			xBureauName:=SCORES.BureauName;
		endif
	endfor
		xAdverseActionList.AABureauName:=xBureauName;
		xAdverseActionList.PCRV4Score:=xPCR4;
		xAdverseActionList.PCRV6Score:=xPCR6;
		xAdverseActionList.LNScore:=xLNScore;

for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
	Attach(PersonalApplicantOutput,xAdverseActionList);
endfor


for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.AdverseActionList.AdverseAction relative to PersonalApplicant do
	if(InStringList(AdverseAction.Variable,"ALE801, ALL804, BAC801, CAP801, FIN801, ILN804", ","))then
		AdverseAction.INQ:="Y"
	else
		AdverseAction.INQ:="N"
	endif
endfor
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_BriskOrUndrWrtng" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="0" Name="xNumOfEmployees" Type="numeric"/>
<Local InitialValue="0" Name="xReqNumOfLines" Type="numeric"/>
</Locals>
<Description>Is the Application BRISK or Underwriting</Description>
<ExpressionText>result:="1";

if(CreditApplication.requestedNumberOfLines &lt;&gt; null and CreditApplication.requestedNumberOfLines&gt;0)then
	xReqNumOfLines:=requestedNumberOfLines;
endif

For Every Application.CreditApplication.BusinessApplicant relative to CreditApplication do 
	if (BusinessApplicant.numberOfEmployees&lt;&gt;null and BusinessApplicant.numberOfEmployees&gt;0)then
  		xNumOfEmployees:=BusinessApplicant.numberOfEmployees;
  	endif
endfor

if(xReqNumOfLines &gt;25 or xNumOfEmployees&gt;25)then
	result:="BVRUW";
else
	result:="BVRBRISK";
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesALL" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xMaximum" Type="numeric"/>
</Locals>
<Description>calculates ALL Attributes</Description>
<ExpressionText>          result := null;

          //ALL001
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.ALL001 := iBUREAU_ATTRIBUTES.ALL001 + 1;
          endif

          //ALL002
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.ALL002 := iBUREAU_ATTRIBUTES.ALL002 + 1;
          endif

          //ALL003
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN) then
                iBUREAU_ATTRIBUTES.ALL003 := iBUREAU_ATTRIBUTES.ALL003 + 1;
          endif

          //ALL005
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.ALL005 := iBUREAU_ATTRIBUTES.ALL005 + 1;
          endif

          //ALL006
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.ALL006 := iBUREAU_ATTRIBUTES.ALL006 + 1;
          endif

          //ALL007
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN) then
                iBUREAU_ATTRIBUTES.ALL007 := iBUREAU_ATTRIBUTES.ALL007 + 1;
          endif

          //ALL010
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.ALL010 := iBUREAU_ATTRIBUTES.ALL010 + 1;
          endif

          //ALL021
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 6) then
                iBUREAU_ATTRIBUTES.ALL021 := iBUREAU_ATTRIBUTES.ALL021 + 1;
          endif

          //ALL022
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 12) then
                iBUREAU_ATTRIBUTES.ALL022 := iBUREAU_ATTRIBUTES.ALL022 + 1;
          endif

          //ALL023
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 24) then
                iBUREAU_ATTRIBUTES.ALL023 := iBUREAU_ATTRIBUTES.ALL023 + 1;
          endif

          //ALL024
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 12) then
                iBUREAU_ATTRIBUTES.ALL024 := iBUREAU_ATTRIBUTES.ALL024 + 1;
          endif

          //ALL026
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.ALL026 := iBUREAU_ATTRIBUTES.ALL026 + 1;
          endif

          //ALL051
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND 
                                                         ((iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT_PAST_DUE &gt; 0) OR 
                                                           (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE &gt; 0 ))
                                                         AND (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CLOSED)
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.ALL051 := iBUREAU_ATTRIBUTES.ALL051 + 1;
          endif

          //ALL052
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND 
                                                         ((iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT_PAST_DUE &gt; 0) OR 
                                                           (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE &gt; 0 )) 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.ALL052 := iBUREAU_ATTRIBUTES.ALL052 + 1;
          endif

          //ALL062
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS = 1
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.ALL062 := iBUREAU_ATTRIBUTES.ALL062 + 1;
          endif

          //ALL064
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt;= 30
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.ALL064 := iBUREAU_ATTRIBUTES.ALL064 + 1;
          endif

          //ALL067
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS &gt;= 90
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.ALL067 := iBUREAU_ATTRIBUTES.ALL067 + 1;
          endif

          //ALL071
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) = 1) then
                iBUREAU_ATTRIBUTES.ALL071 := iBUREAU_ATTRIBUTES.ALL071 + 1;
          endif
       
          //ALL074
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 34) then
                iBUREAU_ATTRIBUTES.ALL074 := iBUREAU_ATTRIBUTES.ALL074 + 1;
          endif

          //ALL075
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30) then
                iBUREAU_ATTRIBUTES.ALL075 := iBUREAU_ATTRIBUTES.ALL075 + 1;
          endif

          //ALL076
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 60) then
                iBUREAU_ATTRIBUTES.ALL076 := iBUREAU_ATTRIBUTES.ALL076 + 1;
          endif

          //ALL077
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) = 60) then
                iBUREAU_ATTRIBUTES.ALL077 := iBUREAU_ATTRIBUTES.ALL077 + 1;
          endif

          //ALL078
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 60) then
                iBUREAU_ATTRIBUTES.ALL078 := iBUREAU_ATTRIBUTES.ALL078 + 1;
          endif

          //ALL080
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 90 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 180) then
                iBUREAU_ATTRIBUTES.ALL080 := iBUREAU_ATTRIBUTES.ALL080 + 1;
          endif

          //ALL081
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 90) then
                iBUREAU_ATTRIBUTES.ALL081 := iBUREAU_ATTRIBUTES.ALL081 + 1;
          endif

          //ALL082
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30 AND
                                                         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 24) then
                iBUREAU_ATTRIBUTES.ALL082 := iBUREAU_ATTRIBUTES.ALL082 + 1;
          endif

          //ALL084
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER = 400) then
                iBUREAU_ATTRIBUTES.ALL084 := iBUREAU_ATTRIBUTES.ALL084 + 1;
          endif

          //ALL085
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 = 400) then
                iBUREAU_ATTRIBUTES.ALL085 := iBUREAU_ATTRIBUTES.ALL085 + 1;
          endif

          //ALL086
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 = 400) then
                iBUREAU_ATTRIBUTES.ALL086 := iBUREAU_ATTRIBUTES.ALL086 + 1;
          endif

          //ALL090
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_BANKRUPTCY = 1) then
                iBUREAU_ATTRIBUTES.ALL090 := iBUREAU_ATTRIBUTES.ALL090 + 1;
          endif

          //ALL092
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_90NOCOL = 1) then
                iBUREAU_ATTRIBUTES.ALL092 := iBUREAU_ATTRIBUTES.ALL092 + 1;
          endif

          //ALL091
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_DRGNOCOL = 1) then
                iBUREAU_ATTRIBUTES.ALL091 := iBUREAU_ATTRIBUTES.ALL091 + 1;
          endif

          //ALL101
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 = 1) then
                iBUREAU_ATTRIBUTES.ALL101 := iBUREAU_ATTRIBUTES.ALL101 + 1;
          endif

          //ALL102
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 = 1) then
                iBUREAU_ATTRIBUTES.ALL102 := iBUREAU_ATTRIBUTES.ALL102 + 1;
          endif

          //ALL103
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &lt;= 34) then
                iBUREAU_ATTRIBUTES.ALL103 := iBUREAU_ATTRIBUTES.ALL103 + 1;
          endif

          //ALL104
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 30) then
                iBUREAU_ATTRIBUTES.ALL104 := iBUREAU_ATTRIBUTES.ALL104 + 1;
          endif

          //ALL105
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &lt;= 34) then
                iBUREAU_ATTRIBUTES.ALL105 := iBUREAU_ATTRIBUTES.ALL105 + 1;
          endif

          //ALL106
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &gt;= 30) then
                iBUREAU_ATTRIBUTES.ALL106 := iBUREAU_ATTRIBUTES.ALL106 + 1;
          endif

          //ALL107
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &lt;= 60) then
                iBUREAU_ATTRIBUTES.ALL107 := iBUREAU_ATTRIBUTES.ALL107 + 1;
          endif

          //ALL108
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &lt;= 60) then
                iBUREAU_ATTRIBUTES.ALL108 := iBUREAU_ATTRIBUTES.ALL108 + 1;
          endif

          //ALL109
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &lt;= 60) then
                iBUREAU_ATTRIBUTES.ALL109 := iBUREAU_ATTRIBUTES.ALL109 + 1;
          endif

          //ALL110
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 = 60) then
                iBUREAU_ATTRIBUTES.ALL110 := iBUREAU_ATTRIBUTES.ALL110 + 1;
          endif

          //ALL111
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 = 60) then
                iBUREAU_ATTRIBUTES.ALL111 := iBUREAU_ATTRIBUTES.ALL111 + 1;
          endif

          //ALL112
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 = 90) then
                iBUREAU_ATTRIBUTES.ALL112 := iBUREAU_ATTRIBUTES.ALL112 + 1;
          endif

          //ALL113
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 90 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &lt;= 180) then
                iBUREAU_ATTRIBUTES.ALL113 := iBUREAU_ATTRIBUTES.ALL113 + 1;
          endif

          //ALL114
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 90) then
                iBUREAU_ATTRIBUTES.ALL114 := iBUREAU_ATTRIBUTES.ALL114 + 1;
          endif

          //ALL115
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &gt;= 90) then
                iBUREAU_ATTRIBUTES.ALL115 := iBUREAU_ATTRIBUTES.ALL115 + 1;
          endif

          //ALL116
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &gt;= 90 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &lt;= 180) then
                iBUREAU_ATTRIBUTES.ALL116 := iBUREAU_ATTRIBUTES.ALL116 + 1;
          endif

          //ALL117
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &gt;= 30 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &lt;= 34) then
                iBUREAU_ATTRIBUTES.ALL117 := iBUREAU_ATTRIBUTES.ALL117 + 1;
          endif

          //ALL118
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 120) then
                iBUREAU_ATTRIBUTES.ALL118 := iBUREAU_ATTRIBUTES.ALL118 + 1;
          endif

          //ALL119
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 = 60) then
                iBUREAU_ATTRIBUTES.ALL119 := iBUREAU_ATTRIBUTES.ALL119 + 1;
          endif

          //ALL122
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &gt;= 90 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &lt;= 180) then
                iBUREAU_ATTRIBUTES.ALL122 := iBUREAU_ATTRIBUTES.ALL122 + 1;
          endif

          //ALL124
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD6 &gt;= 60) then
                iBUREAU_ATTRIBUTES.ALL124 := iBUREAU_ATTRIBUTES.ALL124 + 1;
          endif

          //ALL125
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12 &gt;= 60) then
                iBUREAU_ATTRIBUTES.ALL125 := iBUREAU_ATTRIBUTES.ALL125 + 1;
          endif

          //ALL126
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 = 1) then
                iBUREAU_ATTRIBUTES.ALL126 := iBUREAU_ATTRIBUTES.ALL126 + 1;
          endif

          //ALL127
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &gt;= 30) then
                iBUREAU_ATTRIBUTES.ALL127 := iBUREAU_ATTRIBUTES.ALL127 + 1;
          endif

          //ALL128
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &gt;= 60) then
                iBUREAU_ATTRIBUTES.ALL128 := iBUREAU_ATTRIBUTES.ALL128 + 1;
          endif

          //ALL129
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 &gt;= 90) then
                iBUREAU_ATTRIBUTES.ALL129 := iBUREAU_ATTRIBUTES.ALL129 + 1;
          endif

          //ALL130
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24 = 400) then
                iBUREAU_ATTRIBUTES.ALL130 := iBUREAU_ATTRIBUTES.ALL130 + 1;
          endif

          //ALL131
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX  AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECTION AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC 
                                                                AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER = 400) then
                iBUREAU_ATTRIBUTES.ALL131 := iBUREAU_ATTRIBUTES.ALL131 + 1;
          endif

          //ALL134
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX 
                                                                AND (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLL_INT OR (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLL_EXT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT &gt; 250))
                                                                AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.ALL134 := iBUREAU_ATTRIBUTES.ALL134 + 1;
          endif

          //ALL136
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECTION AND (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CLOSED)) then
                iBUREAU_ATTRIBUTES.ALL136 := iBUREAU_ATTRIBUTES.ALL136 + 1;
          endif

          //ALL141
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LEGAL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_DEROG) then
                iBUREAU_ATTRIBUTES.ALL141 := iBUREAU_ATTRIBUTES.ALL141 + 1;
          endif

          //ALL142
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LEGAL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_DEROG AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_FILE &lt;= 12) then
                iBUREAU_ATTRIBUTES.ALL142 := iBUREAU_ATTRIBUTES.ALL142 + 1;
          endif

          //ALL143
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LEGAL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT &gt; 250 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_DEROG) then
                iBUREAU_ATTRIBUTES.ALL143 := iBUREAU_ATTRIBUTES.ALL143 + 1;
          endif

          //ALL144
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LEGAL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_DEROG AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_FILE &lt;= 24) then
                iBUREAU_ATTRIBUTES.ALL144 := iBUREAU_ATTRIBUTES.ALL144 + 1;
          endif

          //ALL145
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LEGAL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_UNSAT) then
                iBUREAU_ATTRIBUTES.ALL145 := iBUREAU_ATTRIBUTES.ALL145 + 1;
          endif

          //ALL146
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LEGAL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BK_STATUS) then
                iBUREAU_ATTRIBUTES.ALL146 := iBUREAU_ATTRIBUTES.ALL146 + 1;
          endif

/*
//Moved logic as we arent supposed to truncate values at filters. 
          //ALL201
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.ALL201 := iBUREAU_ATTRIBUTES.ALL201 + iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE;
          endif

          //ALL207
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LEGAL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_UNSAT) then
                iBUREAU_ATTRIBUTES.ALL207 := iBUREAU_ATTRIBUTES.ALL207 + iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
          endif

          //ALL208
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.ALL208 := iBUREAU_ATTRIBUTES.ALL208 + iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHLY_PAYMENT;
          endif

          //ALL301
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.ALL301 := iBUREAU_ATTRIBUTES.ALL301 + iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
          endif

*/

          //ALL501
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                xMaximum := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD);
                iBUREAU_ATTRIBUTES.ALL501 := MAX(iBUREAU_ATTRIBUTES.ALL501, xMaximum);
          endif

          //ALL502
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.ALL502 := MAX(iBUREAU_ATTRIBUTES.ALL502, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12);
          endif

          //ALL503
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.ALL503 := MAX(iBUREAU_ATTRIBUTES.ALL503, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24);
          endif

          //ALL504
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 36) then
                xMaximum := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD);
                iBUREAU_ATTRIBUTES.ALL504 := MAX(iBUREAU_ATTRIBUTES.ALL504, xMaximum);
          endif

          //ALL505
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 12) then
                xMaximum := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD);
                iBUREAU_ATTRIBUTES.ALL505 := MAX(iBUREAU_ATTRIBUTES.ALL505, xMaximum);
          endif

          //ALL601
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN) then
                iBUREAU_ATTRIBUTES.ALL601 := MAX(iBUREAU_ATTRIBUTES.ALL601, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS);
          endif

          //ALL602
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 24) then
                iBUREAU_ATTRIBUTES.ALL602 := MAX(iBUREAU_ATTRIBUTES.ALL602, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS);
          endif

          //ALL701
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 9998) then
                iBUREAU_ATTRIBUTES.ALL701 := MAX(iBUREAU_ATTRIBUTES.ALL701, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN);
          endif

          //ALL702
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 9998) then
                iBUREAU_ATTRIBUTES.ALL702 := MIN(iBUREAU_ATTRIBUTES.ALL702, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN);
          endif

          //ALL720
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL &lt;= 9998) then
                iBUREAU_ATTRIBUTES.ALL720 := MIN(iBUREAU_ATTRIBUTES.ALL720, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL);
          endif

          //ALL724
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36 &lt;= 9998) then
                iBUREAU_ATTRIBUTES.ALL724 := MIN(iBUREAU_ATTRIBUTES.ALL724, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36);
          endif

          //ALL740
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P &lt;= 9998) then
                iBUREAU_ATTRIBUTES.ALL740 := MIN(iBUREAU_ATTRIBUTES.ALL740, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P);
          endif

          //ALL760
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER = 400 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_STATUS &lt;= 9998) then
                iBUREAU_ATTRIBUTES.ALL760 := MIN(iBUREAU_ATTRIBUTES.ALL760, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_STATUS);
          endif

          //ALL780
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LEGAL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_DEROG2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_FILE &lt;= 9998) then
                iBUREAU_ATTRIBUTES.ALL780 := MIN(iBUREAU_ATTRIBUTES.ALL780, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_FILE);
          endif

          //ALL790
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LEGAL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BK_FILED AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_FILE &lt;= 9998) then
                iBUREAU_ATTRIBUTES.ALL790 := MIN(iBUREAU_ATTRIBUTES.ALL790, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_FILE);
          endif

          //ALL801
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY) then
                iBUREAU_ATTRIBUTES.ALL801 := iBUREAU_ATTRIBUTES.ALL801 + 1;
          endif 

          //ALL803
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_INQ &lt;= 6) then
                iBUREAU_ATTRIBUTES.ALL803 := iBUREAU_ATTRIBUTES.ALL803 + 1;
          endif

          //ALL804
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_INQ &lt;= 12) then
                iBUREAU_ATTRIBUTES.ALL804 := iBUREAU_ATTRIBUTES.ALL804 + 1;
          endif

          //ALL805
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_INQ &lt;= 9998) then
                iBUREAU_ATTRIBUTES.ALL805 := MIN(iBUREAU_ATTRIBUTES.ALL805, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_INQ);
          endif

          //ALL806
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY AND (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_INQ &lt;= 6 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_DAYS_INQ &gt; 14)) then
                iBUREAU_ATTRIBUTES.ALL806 := iBUREAU_ATTRIBUTES.ALL806 + 1;
          endif

          //ALL807
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY AND (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_INQ &lt;= 12 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_DAYS_INQ &gt; 14)) then
                iBUREAU_ATTRIBUTES.ALL807 := iBUREAU_ATTRIBUTES.ALL807 + 1;
          endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsTUTradeline" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Generate filters for TU Tradeline</Description>
<ExpressionText>    result := null;
  
 
    //IND-CODE
    if(iNORMALIZED_BUREAU_SEGMENTS.INDUSTRY_CODE &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.INDUSTRY_CODE) &lt;&gt; "")then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE := Left(iNORMALIZED_BUREAU_SEGMENTS.INDUSTRY_CODE,  1); 
    else
      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE := "";
    endif
  
    //TR_TR
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR := false;
    if( iNORMALIZED_BUREAU_SEGMENTS.SEGMENT_TYPE = "TR11"  OR  iNORMALIZED_BUREAU_SEGMENTS.SEGMENT_TYPE = "TR") then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR := true;
    endif

    //COLLECT-SEG
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG := false;
    if( iNORMALIZED_BUREAU_SEGMENTS.SEGMENT_TYPE = "CL11"  OR  iNORMALIZED_BUREAU_SEGMENTS.SEGMENT_TYPE = "CL") then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG := true;
    endif
  
    //TRADE
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; "Y") then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE := true;
    endif
  
    //TRADE2
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR AND 
                        ((iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) &lt;&gt; "" AND VAL(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) &gt;= 0) OR 
         (iNORMALIZED_BUREAU_SEGMENTS.PAST_DUE_AMT &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.PAST_DUE_AMT) &lt;&gt; "" AND VAL(iNORMALIZED_BUREAU_SEGMENTS.PAST_DUE_AMT) &gt;= 0))) then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 := true;
   
    else if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG AND (iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) &lt;&gt; "" AND VAL(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) &gt;= 0))then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 := true;
    endif  endif

  
    //TRADEX
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG) then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX := true;
    endif
 
 
    //VALID_DATE_CLOSED
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_DATE_CLOSED := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR AND 
        (iNORMALIZED_BUREAU_SEGMENTS.DATE_CLOSED_IND &lt;&gt; null  AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.DATE_CLOSED_IND, "F, C", ",")) AND
        (iNORMALIZED_BUREAU_SEGMENTS.DATE_CLOSED &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.DATE_CLOSED) &lt;&gt; "")) then
              iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_DATE_CLOSED := true;
    endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_ParseBureauData" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="string"/>
</Inputs>
<Locals>
<Local InitialValue="null" Name="xNormalizedSegmentObject" Type="NORMALIZED_BUREAU_SEGMENTS"/>
<Local InitialValue="null" Name="xBureauAttributes" Type="BUREAU_ATTRIBUTES"/>
</Locals>
<Description>Parse Bureau data</Description>
<ExpressionText>result := null;

for every Application.CreditApplication.PersonalApplicant relative to CreditApplication do

          //set to null for every applicant
          xBureauAttributes := null;
          
    
          //calculate Profile Date timestamp
          //xProfileDate := dm_formatDate(iProfileDate);

          //create BureauAttributes Object if not available
          for every Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES relative to PersonalApplicant do
                  xBureauAttributes := BUREAU_ATTRIBUTES;
                  //Attach(BUREAU_ATTRIBUTES, xNormalizedSegmentObject);
          endfor
    
         if(xBureauAttributes = null) then
                  xBureauAttributes := new BUREAU_ATTRIBUTES;
                  ATTACH(PersonalApplicant, xBureauAttributes);
         endif


         //Parse Tradelines
        for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.TradelineList.Tradeline relative to PersonalApplicant do

                       xNormalizedSegmentObject := new NORMALIZED_BUREAU_SEGMENTS;
                       //populate all the Tradeline data
                      dm_PopulateTradelineListData(xNormalizedSegmentObject);
                      //PROFILE_DATE
                     xNormalizedSegmentObject.STAGG_FF_PROFILE_DATE := iProfileDate;
     
                     ATTACH(xBureauAttributes, xNormalizedSegmentObject);
       endfor
    
    
         //Parse Collections
        for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.FDOCollectionList.FDOCollection relative to PersonalApplicant do

                       xNormalizedSegmentObject := new NORMALIZED_BUREAU_SEGMENTS;
                       //populate all the Tradeline data
                      dm_PopulateCollectionListData(xNormalizedSegmentObject);
                      //PROFILE_DATE
                     xNormalizedSegmentObject.STAGG_FF_PROFILE_DATE := iProfileDate;
     
                     ATTACH(xBureauAttributes, xNormalizedSegmentObject);
       endfor
    
    
         //Parse Public Records
        for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.PublicRecordList.PublicRecord relative to PersonalApplicant do

                       xNormalizedSegmentObject := new NORMALIZED_BUREAU_SEGMENTS;
                       //populate all the Tradeline data
                      dm_PopulatePublicRecordListData(xNormalizedSegmentObject);
                      //PROFILE_DATE
                     xNormalizedSegmentObject.STAGG_FF_PROFILE_DATE := iProfileDate;
     
                     ATTACH(xBureauAttributes, xNormalizedSegmentObject);
       endfor


endfor




</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput" Name="dm_getOpenTMDelqStatus" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Open TM ChargeOff or Delinquency AND Bankruptcy in last 7 yrs</Description>
<ExpressionText>result:="PASS";
//No Open Charge Off AND No Bankruptcy in 7 yrs
if((BusinessApplicantOutput.BusIsBkInLast7Yrs &lt;&gt; null and BusinessApplicantOutput.BusIsBkInLast7Yrs="PASS") OR (BusinessApplicantOutput.NEGAvailable &lt;&gt; null and BusinessApplicantOutput.NEGAvailable="true"))then
	result:="FAIL";
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesCAP" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>calculates CAP Attributes</Description>
<ExpressionText>          result := null;

          //CAP026
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CAP AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.CAP026 := iBUREAU_ATTRIBUTES.CAP026 + 1;
          endif

          //CAP801
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CAP_INQ) then
                iBUREAU_ATTRIBUTES.CAP801 := iBUREAU_ATTRIBUTES.CAP801 + 1;
          endif 

</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_set_CreditClass1" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Set Credit class to 1</Description>
<ExpressionText>for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do
	BusinessApplicantOutput.INITIAL_CREDIT_CLASS := "1";
endfor
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_PCRv4ScoreModel" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="null" Name="xReportDate" Type="timestamp"/>
<Local InitialValue="null" Name="xScoreModel" Type="SCORE_MODEL"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode5" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode4" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode3" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode2" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode1" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xBureauName" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreName" Type="string"/>
<Local InitialValue="0" Name="xScoreValue" Type="numeric"/>
</Locals>
<Description>Populate Score model object with PCRv4 score.</Description>
<ExpressionText>result:=null;

for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.AdverseActionList relative to PersonalApplicant do
	if(AdverseActionList.PCRV4Score&lt;&gt;null )then
		xScoreName:="PCRv4";
		xScoreValue:=PCRV4Score;
		xBureauName:=AABureauName;
	endif
endfor 
for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.AdverseActionResultSet.AdverseActionRecordSet relative to PersonalApplicant do
	if(Rank=1)then
		xReasonCode1:=AdverseActionRecordSet.ReasonCode;
	else if(Rank=2)then
		xReasonCode2:=AdverseActionRecordSet.ReasonCode;
	else if(Rank=3)then
		xReasonCode3:=AdverseActionRecordSet.ReasonCode;
	else if(Rank=4)then
		xReasonCode4:=AdverseActionRecordSet.ReasonCode;
	else if(Rank=5)then
		xReasonCode5:=AdverseActionRecordSet.ReasonCode;
	endif
	endif
	endif
	endif
	endif
endfor
if(xBureauName="TU")then
	for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList relative to PersonalApplicant do
		if(ReportDate&lt;&gt;null and ReportDate&lt;&gt;"")then
			//xReportDate:=dm_GetParsedDateYYYYMM(ParsedResponseList.ReportDate);  Existing data method defaults day to 01
			xReportDate:=TimestampFromStr(Trim(ReportDate ));
		endif
	endfor
endif
if(xBureauName="EFX")then
	for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList relative to PersonalApplicant do
		if(ReportDate&lt;&gt;null and ReportDate&lt;&gt;"")then
			//xReportDate:=dm_GetParsedDateYYYYMM(ParsedResponseList.ReportDate);  Existing data method defaults day to 01
			xReportDate:=TimestampFromStr(Trim(ReportDate) );
		endif
	endfor
endif		

/*for every Application.CreditApplication.PersonalApplicant.SCORES.SCORE_MODEL relative to PersonalApplicant do
	xScoreModel:=SCORE_MODEL;
	if(xScoreModel=null) then
		xScoreModel:=dm_ScoreModelObject;
	endif
 endfor*/
 
xScoreModel:= new SCORE_MODEL;
xSCoreModel.SCORE_NAME:=xScoreName;
xScoreModel.SCORE_VALUE:=xScoreValue;
xScoreModel.BUREAU_NAME:=xBureauName;
xScoreModel.REPORT_DATE:=TimestampToDate( xReportDate);
xScoreModel.REASON_CODE_1:=xReasonCode1;
xScoreModel.REASON_CODE_2:=xReasonCode2;
xScoreModel.REASON_CODE_3:=xReasonCode3;
xScoreModel.REASON_CODE_4:=xReasonCode4;
xScoreModel.REASON_CODE_5:=xReasonCode5;
xScoreModel.IS_SCORE_MODEL_DECISION:=false;

for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do
	Attach(SCORES,xScoreModel);
endfor </ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_SetBusinessGamingVelocityAlert" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xGamingVelocity" Type="string"/>
<Local InitialValue="null" Name="xFRAUD_ALERTS" Type="FRAUD_ALERTS"/>
<Local InitialValue="null" Name="xOTHERS" Type="OTHERS"/>
</Locals>
<Description>Gaming Velocity Fraud Alert</Description>
<ExpressionText>result := null;

xGamingVelocity := "N";
for every Application.CreditApplication.CreditApplicationOutput relative to CreditApplication do
if(CreditApplicationOutput.GamingVelocityCounter &lt;&gt; null AND CreditApplicationOutput.GamingVelocityCounter&gt;= dm_GamingVelocityLimit) then
               xGamingVelocity := "Y";
endif
endfor

for every Application.CreditApplication.BusinessApplicant relative to CreditApplication do
            //Initialize FRAUD_ALERTS
            for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput.FRAUD_ALERTS relative to BusinessApplicant do
                        xFRAUD_ALERTS := FRAUD_ALERTS;
            endfor

            //Attach OTHERS
            if(xFRAUD_ALERTS = null)then
                        xFRAUD_ALERTS := new FRAUD_ALERTS;
                        xOTHERS := new OTHERS;

                        for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do 
                                    Attach(xFRAUD_ALERTS,xOTHERS);
                                    Attach(BusinessApplicantOutput, xFRAUD_ALERTS);
                        endfor
            endif
endfor


for every Application.CreditApplication.BusinessApplicant relative to CreditApplication do
            for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput.FRAUD_ALERTS.OTHERS relative to BusinessApplicant do
                          OTHERS.ScoreFlagGamingVelocity := xGamingVelocity;
            endfor
endfor




result := xGamingVelocity;</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_PIDCodeLogic" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="null" Name="xPID" Type="PID"/>
<Local InitialValue="0" Name="xPIdScore" Type="numeric"/>
<Local InitialValue="false" Name="xSSN_VerificationResult" Type="boolean"/>
<Local InitialValue="false" Name="xPhone_VerificationResult" Type="boolean"/>
<Local InitialValue="false" Name="xSSN_IssueResult" Type="boolean"/>
<Local InitialValue="false" Name="xPhone_HighRiskResult" Type="boolean"/>
<Local InitialValue="false" Name="xAddress_VerificationResult" Type="boolean"/>
<Local InitialValue="false" Name="xDOB_MatchResult" Type="boolean"/>
<Local InitialValue="false" Name="xFS_Indicator" Type="boolean"/>
<Local InitialValue="false" Name="xAddress_HighRiskResult" Type="boolean"/>
</Locals>
<Description>Set PID Code Logic for use in Fraud Box</Description>
<ExpressionText>result:="1";

For Every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.XPNPIDDataSource.Response.Output.PIDExperian.FraudSolutions.PIDProducts.PIDPreciseIDServer relative to PersonalApplicant do

For Every 
Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.XPNPIDDataSource.Response.Output.PIDExperian.FraudSolutions.PIDProducts.PIDPreciseIDServer.PIDSummary.PIDScores relative to PIDPreciseIDServer do
 if(PIDScores.PreciseIDScore &lt;&gt; null and PIDScores.PreciseIDScore&lt;&gt;"") then
  xPIdScore:=val(PIDScores.PreciseIDScore);
 endif
 endfor

//PID Address Check Logic
For Every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.XPNPIDDataSource.Response.Output.PIDExperian.FraudSolutions.PIDProducts.PIDPreciseIDServer.PreciseMatch.Addresses.PIDAddress.PIDSummary.HighRiskResult relative to PIDPreciseIDServer do
 If(HighRiskResult.code&lt;&gt;null and HighRiskResult.code&lt;&gt;"")then
  if(HighRiskResult.code="YA")then
   xAddress_HighRiskResult:=true;
  endif
 endif
endfor

For Every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.XPNPIDDataSource.Response.Output.PIDExperian.FraudSolutions.PIDProducts.PIDPreciseIDServer.PreciseMatch.Addresses.PIDAddress.PIDSummary.VerificationResult relative to PIDPreciseIDServer do
 If(VerificationResult.code&lt;&gt;null and VerificationResult.code&lt;&gt;"")then
  if( not InStringList(VerificationResult.code,"A2,A5,A7,A8,AC,AF,AG,AH,AJ,AK,AU,AV,C1,C2,C7,C8,CC,CU,D1,D2,D7,D8,DC,DU,H2,H5,H7,H8,HC,HF,HG,HH,HJ,HK,HU,HV,I1,I2,I7,I8,IC,IU,P1,P2,P7,P8,PC,PU,Q2,Q5,Q7,Q8,QC,QF,QG,QH,QJ,QK,QU,QV,R1,R2,R7,R8,RC,RU,A1,B,BB,BM,H1,Q1,YB ",",") )then
   xAddress_VerificationResult:=true;
  endif
 endif
endfor

//PID phone Check Logic
For Every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.XPNPIDDataSource.Response.Output.PIDExperian.FraudSolutions.PIDProducts.PIDPreciseIDServer.PreciseMatch.Phones.PIDPhones.PIDSummary.HighRiskResult relative to PIDPreciseIDServer do
 If(HighRiskResult.code&lt;&gt;null and HighRiskResult.code&lt;&gt;"")then
  if(HighRiskResult.code="YP")then
   xPhone_HighRiskResult:=true;
  endif
 endif
endfor 

For Every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.XPNPIDDataSource.Response.Output.PIDExperian.FraudSolutions.PIDProducts.PIDPreciseIDServer.PreciseMatch.Phones.PIDPhones.PIDSummary.VerificationResult relative to PIDPreciseIDServer do
 If(VerificationResult.code&lt;&gt;null and VerificationResult.code&lt;&gt;"")then
  if( not InStringList(VerificationResult.code,"EA,EB,EC,ED,EE,EF,EG,EH,EI,EJ,EL,EN,EO,EP,CA,CB,CC,CD,CE,CF,CG,CH,PA,PB,PC,PD,PE,PF,PG,PH",",") )then
   xPhone_VerificationResult:=true;
  endif
 endif
endfor 

//PID SSN Check Logic
For Every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.XPNPIDDataSource.Response.Output.PIDExperian.FraudSolutions.PIDProducts.PIDPreciseIDServer.PreciseMatch.ConsumerID.PIDSummary.VerificationResult relative to PIDPreciseIDServer do
 If(VerificationResult.code&lt;&gt;null and VerificationResult.code&lt;&gt;"")then
  if( InStringList(VerificationResult.code,"FF,FY,S,SA,YA,YB,Y",",") )then
   xSSN_VerificationResult:=true;
  endif
 endif
endfor 

For Every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.XPNPIDDataSource.Response.Output.PIDExperian.FraudSolutions.PIDProducts.PIDPreciseIDServer.PreciseMatch.ConsumerID.PIDSummary.IssueResult relative to PIDPreciseIDServer do
 If(IssueResult.code&lt;&gt;null and IssueResult.code&lt;&gt;"")then
  if( InStringList(IssueResult.code,"I,P",",") )then
   xSSN_IssueResult:=true;
  endif
 endif
endfor 

//PID DOB Check Logic
For Every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.XPNPIDDataSource.Response.Output.PIDExperian.FraudSolutions.PIDProducts.PIDPreciseIDServer.PreciseMatch.DateOfBirth.PIDSummary.MatchResult relative to PIDPreciseIDServer do
 If(MatchResult.code&lt;&gt;null and MatchResult.code&lt;&gt;"")then
  if( InStringList(MatchResult.code,"9,B,E,1",",") )then
   xDOB_MatchResult:=true;
  endif
 endif
endfor 

//PID FraudShield Check Logic
For Every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.XPNPIDDataSource.Response.Output.PIDExperian.FraudSolutions.PIDProducts.PIDPreciseIDServer.PIDGLBDetail.PIDFraudShield.Indicator relative to PIDPreciseIDServer do
 If( (Indicator.code&lt;&gt;null and Indicator.code&lt;&gt;"") and (Indicator.value&lt;&gt;null and Indicator.value&lt;&gt;"") )then
  if( (Indicator.code="05" and Indicator.value="Y") OR
        (Indicator.code="13" and Indicator.value="Y") OR
        (Indicator.code="14" and Indicator.value="Y") OR
        (Indicator.code="25" and Indicator.value="Y") ) then
   xFS_Indicator:=true;
  endif
 endif
endfor 
endfor

/*------------------------------------------------------------------------------------------------------------------------------------------------*/
For Every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS Relative to PersonalApplicant do

xPID:= new PID;

xPID.PID_SCORE:=xPIdScore;

//PID_ADDRESS FLAG
if( xAddress_VerificationResult and xAddress_HighRiskResult) then
 xPID.PID_ADDRESS:="FAIL";
else
 xPID.PID_ADDRESS:="PASS";
endif

//PID_PHONE FLAG
if( xPhone_VerificationResult or xPhone_HighRiskResult) then
 xPID.PID_PHONE:="FAIL";
else
 xPID.PID_PHONE:="PASS";
endif

//PID_SSN FLAG
if( xSSN_VerificationResult or xSSN_IssueResult) then
 xPID.PID_SSN:="PASS";
else
 xPID.PID_SSN:="FAIL";
endif

//PID_DOB FLAG
if( xDOB_MatchResult) then
 xPID.PID_DOB:="PASS";
else
 xPID.PID_DOB:="FAIL";
endif

//PID_FS FLAG
if( xFS_Indicator) then
 xPID.PID_FRAUD_SHIELD:="FAIL";
else
 xPID.PID_FRAUD_SHIELD:="PASS";
endif

attach(FRAUD_ALERTS, xPID);
endfor

for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do
if(xPIdScore &lt;&gt; -999) then
SCORES.PreciseIDScore := xPIdScore;
endif

endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsEFXGroupFilters" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Generate filters for EFX Group filters</Description>
<ExpressionText>    result := null;
  

    //AUTO
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AUTO := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT) then
           if( (InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AO, DY", ",") OR InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AO, DY", ",")) OR
                    (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TYPE = "I" AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE, "AN, AU, AL, FA", ",")  AND 
                                                  (NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AF, BT, DN, EB, IB, IC, ID", ",") AND NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AF, BT, DN, EB, IB, IC, ID", ",")) ) ) then
    
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AUTO := true;
    endif endif
    

    //ALE
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT) then
           if( (InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AO, DY", ",") OR InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AO, DY", ",")) OR
                    ((InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AF, BT, DN, EB, IB, IC, ID", ",") OR InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AF, BT, DN, EB, IB, IC, ID", ",")) AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT &gt;= 5000) OR
                    (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TYPE = "I" AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE, "AN, AU, AL, FA", ",")) ) then
           iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE := true;
    endif endif


    //CAP
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CAP := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT) then
           if( (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE = "FA") OR
                    (InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AO, DY", ",") OR InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AO, DY", ",")) OR
                    ((InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AF, BT, DN, EB, IB, IC, ID", ",") OR InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AF, BT, DN, EB, IB, IC, ID", ",")) AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT &gt;= 5000)  ) then
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CAP := true;
    endif endif

    //BNK
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BNK := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "B" AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BNK := true;    
    endif


    //BAC
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "B" OR InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE, "FC, FS, ON", ",")) AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TYPE = "R") then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC := true;    
    endif

    //RTL
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL := false;
  if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND (InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE, "C, D, H, J, S, T", ",") OR InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE, "AP, AT, LH, LP, LY, SG, ZR, ZZ", ",")) AND 
                                               (NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AR, AS, BR, CH, DG, DJ, DM, DT, EC, ED, EF, GP, HP, HQ, HR, HS, HU", ",") AND NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AR, AS, BR, CH, DG, DJ, DM, DT, EC, ED, EF, GP, HP, HQ, HR, HS, HU", ","))) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL := true;    
    endif

    //RTR
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR := true;    
    endif


    //RTI
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTI := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTI := true;    
    endif

    //FIL
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIL := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE, "FA, FF, FP, FZ", ",") AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND
                               (NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "BU, DQ, EG, EH", ",") AND NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "BU, DQ, EG, EH", ",")) ) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIL := true;    
    endif


    //FIN
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIN := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE, "FA, FF, FP, FZ", ",") AND (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING) AND
                               (NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "BU, DQ, EG, EH", ",") AND NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "BU, DQ, EG, EH", ",")) ) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIN := true;    
    endif


    //LFI
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LFI := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE, "FP", ",") AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL AND
                               (NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "BU, DQ, EG, EH", ",") AND NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "BU, DQ, EG, EH", ",")) ) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LFI := true;    
    endif


    //CRU
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CRU := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE = "FC") then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CRU := true;    
    endif

    //REF
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REF := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND 
                                      ((InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AR, DT, EF, FM, HP, HQ, HR, HU, BR, CH, DM, DJ, ED, GP", ",") OR InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AR, DT, EF, FM, HP, HQ, HR, HU, BR, CH, DM, DJ, ED, GP", ",")) 
                                                                 OR  iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INST_TERMS &gt;= 180)) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REF := true;    
    endif


    //HEQ
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_HEQ := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND 
                                      (InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AS, DG, EC, HS", ",") OR InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AS, DG, EC, HS", ","))  ) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_HEQ := true;    
    endif


    //BRR
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BRR := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BRR := true;
    endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesRTL" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xMaximum" Type="numeric"/>
</Locals>
<Description>calculates RTL Attributes</Description>
<ExpressionText>          result := null;

          //RTL001
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.RTL001 := iBUREAU_ATTRIBUTES.RTL001 + 1;
          endif

          //RTL002
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.RTL002 := iBUREAU_ATTRIBUTES.RTL002 + 1;
          endif

          //RTL005
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.RTL005 := iBUREAU_ATTRIBUTES.RTL005 + 1;
          endif

          //RTL026
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.RTL026 := iBUREAU_ATTRIBUTES.RTL026 + 1;
          endif

          //RTL071
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) = 1) then
                iBUREAU_ATTRIBUTES.RTL071 := iBUREAU_ATTRIBUTES.RTL071 + 1;
          endif
       
          //RTL074
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 34) then
                iBUREAU_ATTRIBUTES.RTL074 := iBUREAU_ATTRIBUTES.RTL074 + 1;
          endif

          //RTL075
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30) then
                iBUREAU_ATTRIBUTES.RTL075 := iBUREAU_ATTRIBUTES.RTL075 + 1;
          endif

          //RTL076
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 60) then
                iBUREAU_ATTRIBUTES.RTL076 := iBUREAU_ATTRIBUTES.RTL076 + 1;
          endif

          //RTL077
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) = 60) then
                iBUREAU_ATTRIBUTES.RTL077 := iBUREAU_ATTRIBUTES.RTL077 + 1;
          endif

          //RTL078
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 60) then
                iBUREAU_ATTRIBUTES.RTL078 := iBUREAU_ATTRIBUTES.RTL078 + 1;
          endif

          //RTL080
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 90 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 180) then
                iBUREAU_ATTRIBUTES.RTL080 := iBUREAU_ATTRIBUTES.RTL080 + 1;
          endif

          //RTL081
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 90) then
                iBUREAU_ATTRIBUTES.RTL081 := iBUREAU_ATTRIBUTES.RTL081 + 1;
          endif

          //RTL084
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER = 400) then
                iBUREAU_ATTRIBUTES.RTL084 := iBUREAU_ATTRIBUTES.RTL084 + 1;
          endif

          //RTL501
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                xMaximum := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD);
                iBUREAU_ATTRIBUTES.RTL501 := MAX(iBUREAU_ATTRIBUTES.RTL501, xMaximum);
          endif

          //RTL502
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.RTL502 := MAX(iBUREAU_ATTRIBUTES.RTL502, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12);
          endif

          //RTL503
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.RTL503 := MAX(iBUREAU_ATTRIBUTES.RTL503, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24);
          endif

</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsTUDates" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals>
<Local InitialValue="null" Name="xDateVerified" Type="timestamp"/>
<Local InitialValue="null" Name="xPaymentPatternStartDate" Type="timestamp"/>
</Locals>
<Description>Generate filters for TU Dates</Description>
<ExpressionText>    result := null;
  
   

    //MONTHS-OPEN
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN := 9999;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true) then
          if(iNORMALIZED_BUREAU_SEGMENTS.DATE_OPENED &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.DATE_OPENED) &lt;&gt; "") then
                    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN := TimestampDiff("months", iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.DATE_OPENED));
          else
                    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN := 9999;
          endif
    else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG = true) then
          if(iNORMALIZED_BUREAU_SEGMENTS.DATE_OPENED &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.DATE_OPENED) &lt;&gt; "") then
                    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN := TimestampDiff("months", iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.DATE_OPENED));
          else
                    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN := 9999;
          endif
    endif endif



    //MONTHS-STATUS
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_STATUS := 9999;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true) then
          xDateVerified := dm_formatDate(iNORMALIZED_BUREAU_SEGMENTS.DATE_VERIFIED);
    xPaymentPatternStartDate := dm_formatDate(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_START_DATE);
          if(xDateVerified &lt;&gt; xPaymentPatternStartDate) then
                   if( TimestampDiff("days", xDateVerified, xPaymentPatternStartDate) &gt; 0) then
                             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_STATUS := TimestampDiff("months",  iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.DATE_VERIFIED));
                   else
                             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_STATUS := TimestampDiff("months",  iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_START_DATE));
                   endif

          else
                    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_STATUS := 9999;
          endif
    else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG = true) then
          if(iNORMALIZED_BUREAU_SEGMENTS.DATE_OPENED &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.DATE_OPENED) &lt;&gt; "") then
                    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_STATUS := TimestampDiff("months", iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.DATE_OPENED));
          else
                    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_STATUS := 9999;
          endif
    endif endif


    //MONTHS-RPTED
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_STATUS;
</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_GetInterpretedTUGridValue" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iValue" Type="string"/>
</Inputs>
<Locals/>
<Description>Get the interpreted grid value for GRD2</Description>
<ExpressionText>result := 0;

if(iValue = null) then
         result := 0;
else if(iValue = "1") then
         result := 1;
else if(iValue = "2") then
         result := 30;
else if(iValue = "3") then
         result := 60;
else if(iValue = "4") then
         result := 90;
else if(iValue = "5") then
         result := 120;
endif endif endif endif endif endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_DeterminePhoneTier" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xPhoneTier" Type="string"/>
</Locals>
<Description>Determine the Phone tier of an Applicant</Description>
<ExpressionText>result := "";

for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.NeustarDataSource.Response.Output.batchQueryResponse.NeustarElement.NeustarResults relative to PersonalApplicant do 
        if(NeustarResults.PhoneTier &lt;&gt; null and Trim(NeustarResults.PhoneTier) = "A")then
                xPhoneTier := NeustarResults.PhoneTier;
        endif
endfor

 for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
         if(xPhoneTier &lt;&gt; null and xPhoneTier = "A") then
                PersonalApplicantOutput.phoneTier := xPhoneTier ;
        endif
endfor

if(xPhoneTier &lt;&gt; null and TRIM(xPhoneTier) &lt;&gt; "") then
       result := xPhoneTier;
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_isScorable" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>isScorable Y/N indicator</Description>
<ExpressionText>result := "N";

for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do

                if(PersonalApplicantOutput.isScorable &lt;&gt; null AND PersonalApplicantOutput.isScorable = true) then
                                 result := "Y";
                endif

endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesRTR" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xMaximum" Type="numeric"/>
</Locals>
<Description>calculates RTR Attributes</Description>
<ExpressionText>          result := null;

          //RTR001
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.RTR001 := iBUREAU_ATTRIBUTES.RTR001 + 1;
          endif

          //RTR002
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.RTR002 := iBUREAU_ATTRIBUTES.RTR002 + 1;
          endif

          //RTR005
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.RTR005 := iBUREAU_ATTRIBUTES.RTR005 + 1;
          endif

          //RTR007
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN) then
                iBUREAU_ATTRIBUTES.RTR007 := iBUREAU_ATTRIBUTES.RTR007 + 1;
          endif

          //RTR022
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 12) then
                iBUREAU_ATTRIBUTES.RTR022 := iBUREAU_ATTRIBUTES.RTR022 + 1;
          endif
    
          //RTR023
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 24) then
                iBUREAU_ATTRIBUTES.RTR023 := iBUREAU_ATTRIBUTES.RTR023 + 1;
          endif 

          //RTR026
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.RTR026 := iBUREAU_ATTRIBUTES.RTR026 + 1;
          endif

          //RTR028
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &gt;= 6) then
                iBUREAU_ATTRIBUTES.RTR028 := iBUREAU_ATTRIBUTES.RTR028 + 1;
          endif

          //RTR031
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE &gt; 0 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.RTR031 := iBUREAU_ATTRIBUTES.RTR031 + 1;
          endif

          //RTR035
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE &gt;= 1000 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.RTR035 := iBUREAU_ATTRIBUTES.RTR035 + 1;
          endif

          //RTR044
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BTL &gt;= 90 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.RTR044 := iBUREAU_ATTRIBUTES.RTR044 + 1;
          endif

          //RTR071
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) = 1) then
                iBUREAU_ATTRIBUTES.RTR071 := iBUREAU_ATTRIBUTES.RTR071 + 1;
          endif
       
          //RTR074
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 34) then
                iBUREAU_ATTRIBUTES.RTR074 := iBUREAU_ATTRIBUTES.RTR074 + 1;
          endif

          //RTR075
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30) then
                iBUREAU_ATTRIBUTES.RTR075 := iBUREAU_ATTRIBUTES.RTR075 + 1;
          endif

          //RTR076
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 60) then
                iBUREAU_ATTRIBUTES.RTR076 := iBUREAU_ATTRIBUTES.RTR076 + 1;
          endif

          //RTR077
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) = 60) then
                iBUREAU_ATTRIBUTES.RTR077 := iBUREAU_ATTRIBUTES.RTR077 + 1;
          endif

          //RTR078
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 60) then
                iBUREAU_ATTRIBUTES.RTR078 := iBUREAU_ATTRIBUTES.RTR078 + 1;
          endif

          //RTR080
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 90 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 180) then
                iBUREAU_ATTRIBUTES.RTR080 := iBUREAU_ATTRIBUTES.RTR080 + 1;
          endif

          //RTR081
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 90) then
                iBUREAU_ATTRIBUTES.RTR081 := iBUREAU_ATTRIBUTES.RTR081 + 1;
          endif

          //RTR084
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER = 400) then
                iBUREAU_ATTRIBUTES.RTR084 := iBUREAU_ATTRIBUTES.RTR084 + 1;
          endif

          //RTR303
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.RTR303 := MAX(iBUREAU_ATTRIBUTES.RTR303, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT);
          endif

          //RTR401
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT 
                                                         AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.RTR401 := iBUREAU_ATTRIBUTES.RTR401 +  iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AVAILABLE_CREDIT;
          endif

          //RTR501
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                xMaximum := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD);
                iBUREAU_ATTRIBUTES.RTR501 := MAX(iBUREAU_ATTRIBUTES.RTR501, xMaximum);
          endif

          //RTR601
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN) then
                iBUREAU_ATTRIBUTES.RTR601 := MAX(iBUREAU_ATTRIBUTES.RTR601, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS);
          endif

</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_PIDHit" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="false" Name="xFS_Indicator" Type="boolean"/>
<Local InitialValue="false" Name="xDOB_MatchResult" Type="boolean"/>
<Local InitialValue="false" Name="xSSN_IssueResult" Type="boolean"/>
<Local InitialValue="false" Name="xSSN_VerificationResult" Type="boolean"/>
<Local InitialValue="false" Name="xPhone_VerificationResult" Type="boolean"/>
<Local InitialValue="false" Name="xPhone_HighRiskResult" Type="boolean"/>
<Local InitialValue="false" Name="xAddress_VerificationResult" Type="boolean"/>
<Local InitialValue="false" Name="xAddress_HighRiskResult" Type="boolean"/>
</Locals>
<Description>Checks to see if PID call was successful</Description>
<ExpressionText>result:="N";


        //PID Address Check Logic
        for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.XPNPIDDataSource.Response.Output.PIDExperian.FraudSolutions.PIDProducts.PIDPreciseIDServer.PreciseMatch.Addresses.PIDAddress.PIDSummary.HighRiskResult relative to PersonalApplicant do
                If(HighRiskResult.code&lt;&gt;null and HighRiskResult.code&lt;&gt;"")then
                        xAddress_HighRiskResult:=true;
                endif
        endfor

        for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.XPNPIDDataSource.Response.Output.PIDExperian.FraudSolutions.PIDProducts.PIDPreciseIDServer.PreciseMatch.Addresses.PIDAddress.PIDSummary.VerificationResult relative to PersonalApplicant do
                If(VerificationResult.code&lt;&gt;null and VerificationResult.code&lt;&gt;"")then
                        xAddress_VerificationResult:=true;
                endif
        endfor

        //PID phone Check Logic
        for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.XPNPIDDataSource.Response.Output.PIDExperian.FraudSolutions.PIDProducts.PIDPreciseIDServer.PreciseMatch.Phones.PIDPhones.PIDSummary.HighRiskResult relative to PersonalApplicant do
                If(HighRiskResult.code&lt;&gt;null and HighRiskResult.code&lt;&gt;"")then
                        xPhone_HighRiskResult:=true;
                endif
        endfor	

        for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.XPNPIDDataSource.Response.Output.PIDExperian.FraudSolutions.PIDProducts.PIDPreciseIDServer.PreciseMatch.Phones.PIDPhones.PIDSummary.VerificationResult relative to PersonalApplicant do
                If(VerificationResult.code&lt;&gt;null and VerificationResult.code&lt;&gt;"")then
                        xPhone_VerificationResult:=true;
                endif
        endfor	

        //PID SSN Check Logic
        for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.XPNPIDDataSource.Response.Output.PIDExperian.FraudSolutions.PIDProducts.PIDPreciseIDServer.PreciseMatch.ConsumerID.PIDSummary.VerificationResult relative to PersonalApplicant do
                If(VerificationResult.code&lt;&gt;null and VerificationResult.code&lt;&gt;"")then
                        xSSN_VerificationResult:=true;
                endif
        endfor	

        for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.XPNPIDDataSource.Response.Output.PIDExperian.FraudSolutions.PIDProducts.PIDPreciseIDServer.PreciseMatch.ConsumerID.PIDSummary.IssueResult relative to PersonalApplicant do
                If(IssueResult.code&lt;&gt;null and IssueResult.code&lt;&gt;"")then
                        xSSN_IssueResult:=true;
                endif
        endfor	

        //PID DOB Check Logic
        for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.XPNPIDDataSource.Response.Output.PIDExperian.FraudSolutions.PIDProducts.PIDPreciseIDServer.PreciseMatch.DateOfBirth.PIDSummary.MatchResult relative to PersonalApplicant do
                If(MatchResult.code&lt;&gt;null and MatchResult.code&lt;&gt;"")then
                        xDOB_MatchResult:=true;
                endif
        endfor	

        //PID FraudShield Check Logic
        for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.XPNPIDDataSource.Response.Output.PIDExperian.FraudSolutions.PIDProducts.PIDPreciseIDServer.PIDGLBDetail.PIDFraudShield.Indicator relative to PersonalApplicant do
                If( (Indicator.code&lt;&gt;null and Indicator.code&lt;&gt;"") and (Indicator.value&lt;&gt;null and Indicator.value&lt;&gt;"") )then
                        xFS_Indicator:=true;
                endif
        endfor	


        /*------------------------------------------------------------------------------------------------------------------------------------------------*/

        //PID_ADDRESS FLAG
        if( xAddress_VerificationResult and 
                        xAddress_HighRiskResult and 
                        xPhone_VerificationResult and 
                        xPhone_HighRiskResult and
                        xSSN_VerificationResult and  xSSN_IssueResult and 
                        xDOB_MatchResult and  xFS_Indicator) then
                result:="Y";
        else
                result:="N";
        endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_GetMinimumDeltaAdverseObject" ResultType="AdverseAction" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iSegment" Type="string"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xAbsolute2" Type="numeric"/>
<Local InitialValue="0.0" Name="xAbsolute1" Type="numeric"/>
<Local InitialValue="0.0" Name="xParameter2" Type="numeric"/>
<Local InitialValue="0.0" Name="xParameter1" Type="numeric"/>
<Local InitialValue="null" Name="xAdverseAction" Type="AdverseAction"/>
</Locals>
<Description>Returns object for minimum delta for Adverse Action</Description>
<ExpressionText>result := null;

//loop through all the objects
for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.AdverseActionList.AdverseAction relative to PersonalApplicant do

             //check only for Rank defaulted to 0
             if(AdverseAction.Rank = 0) then
			              if(xAdverseAction = null OR xAdverseAction.Delta &gt; AdverseAction.Delta) then
                                       //if AdverseAction object is not initialized (first Object) or if the delta is greater than in loop.
                                       xAdverseAction := AdverseAction;
                          else if (xAdverseAction.Delta = AdverseAction.Delta) then
                                       //if the delta values are equal use the paramterised values

                                       xParameter1 := dm_GetVariableParameterValue(iSegment, xAdverseAction.Variable);
                                       xParameter2 := dm_GetVariableParameterValue(iSegment, AdverseAction.Variable);
                                       xAbsolute1 := dm_AbsoluteValue(xParameter1);
                                       xAbsolute2 := dm_AbsoluteValue(xParameter2);

                                       //if the absolute parameter value is highter - higher rank
                                       if(xAbsolute1 &lt; xAbsolute2) then
                                                    xAdverseAction := AdverseAction;
                                       endif
									   
                          endif
                          endif
                          
			 endif

endfor


result := xAdverseAction;</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_BusAppAutoVerify" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="0.0" Name="xCVINum" Type="numeric"/>
<Local InitialValue="0.0" Name="xBVINum" Type="numeric"/>
<Local InitialValue="0.0" Name="xCVIRISeq" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xCVIRIDes" Type="string"/>
<Local InitialValue="0.0" Name="xBVIRISeq" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xBVIRIDes" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xCVIRICode" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xBVIRICode" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xPRI" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xCVI" Type="string"/>
<Local InitialValue="50" Name="xAR2BVI" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xBVI" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xChannel" Type="string"/>
</Locals>
<Description>Calculate BusinessApplicantOutput.AUTO_VERIFY</Description>
<ExpressionText>result:=null;

//Assign channel to a local variable

for every Application.CreditApplication relative to Application do 
	xChannel := T_CHANNEL_CODE;
endfor 

//Assign BVI, AR2BVI, CVI, and Risk Indicator locals

for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.LNInstantIDBusinessDataSource.Response.Output.Envelope.Body.BusinessInstantIDResponseEx.response.Result.CompanyResults relative to Application do 
	xBVI := BusinessVerificationIndicator;
	xBVINum := Val(BusinessVerificationIndicator);
endfor 

for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.LNInstantIDBusinessDataSource.Response.Output.Envelope.Body.BusinessInstantIDResponseEx relative to Application do 
	xAR2BVI:=BusinessInstantIDResponseEx.AuthorizedRepresentativeRelationshipToCompany;
endfor 


for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.LNInstantIDBusinessDataSource.Response.Output.Envelope.Body.BusinessInstantIDResponseEx.response.Result.AuthorizedRepresentativeResults relative to Application do 
	xCVINum := ComprehensiveVerificationIndex;
endfor 

xPRI := "false";

for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.LNInstantIDBusinessDataSource.Response.Output.Envelope.Body.BusinessInstantIDResponseEx.response.Result.CompanyResults.RiskIndicators.RiskIndicator relative to Application do 
 if (RiskCode = "A0" or RiskCode = "A4" or RiskCode = "A5" or RiskCode = "A6" or RiskCode = "A7" or RiskCode = "11" or RiskCode = "14" or RiskCode = "15" or RiskCode = "29" or RiskCode = "30" or RiskCode = "31" or RiskCode = "43" or RiskCode = "50" or RiskCode = "76" or RiskCode = "88") then
	 xPRI := "true";
 endif
	xBVIRICode := RiskCode;
	xBVIRIDes := Description;
	xBVIRISeq := Sequence;
endfor 

for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.LNInstantIDBusinessDataSource.Response.Output.Envelope.Body.BusinessInstantIDResponseEx.response.Result.AuthorizedRepresentativeResults.RiskIndicators.RiskIndicator relative to Application do
 if (RiskCode = "A0" or RiskCode = "A4" or RiskCode = "A5" or RiskCode = "A6" or RiskCode = "A7" or RiskCode = "11" or RiskCode = "14" or RiskCode = "15" or RiskCode = "29" or RiskCode = "30" or RiskCode = "31" or RiskCode = "43" or RiskCode = "50" or RiskCode = "76" or RiskCode = "88") then
	xPRI := "true";
 endif
	xCVIRICode := RiskCode;
	xCVIRIDes := Description;
	xCVIRISeq := Sequence;
endfor 

//Assign output variables

for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to Application do 
AUTO_VERIFY := "No";
if (xChannel &lt;&gt; "410" and xChannel &lt;&gt; "120" and xChannel &lt;&gt; "220") then
 AUTO_VERIFY := "Bypass";
 else if ((xChannel = "410" or xChannel = "120" or xChannel = "220") and xBVINum &gt;= 40 and xAR2BVI = "50" and xPRI = "false") then
 AUTO_VERIFY := "Yes";
 endif
 endif
BVI := xBVI;
AR2BI := xAR2BVI;
CVI := NumStr(xCVINum);
CVI := Left(CVI,2);
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsTUMonthsAgo" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Generate filters for TU Months Ago</Description>
<ExpressionText>    result := null;
  

    //MONTHS-AGO
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_AGO := 0;
    if(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_START_DATE &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_START_DATE) &lt;&gt; "") then
             //Calculated Months diff
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_AGO := TimestampDiff("months", iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_START_DATE)) - 1;
    endif
	
	
    //Adjust Payment Pattern for future use. 
    iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED := dm_GetBlankSpaces(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_AGO) + iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT;
    iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED_6_MONTHS := LEFT(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED, 6);
    iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED_12_MONTHS := LEFT(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED, 12);
    iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED_24_MONTHS := LEFT(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED, 24);
</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_GetParsedDateYYYYMM" ResultType="timestamp" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iDate" Type="string"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xLength" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xDay" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xMonth" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xYear" Type="string"/>
</Locals>
<Description>formats a string YYYYMMDD to date YYYYMM01 </Description>
<ExpressionText>if(iDate &lt;&gt; null and Trim(iDate) &lt;&gt; "") then
          xLength := strlen(Trim(iDate));
endif

if (iDate = null or Trim(iDate) = "" or iDate = "00000000") then
        xDay  := "01";
       xMonth := "01";
       xYear := "1900" ;

 else if(xLength = 6 ) then       //Assume Equifax mmyyyy
        xDay := "01";
        xMonth := LEFT(iDate, 2);
        xYear := RIGHT (iDate,4); 


else if(xLength = 8 and iDate&gt;"19000000") then       //Assume yyyymmdd
        xDay := "01";
        xMonth := Mid(iDate,5,2);
        xYear := Left (iDate,4); 
  
else if(xLength = 8) then       //Assume mmddyyyy
       //xDay := Mid (iDate, 3,2);
       xDay := "01";
       xMonth := Left(iDate,2);
       xYear := Right (iDate,4);  

else if(xLength = 10 and (Instr("-", iDate, true)&lt;&gt;0)) then   //Assume yyyy-mm-dd
        xDay := "01";
        xMonth := Mid(iDate,6,2);
        xYear := Left (iDate,4);
  
endif  endif  endif endif endif
 
 
 result := TimestampfromStr(xYear + "-" + xMonth + "-" + xDay);</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesRTI" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>calculates RTI Attributes</Description>
<ExpressionText>          result := null;

          //RTI026
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.RTI026 := iBUREAU_ATTRIBUTES.RTI026 + 1;
          endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_setBYODCreditCCto_H" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="H" Name="xCreditClass" Type="string"/>
</Locals>
<Description>Sets the Credit Class to H</Description>
<ExpressionText>for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do 
		PersonalApplicantOutput.INITIAL_CREDIT_CLASS := xCreditClass;
		PersonalApplicantOutput.FINAL_CREDIT_CLASS := xCreditClass;
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_SetCCPRNoHit" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Sets INITIAL_CREDIT_CLASS = Y for PR applicant with no Equifax or TU</Description>
<ExpressionText>result:=null;

for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to Application do
INITIAL_CREDIT_CLASS := "Y";
endfor 
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput" Name="dm_BusinessTemplateCode" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Select Letter Template code to send back</Description>
<ExpressionText>

if(InStringList(BusinessApplicantOutput.FINAL_CREDIT_CLASS,"0,5,6,7",",")) then

CreditApplication.TEMPLATE_CODE:="NBC001";

endif

</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_set_FraudFlags" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xMessageCode" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreFlagSSNSUS4" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreFlagSSNSUS2" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreFlagSSNMIS" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreFlagSSNNI" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreFlagDEAD" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreFlagACTIVEDUTY" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreFlagCS" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreFlagVS" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreFlagGamingVelocity" Type="string"/>
</Locals>
<Description>To set Fraud flags for TU</Description>
<ExpressionText>xScoreFlagVS:="N";
xScoreFlagCS:="N";
xScoreFlagACTIVEDUTY:="N";
xScoreFlagDEAD:="N";
xScoreFlagSSNNI:="N";
xScoreFlagSSNMIS:="N";
xScoreFlagSSNSUS2:="N";
xScoreFlagSSNSUS4:="N";
xScoreFlagGamingVelocity := "N";

//TODO: SSN_SUSP3 is pending implementation.
for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.ConsumerStatementList.ConsumerStatement relative to PersonalApplicant do

if(ConsumerStatement.MessageCode&lt;&gt;null and TRIM(ConsumerStatement.MessageCode)&lt;&gt;"")then
 xMessageCode:=TRIM(ConsumerStatement.MessageCode);
endif

 if(InStringlist(xMessageCode,"02,06",","))then 
   xScoreFlagVS:="Y";
 endif
  if(xMessageCode="05")then 
   xScoreFlagVS:="Y";
 endif
  if(InStringlist(xMessageCode,"01,03,04",","))then 
   xScoreFlagCS:="Y";
 endif
  if(xMessageCode="07")then 
   xScoreFlagACTIVEDUTY:="Y";
 endif  
  if(xMessageCode="3003")then 
  xScoreFlagSSNMIS:="Y";
 endif
  if(xMessageCode="4001")then 
  xScoreFlagDEAD:="Y";
 endif
  if(xMessageCode="6000")then 
  xScoreFlagDEAD:="Y";
  endif
   if(xMessageCode="4501")then 
  xScoreFlagSSNNI:="Y";
 endif
 if(xMessageCode="3001")then 
  xScoreFlagSSNSUS2:="Y";
 endif
 if(xMessageCode="3501")then 
  xScoreFlagSSNSUS4:="Y";
 endif
 
  
 endfor



for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.FraudList.Fraud.MessageTextList.MessageText relative to PersonalApplicant do
if(MessageText.MessageCode&lt;&gt;null and TRIM(MessageText.MessageCode)&lt;&gt;"")then
 xMessageCode:=TRIM(MessageText.MessageCode);
endif

 if(xMessageCode="4501")then 
  xScoreFlagSSNNI:="Y";
 endif
 if(xMessageCode="3001")then 
  xScoreFlagSSNSUS2:="Y";
 endif
 if(xMessageCode="3501")then 
  xScoreFlagSSNSUS4:="Y";
 endif
 
 dm_ReturnOptional_AlertState(Trim(MessageText.MessageCode));
  
endfor


//Gaming Velocity
if(dm_get_GamingVelocityCounter&gt;= dm_GamingVelocityLimit) then
              xScoreFlagGamingVelocity := "Y";
endif



for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS relative to PersonalApplicantOutput do
 ScoreFlagVS:=xScoreFlagVS;
 ScoreFlagCS:=xScoreFlagCS;
 ScoreFlagACTIVEDUTY:=xScoreFlagACTIVEDUTY;
 ScoreFlagDEAD:=xScoreFlagDEAD;
 ScoreFlagSSNNI:=xScoreFlagSSNNI;
 ScoreFlagSSNMIS:=xScoreFlagSSNMIS;
 ScoreFlagSSNSUS2:=xScoreFlagSSNSUS2;
 ScoreFlagSSNSUS4:=xScoreFlagSSNSUS4;
 ScoreFlagPreciseID:="N";
 ScoreFlagGamingVelocity := xScoreFlagGamingVelocity;
endfor
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_SmartCreditQualified" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Smart Credit Qualified or Not</Description>
<ExpressionText>result:="N";

for every Application.CreditApplication relative to Application do
	if((CreditApplication.PORTCOMP&lt;&gt;null and Trim(CreditApplication.PORTCOMP)&lt;&gt;"" and  InStringList(CreditApplication.PORTCOMP,"SCNC,WFM,METRO,PREPAID",",")) and (CreditApplication.MSISDN&lt;&gt;null and Trim(CreditApplication.MSISDN)&lt;&gt;"" and StrLen(CreditApplication.MSISDN)=10))then
	result:="Y";
	endif
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_ReturnOptional_AlertState_Efx" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iIdentityScanIndicatorCode" Type="string"/>
</Inputs>
<Locals/>
<Description>To set Other Fraud flags</Description>
<ExpressionText>for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS relative to PersonalApplicantOutput do
if(InStr("K",Trim(iIdentityScanIndicatorCode),true)&gt;0)then ADDR_ANSWER:="Y";
else if(InStr("H",Trim(iIdentityScanIndicatorCode),true)&gt;0)then ADDR_CAMP:="Y";
else if(InStr("F",Trim(iIdentityScanIndicatorCode),true)&gt;0)then ADDR_CHECK_CASH:="Y";
else if(InStr("J",Trim(iIdentityScanIndicatorCode),true)&gt;0)then ADDR_HOTEL:="Y";
else if(InStr("G",Trim(iIdentityScanIndicatorCode),true)&gt;0)then ADDR_PO:="Y";
else if(InStr("P",Trim(iIdentityScanIndicatorCode),true)&gt;0)then ADDR_PRISON:="Y";
else if(InStr("E",Trim(iIdentityScanIndicatorCode),true)&gt;0)then ADDR_STORAGE:="Y";
else if(InStr("2",Trim(iIdentityScanIndicatorCode),true)&gt;0)then ADDR_SUSP1:="Y";
else if(InStr("C",Trim(iIdentityScanIndicatorCode),true)&gt;0)then ADDR_SUSP9:="Y";
else if(InStr("O",Trim(iIdentityScanIndicatorCode),true)&gt;0)then SSN_BUR_DOB:="Y";
else if(InStr("M",Trim(iIdentityScanIndicatorCode),true)&gt;0)then SSN_RECENT:="Y";
else if(InStr("4",Trim(iIdentityScanIndicatorCode),true)&gt;0)then SSN_SUSP5:="Y";

endif endif endif endif endif endif endif endif endif endif endif endif

endfor
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsTUAccountStatus" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Generate filters for TU Account Status</Description>
<ExpressionText>    result := null;
  
  
    //NEUTRAL
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NEUTRAL := false;
    if( iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null and InStringList(Trim(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE), "AH, AJX, AJP, AT, AID, BCD, BKD, CAD, CD, CDC, CDL, CDR, CDT, CFD, CRC, CTC, DGR, DGX, DIS, DP, DRP, WCD, WPD", ","))then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NEUTRAL := true;  
    endif
  
    //INACTIVE
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INACTIVE := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NEUTRAL = false) then
        if((iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND InStringList(Trim(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE), "AAP, ACR, ACT, BTA, CTR, PAL, NIR, NIX, PDE, RFN, SPD, STL, TRF, TRL", ","))) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INACTIVE := true;
    endif endif
 
    //CLOSED
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CLOSED := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NEUTRAL = false AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INACTIVE = false) then
        if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR AND 
                ( (iNORMALIZED_BUREAU_SEGMENTS.MOP &lt;&gt; null and InStringList(Trim(iNORMALIZED_BUREAU_SEGMENTS.MOP),"07, 08, 8A, 8D, 8R, 09, 9B", ",") )  OR
                (iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null and InStringList(Trim(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE), "AM, BDI, BDC, BDM, BKC, BKL, BRC, BRR, CBC, CBG, CBD, CBL, CBR, CBT, CCC, CCD, CDD, CED, CLA, CLC, CLO, CLS, COL, CPP, CRD, CRL, CRR, CRT, CRV, CTV, DLF, DLU, ET, ETA, ETB, ETD, ETI, ETO, ETS, FCL, FFB, FPD, FPI, FPS, FTB, FTO, FTS, GVC, INC, IRB, IRE, LBR, MOV, PBB, PLP, PNR, PRL, RLD, RLP, RPF, RPO, RVC, RVE, RVN, RVP, RVR, SBB, SK, SLD, SLP, SRG, TTR, WED, WEP, WPC, WRC, WRR", ",")) OR 
                ((iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "Y") AND 
    (iNORMALIZED_BUREAU_SEGMENTS.DATE_PAID_OUT &lt;&gt; null and (Trim(iNORMALIZED_BUREAU_SEGMENTS.DATE_PAID_OUT) = "")) ))) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CLOSED := true;
        else if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG AND 
                     ((iNORMALIZED_BUREAU_SEGMENTS.DATE_PAID_OUT = null or (Trim(iNORMALIZED_BUREAU_SEGMENTS.DATE_PAID_OUT) = "") AND (iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; "PCL")  )) ) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CLOSED := true;
        endif endif
  
     endif
 
    //PAID
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PAID := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NEUTRAL = false AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INACTIVE = false AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CLOSED = false) then
        if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR AND 
             ((iNORMALIZED_BUREAU_SEGMENTS.MOP &lt;&gt; null and InStringList(Trim(iNORMALIZED_BUREAU_SEGMENTS.MOP), "8P, 9P", ","))  OR
             (iNORMALIZED_BUREAU_SEGMENTS.MOP &lt;&gt; null and InStringList(Trim(iNORMALIZED_BUREAU_SEGMENTS.MOP), "UR, UC, 00, 01, 02, 03, 04, 05", ",") AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_DATE_CLOSED)   OR
             (iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null and InStringList(Trim(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE), "CPM, INP, INS, IRO, PBA, PBD, PCL, PDD, PFC, PPD, PPL, RDP, RLD, RPD, RVD, SET", ","))   OR
             (iNORMALIZED_BUREAU_SEGMENTS.PORTFOLIO_TYPE &lt;&gt; null and iNORMALIZED_BUREAU_SEGMENTS.PORTFOLIO_TYPE = "I" AND dm_isBlankOrZero(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) AND dm_isBlankOrZero(iNORMALIZED_BUREAU_SEGMENTS.PAST_DUE_AMT))   OR
             (iNORMALIZED_BUREAU_SEGMENTS.PORTFOLIO_TYPE &lt;&gt; null and iNORMALIZED_BUREAU_SEGMENTS.PORTFOLIO_TYPE = "M" AND dm_isBlankOrZero(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) AND dm_isBlankOrZero(iNORMALIZED_BUREAU_SEGMENTS.PAST_DUE_AMT) AND iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null and InStringList(Trim(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE), "PPC, PPD", ","))   OR
             (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null and iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "Y" and (iNORMALIZED_BUREAU_SEGMENTS.DATE_PAID_OUT = null or TRIM(iNORMALIZED_BUREAU_SEGMENTS.DATE_PAID_OUT) &lt;&gt; ""))     )) then
  
                     iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PAID := true;

    else if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG AND 
           ((iNORMALIZED_BUREAU_SEGMENTS.DATE_PAID_OUT &lt;&gt; null and TRIM(iNORMALIZED_BUREAU_SEGMENTS.DATE_PAID_OUT) &lt;&gt; "") OR (iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null and iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE = "PCL") )      ) then
    
                     iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PAID := true;
        endif endif
    endif
 
    
    //OPEN
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NEUTRAL = false AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INACTIVE = false AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CLOSED = false AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PAID = false) then
       if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR AND iNORMALIZED_BUREAU_SEGMENTS.MOP &lt;&gt; null and InStringList(iNORMALIZED_BUREAU_SEGMENTS.MOP, "UR, UC, 00, 01, 02, 03, 04, 05", ",")) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN := true;
       endif
    endif
   
    //STATUS-OPC
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN = true OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PAID = true OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CLOSED = true) then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC := true;
    endif
   
    //STATUS-OPCI
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN = true OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PAID = true OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CLOSED = true  OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INACTIVE = true) then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI := true;
    endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_GenerateCharacteristics" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Generate Characteristics</Description>
<ExpressionText>result := null;

for every Application.CreditApplication.PersonalApplicant relative to CreditApplication do

                //Generate Filters
                dm_STAGGFiltersAndFunctions;
    
                //Generate Attributes
                dm_STAGGAttributes;

endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_DeterminePGEigibility" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xScore" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xBureauName" Type="string"/>
</Locals>
<Description>Determine PG CC intermediate Fact Types.</Description>
<ExpressionText>result:=null;
xScore:="N";


xBureauName := "";
for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do
		if(BusinessApplicantOutput.businessBureauName &lt;&gt; null and BusinessApplicantOutput.businessBureauName &lt;&gt; "") then
           xBureauName := BusinessApplicantOutput.businessBureauName;
		endif
endfor



if(xBureauName="EFX")then
  for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do
   if(BusinessApplicantOutput.BusRiskScore &lt;&gt; null and BusinessApplicantOutput.BusRiskScore&gt;=517)then
   xScore:="Y";
  endif
  endfor
endif

if(xBureauName="XPB")then
 for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do
   if(BusinessApplicantOutput.BusRiskScore &lt;&gt; null and BusinessApplicantOutput.BusRiskScore&gt;=9520)then
   xScore:="Y";
  endif
 endfor
endif
 
 for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do 
  BusinessApplicantOutput.RiskScoreAboveThreshold:=xScore;
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesBNK" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>calculates BNK Attributes</Description>
<ExpressionText>          result := null;

          //BNK001
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BNK AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.BNK001 := iBUREAU_ATTRIBUTES.BNK001 + 1;
          endif

          //BNK026
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BNK AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.BNK026 := iBUREAU_ATTRIBUTES.BNK026 + 1;
          endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_STAGGFiltersAndFunctionsEFXMonthsAgo" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Calculate Months Ago and related data for processing Grid for Equifax</Description>
<ExpressionText>result:=null;
  
 //MONTHS-AGO
 iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_AGO := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED;
 
 
 //Adjust Payment Pattern for future use. 
 iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED := dm_GetBlankSpaces(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_AGO) + iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT;
 iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED_6_MONTHS := LEFT(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED, 6);
 iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED_12_MONTHS := LEFT(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED, 12);
 iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED_24_MONTHS := LEFT(iNORMALIZED_BUREAU_SEGMENTS.PAY_PATT_INTERPRETED, 24);</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_ReturnOptional_AlertState" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iMessage" Type="string"/>
</Inputs>
<Locals/>
<Description/>
<ExpressionText>for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS relative to PersonalApplicantOutput do

if(iMessage="0009")then ADDR_AIRPORT:="Y";
else if(iMessage="6001")then ADDR_ANSWER:="Y";
else if(iMessage="0007")then ADDR_BAR:="Y";
else if(iMessage="0004")then ADDR_CAMP:="Y";
else if(iMessage="0006")then ADDR_CHECK_CASH:="Y";
else if(iMessage="0500")then ADDR_COMMERCIAL:="Y";
else if(iMessage="0003")then ADDR_CREDIT:="Y";
else if(iMessage="1500")then ADDR_GOV:="Y";
else if(iMessage="0502")then ADDR_HOSPITAL:="Y";
else if(iMessage="0002")then ADDR_HOTEL:="Y";
else if(iMessage="1000")then ADDR_INST:="Y";
else if(iMessage="0503")then ADDR_NURSE:="Y";
else if(iMessage="1001")then ADDR_PO:="Y";
else if(iMessage="0501")then ADDR_PRISON:="Y";
else if(iMessage="0005")then ADDR_SECR:="Y";
else if(iMessage="0008")then ADDR_STORAGE:="Y";
else if(iMessage="1503")then ADDR_SUSP1:="Y";
else if(iMessage="1501")then ADDR_SUSP3:="Y";
else if(iMessage="1502")then ADDR_SUSP5:="Y";
else if(iMessage="1504")then ADDR_SUSP6:="Y";
else if(iMessage="2001")then ADDR_SUSP7:="Y";
else if(iMessage="2999")then ADDR_SUSP8:="Y";
else if(iMessage="3000")then ADDR_SUSP9:="Y";
else if(iMessage="0010")then ADDR_TRUCK:="Y";
else if(iMessage="5501")then SSN_RECENT:="Y";
else if(iMessage="5502")then SSN_SUBJECTS:="Y";
else if(iMessage="5503")then SSN_SUSP1:="Y";
else if(iMessage="5999")then SSN_SUSP7:="Y";
else if(iMessage="6001")then TEL_ANSWER:="Y";
else if(iMessage="6002")then TEL_CELL:="Y";
else if(iMessage="6500")then TEL_COMMERCIAL:="Y";
else if(iMessage="7500")then TEL_GOV:="Y";
else if(iMessage="7000")then TEL_INST:="Y";
else if(iMessage="6003")then TEL_PAYPHONE:="Y";
else if(iMessage="7501")then TEL_SUSP1:="Y";
else if(iMessage="7503")then TEL_SUSP2:="Y";
else if(iMessage="8001")then TEL_SUSP3:="Y";
else if(iMessage="9001")then TEL_SUSP5:="Y";
else if(iMessage="9000")then TEL_SUSP6:="Y";
else if(iMessage="1802")then ZIP_STATE:="Y";
else if(iMessage="1801")then ZIP_TYPE:="Y";
else if(iMessage="1702")then ZIP_VALID:="Y";


endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif


endfor
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.DuplicateApplications" Name="dm_AssignDuplicateSummary" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iChannel" Type="string"/>
<Input Name="iDuplicateVelocityCounter" Type="numeric"/>
<Input Name="iGamingVelocityCounter" Type="numeric"/>
</Inputs>
<Locals>
<Local InitialValue="null" Name="xDuplicateSummary" Type="DuplicateSummary"/>
<Local InitialValue="null" Name="xDuplicateSummaryList" Type="DuplicateSummaryList"/>
</Locals>
<Description>Calculates Duplicate Summary </Description>
<ExpressionText>result := null;

//Check if already existing node for same channel
for every Application.CreditApplication.DuplicateApplications.DuplicateSummaryList.DuplicateSummary relative to DuplicateApplications do
                if(DuplicateSummary.Channel = iChannel AND DuplicateSummary.DuplicateVelocityCounter = iDuplicateVelocityCounter AND DuplicateSummary.GamingVelocityCounter = iGamingVelocityCounter) then
                                xDuplicateSummary := DuplicateSummary;
                endif
endfor

//Check for DuplicateSummaryList
for every Application.CreditApplication.DuplicateApplications.DuplicateSummaryList relative to DuplicateApplications do
                xDuplicateSummaryList := DuplicateSummaryList;
endfor

//Create a new element if not available
if(xDuplicateSummaryList = null) then
                xDuplicateSummaryList := new DuplicateSummaryList;
                ATTACH(DuplicateApplications, xDuplicateSummaryList);
endif

//assign and create new DuplicateSummary object
if(xDuplicateSummary = null) then
                xDuplicateSummary := new DuplicateSummary; 
                ATTACH(xDuplicateSummaryList, xDuplicateSummary);
endif

//Assign Values
xDuplicateSummary.Channel := iChannel;
xDuplicateSummary.GamingVelocityCounter := iGamingVelocityCounter;
xDuplicateSummary.DuplicateVelocityCounter := iDuplicateVelocityCounter;

if(xDuplicateSummary.TotalCount = null) then
              xDuplicateSummary.TotalCount := 0;
endif

xDuplicateSummary.TotalCount := xDuplicateSummary.TotalCount + 1;





</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_SetECOAReasonHotNameOFACC" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="null" Name="xECOAReason" Type="ECOA_REASON"/>
<Local InitialValue="null" Name="xECOAReasonList" Type="ECOA_REASON_LIST"/>
</Locals>
<Description>Sets ECOA Reason for OFAC and Hot Name when Rules fires.</Description>
<ExpressionText>result:="0";

For every Application.CreditApplication.ECOA_REASON_LIST relative to CreditApplication do
	xECOAReasonList:=ECOA_REASON_LIST;
	if(xECOAReasonList=null) then
		xECOAReasonList:=new ECOA_REASON_LIST;
	endif
	xECOAReason:= new ECOA_REASON;
	xECOAReason.ECOA_PRINTABLE:="Y";
	xECOAReason.ECOA_RANK:="100";
	xECOAReason.ECOA_REASON_CODE:="0100";
	Attach(xECOAReasonList,xECOAReason);
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_isNEGAvailableBusinessApp" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xNEGAvailable" Type="string"/>
</Locals>
<Description>Initialize the NEG attributes</Description>
<ExpressionText>result := "N";

xNEGAvailable := "false";

for every Application.CreditApplication.BusinessApplicant.NegFileDetails relative to BusinessApplicant  do
              if(NegFileDetails.AgencyCode &lt;&gt; null)then
                            xNEGAvailable := "true";
              endif
endfor

for every  Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do
              BusinessApplicantOutput.NEGAvailable := xNEGAvailable;
endfor

if(xNEGAvailable = "true") then
              result := "Y";
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_GamingVelocityLimit" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Returns Gaming Velocity Limit</Description>
<ExpressionText>//trigger velocity if the counter is less than 6. 
result := 6;</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_SortTUInquiry" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iInquiry" Type="Inquiry"/>
</Inputs>
<Locals>
<Local InitialValue="null" Name="xInquiry" Type="Inquiry"/>
<Local InitialValue="&quot;&quot;" Name="xIndCode" Type="string"/>
</Locals>
<Description>Execute sort on TU Inquiry</Description>
<ExpressionText>result := null;


for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.InquiryList.Inquiry relative to PersonalApplicant do 

          if(Inquiry.INQ_TO_DEDUP = null) then
                     xIndCode := Left(Inquiry.IndustryCode,  1);
                     if(xIndCode = "A") then
                                    Inquiry.INQ_TO_DEDUP := 1;
                     else if(InStringList(xIndCode, "B, F, Q", ",")) then
                                   Inquiry.INQ_TO_DEDUP := 2;
                     else
                                   Inquiry.INQ_TO_DEDUP := 0;
                     endif endif
          endif
    
          if(iInquiry.INQ_TO_DEDUP = null) then
                     xIndCode := Left(iInquiry.IndustryCode,  1);
                     if(xIndCode = "A") then
                                    iInquiry.INQ_TO_DEDUP := 1;
                     else if(InStringList(xIndCode, "B, F, Q", ",")) then
                                   iInquiry.INQ_TO_DEDUP := 2;
                     else
                                   iInquiry.INQ_TO_DEDUP := 0;
                     endif endif
          endif
    
          if(Inquiry.INQ_TO_DEDUPB = null) then
                     xIndCode := Left(Inquiry.IndustryCode,  1);
                     if(xIndCode = "B") then
                                    Inquiry.INQ_TO_DEDUPB := 1;
                     else
                                   Inquiry.INQ_TO_DEDUPB := 0;
                     endif
          endif
    
          if(iInquiry.INQ_TO_DEDUPB = null) then
                     xIndCode := Left(iInquiry.IndustryCode,  1);
                     if(xIndCode = "B") then
                                    iInquiry.INQ_TO_DEDUPB := 1;
                     else
                                   iInquiry.INQ_TO_DEDUPB := 0;
                     endif
          endif    
    
    
           if(Inquiry.DAYS_INQ = null) then
                    Inquiry.DAYS_INQ := 9999;
                    if(Inquiry.InquiryDate &lt;&gt; null AND TRIM(Inquiry.InquiryDate) &lt;&gt; "") then
                                      Inquiry.DAYS_INQ := TimestampDiff("days", iProfileDate, dm_formatDate(Inquiry.InquiryDate));  
                   endif
           endif

           if(iInquiry.DAYS_INQ = null) then
                    iInquiry.DAYS_INQ := 9999;
                    if(iInquiry.InquiryDate &lt;&gt; null AND TRIM(iInquiry.InquiryDate) &lt;&gt; "") then
                                      iInquiry.DAYS_INQ := TimestampDiff("days", iProfileDate, dm_formatDate(iInquiry.InquiryDate));  
                   endif
           endif


            if(xInquiry = null) then
                         xInquiry := new Inquiry;
            endif
   
            if(iInquiry.INQ_TO_DEDUP &lt; Inquiry.INQ_TO_DEDUP  OR (iInquiry.INQ_TO_DEDUP = Inquiry.INQ_TO_DEDUP AND iInquiry.DAYS_INQ &lt; Inquiry.DAYS_INQ)  OR
                                                                                                   (iInquiry.INQ_TO_DEDUP = Inquiry.INQ_TO_DEDUP AND iInquiry.DAYS_INQ = Inquiry.DAYS_INQ  AND iInquiry.INQ_DEDUP_COUNTER &lt; Inquiry.INQ_DEDUP_COUNTER) ) then
                xInquiry.SourceSegment := Inquiry.SourceSegment;
                xInquiry.InquiryDate := Inquiry.InquiryDate;
                xInquiry.AbbreviationAndOrCustomerNumber := Inquiry.AbbreviationAndOrCustomerNumber;
                xInquiry.Type := Inquiry.Type;
                xInquiry.AccountNumber := Inquiry.AccountNumber;
                xInquiry.BureauMarket := Inquiry.BureauMarket;
                xInquiry.BureauSubMarket := Inquiry.BureauSubMarket;
                xInquiry.IndustryCode := Inquiry.IndustryCode;
                xInquiry.SubscriberNumber := Inquiry.SubscriberNumber;
                xInquiry.SubscriberName := Inquiry.SubscriberName;
                xInquiry.LoanType := Inquiry.LoanType;
                xInquiry.LoanAmount := Inquiry.LoanAmount;
                xInquiry.TermsDuration := Inquiry.TermsDuration;
                xInquiry.Y2kInquiryDate := Inquiry.Y2kInquiryDate;
                xInquiry.RequestorName := Inquiry.RequestorName;
                xInquiry.INQ_TO_DEDUP := Inquiry.INQ_TO_DEDUP;
                if(Inquiry.INQ_TO_DEDUPB &lt;&gt; null) then
                        xInquiry.INQ_TO_DEDUPB := Inquiry.INQ_TO_DEDUPB;
                endif
                xInquiry.DAYS_INQ := Inquiry.DAYS_INQ;
                xInquiry.IS_DUPLICATE_INQ := Inquiry.IS_DUPLICATE_INQ;
                if(Inquiry.IS_DUPLICATE_BANK_INQ &lt;&gt; null) then
                       xInquiry.IS_DUPLICATE_BANK_INQ := Inquiry.IS_DUPLICATE_BANK_INQ;
                endif
                xInquiry.INQ_DEDUP_COUNTER := Inquiry.INQ_DEDUP_COUNTER;
    

                Inquiry.SourceSegment := iInquiry.SourceSegment;
                Inquiry.InquiryDate := iInquiry.InquiryDate;
                Inquiry.AbbreviationAndOrCustomerNumber := iInquiry.AbbreviationAndOrCustomerNumber;
                Inquiry.Type := iInquiry.Type;
                Inquiry.AccountNumber := iInquiry.AccountNumber;
                Inquiry.BureauMarket := iInquiry.BureauMarket;
                Inquiry.BureauSubMarket := iInquiry.BureauSubMarket;
                Inquiry.IndustryCode := iInquiry.IndustryCode;
                Inquiry.SubscriberNumber := iInquiry.SubscriberNumber;
                Inquiry.SubscriberName := iInquiry.SubscriberName;
                Inquiry.LoanType := iInquiry.LoanType;
                Inquiry.LoanAmount := iInquiry.LoanAmount;
                Inquiry.TermsDuration := iInquiry.TermsDuration;
                Inquiry.Y2kInquiryDate := iInquiry.Y2kInquiryDate;
                Inquiry.RequestorName := iInquiry.RequestorName;
                Inquiry.INQ_TO_DEDUP := iInquiry.INQ_TO_DEDUP;
                if(iInquiry.INQ_TO_DEDUPB &lt;&gt; null) then
                        Inquiry.INQ_TO_DEDUPB := iInquiry.INQ_TO_DEDUPB;
                endif
                Inquiry.DAYS_INQ := iInquiry.DAYS_INQ;
                Inquiry.IS_DUPLICATE_INQ := iInquiry.IS_DUPLICATE_INQ;
                if(iInquiry.IS_DUPLICATE_BANK_INQ &lt;&gt; null) then
                       Inquiry.IS_DUPLICATE_BANK_INQ := iInquiry.IS_DUPLICATE_BANK_INQ;
                endif
                Inquiry.INQ_DEDUP_COUNTER := iInquiry.INQ_DEDUP_COUNTER;
    
    

                iInquiry.SourceSegment := xInquiry.SourceSegment;
                iInquiry.InquiryDate := xInquiry.InquiryDate;
                iInquiry.AbbreviationAndOrCustomerNumber := xInquiry.AbbreviationAndOrCustomerNumber;
                iInquiry.Type := xInquiry.Type;
                iInquiry.AccountNumber := xInquiry.AccountNumber;
                iInquiry.BureauMarket := xInquiry.BureauMarket;
                iInquiry.BureauSubMarket := xInquiry.BureauSubMarket;
                iInquiry.IndustryCode := xInquiry.IndustryCode;
                iInquiry.SubscriberNumber := xInquiry.SubscriberNumber;
                iInquiry.SubscriberName := xInquiry.SubscriberName;
                iInquiry.LoanType := xInquiry.LoanType;
                iInquiry.LoanAmount := xInquiry.LoanAmount;
                iInquiry.TermsDuration := xInquiry.TermsDuration;
                iInquiry.Y2kInquiryDate := xInquiry.Y2kInquiryDate;
                iInquiry.RequestorName := xInquiry.RequestorName;
                iInquiry.INQ_TO_DEDUP := xInquiry.INQ_TO_DEDUP;
                if(xInquiry.INQ_TO_DEDUPB &lt;&gt; null) then
                        iInquiry.INQ_TO_DEDUPB := xInquiry.INQ_TO_DEDUPB;
                endif
                iInquiry.DAYS_INQ := xInquiry.DAYS_INQ;
                iInquiry.IS_DUPLICATE_INQ := xInquiry.IS_DUPLICATE_INQ;
                if(xInquiry.IS_DUPLICATE_BANK_INQ &lt;&gt; null) then
                       iInquiry.IS_DUPLICATE_BANK_INQ := xInquiry.IS_DUPLICATE_BANK_INQ;
                endif
                iInquiry.INQ_DEDUP_COUNTER := xInquiry.INQ_DEDUP_COUNTER;
    
    
            endif

endfor 
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_AdverseActionReasons" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xTemplateCode" Type="string"/>
<Local InitialValue="null" Name="xAdverseActionRecordSet" Type="AdverseActionRecordSet"/>
<Local InitialValue="null" Name="xAdverseActionResultSet" Type="AdverseActionResultSet"/>
<Local InitialValue="0.0" Name="xNonINQCounter" Type="numeric"/>
<Local InitialValue="0.0" Name="xINQCounter" Type="numeric"/>
<Local InitialValue="0.0" Name="xRank" Type="numeric"/>
<Local InitialValue="null" Name="xAdverseAction" Type="AdverseAction"/>
</Locals>
<Description>To set the Adverse action reasons</Description>
<ExpressionText>result:=null;
xRank := 99;

//check the count of all INQ and NON-INQ AdverseActions
	for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.AdverseActionList.AdverseAction relative to CreditApplication do
           //Select top four ranked delta records
           if(AdverseAction.INQ = "Y") then
                      //select the INQ count with top 4 ranks	
                      if(InNumberList(AdverseAction.Rank, "1, 2, 3, 4", ",")) then
                                 xINQCounter := xINQCounter + 1;
                      endif
			else if(AdverseAction.INQ = "N") then
                      //select the NON-INQ count with top 4 ranks
                      if( InNumberList(AdverseAction.Rank, "1, 2, 3, 4", ",")) then
                                 xNonINQCounter := xNonINQCounter + 1;
                      endif
           endif endif

           //Get the AdverseAction INQ Node with Highest Rank for usage in condition below
		   if(AdverseAction.INQ = "Y" AND xRank &gt; AdverseAction.Rank) then
                      xAdverseAction := AdverseAction;
					  xRank := AdverseAction.Rank;
           endif
	endfor



//Initialize the AdverseActionResultSet
	xAdverseActionResultSet := new AdverseActionResultSet;
	xAdverseActionResultSet.TemplateCode := xTemplateCode; //xAdverseActionList.TemplateCode;

	//Check for NON-INQ Count = 4 i.e. top 4 reasons are NON-INQ
	if(xNonINQCounter = 4) then
           for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.AdverseActionList.AdverseAction relative to CreditApplication do
                      if(InNumberList(AdverseAction.Rank, "1, 2, 3, 4", ",")) then
                                 xAdverseActionRecordSet := new AdverseActionRecordSet;
                                 xAdverseActionRecordSet.Variable := AdverseAction.Variable;
                                 xAdverseActionRecordSet.Weighted_Mean := AdverseAction.Weighted_Mean;
                                 xAdverseActionRecordSet.Weighted_Actual := AdverseAction.Weighted_Actual;
                                 xAdverseActionRecordSet.Delta := AdverseAction.Delta;
                                 xAdverseActionRecordSet.ReasonCode := AdverseAction.ReasonCode;
                                 xAdverseActionRecordSet.Rank := AdverseAction.Rank;
                                 xAdverseActionRecordSet.INQ := AdverseAction.INQ;
                                 Attach(xAdverseActionResultSet, xAdverseActionRecordSet);
                      endif
           endfor

           //Add the 5th Reason for the highest Rank
           if(xAdverseAction &lt;&gt; null) then
                      xAdverseActionRecordSet := new AdverseActionRecordSet;
                      xAdverseActionRecordSet.Variable := xAdverseAction.Variable;
                      xAdverseActionRecordSet.Weighted_Mean := xAdverseAction.Weighted_Mean;
                      xAdverseActionRecordSet.Weighted_Actual := xAdverseAction.Weighted_Actual;
                      xAdverseActionRecordSet.Delta := xAdverseAction.Delta;
                      xAdverseActionRecordSet.ReasonCode := xAdverseAction.ReasonCode;
                      xAdverseActionRecordSet.Rank := 5;
                      xAdverseActionRecordSet.INQ := xAdverseAction.INQ;
                      Attach(xAdverseActionResultSet, xAdverseActionRecordSet);
           endif
		   
			//END NON-INQ Actions

	else

           //Attach the INQ or NON-INQ top 4 reasons. 
           for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.AdverseActionList.AdverseAction relative to CreditApplication do
                      if(InNumberList(AdverseAction.Rank, "1, 2, 3, 4", ","))then
                                 xAdverseActionRecordSet:= new AdverseActionRecordSet;
                                 xAdverseActionRecordSet.Variable := AdverseAction.Variable;
                                 xAdverseActionRecordSet.Weighted_Mean := AdverseAction.Weighted_Mean;
                                 xAdverseActionRecordSet.Weighted_Actual := AdverseAction.Weighted_Actual;
                                 xAdverseActionRecordSet.Delta := AdverseAction.Delta;
                                 xAdverseActionRecordSet.ReasonCode := AdverseAction.ReasonCode;
                                 xAdverseActionRecordSet.Rank := AdverseAction.Rank;
                                 xAdverseActionRecordSet.INQ := AdverseAction.INQ;
                                 Attach(xAdverseActionResultSet, xAdverseActionRecordSet);
                      endif
			endfor
			
	endif


    //Attach the final results
	for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to CreditApplication do
           Attach(PersonalApplicantOutput, xAdverseActionResultSet);
	endfor
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_ScoreLexis" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="null" Name="xLexisNexisScore" Type="numeric"/>
</Locals>
<Description>Lexis Score</Description>
<ExpressionText>xLexisNexisScore:=-999;
if (LN_RISKVIEW_THIN_BYPASS_FLAG = "N" or LN_RISKVIEW_THIN_BYPASS_FLAG = "" or LN_RISKVIEW_THIN_BYPASS_FLAG = NULL) then
	for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.LNRiskViewDataSource.Response.Output.RiskViewResponseEx.Result.Models.Model.LNScores.LNScore relative to PersonalApplicant do
		if(LNScore.Value&lt;&gt;null)then
			xLexisNexisScore:=LNScore.Value;
		endif
	endfor
else 
   xLexisNexisScore:=-8000;
endif

for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do
	SCORES.LNScore:=xLexisNexisScore;
endfor

result := xLexisNexisScore;</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_set_FraudFlags_Efx" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xSafeScanCode" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xAddressDiscrepancyIndicator" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xConsumerStatementIndicator" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xFraudVictimIndicator" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xAddressDiscrepancyIndicatorY" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreFlagSSNSUS4" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreFlagSSNSUS2" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreFlagSSNMIS" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreFlagSSNNI" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreFlagDEAD" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreFlagACTIVEDUTY" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreFlagCS" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreFlagVS" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xScoreFlagGamingVelocity" Type="string"/>
</Locals>
<Description>To set the fraud alerts for Equifax</Description>
<ExpressionText>xScoreFlagVS:="N";
xScoreFlagCS:="N";
xScoreFlagACTIVEDUTY:="N";
xScoreFlagDEAD:="N";
xScoreFlagSSNNI:="N";
xScoreFlagSSNMIS:="N";
xScoreFlagSSNSUS2:="N";
xScoreFlagSSNSUS4:="N";
xAddressDiscrepancyIndicatorY:="N";
xScoreFlagGamingVelocity := "N";

for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.Analysis.Indicators relative to PersonalApplicant do
	if(Indicators.consumerStatementIndicator&lt;&gt;null and TRIM(Indicators.consumerStatementIndicator)&lt;&gt;"")then
	 xConsumerStatementIndicator:= Indicators.consumerStatementIndicator;
	endif
endfor

for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.HeaderList.Header relative to personalApplicant do

if(FraudVictimIndicator&lt;&gt;null and TRIM(FraudVictimIndicator)&lt;&gt;"")then
 xFraudVictimIndicator:=FraudVictimIndicator;
endif
if(SafescanCode&lt;&gt;null and TRIM(SafescanCode)&lt;&gt;"")then
 xSafescanCode:=SafescanCode;
endif
if(AddressDiscrepancyIndicator&lt;&gt;null and TRIM(AddressDiscrepancyIndicator)&lt;&gt;"")then
 xAddressDiscrepancyIndicator:=AddressDiscrepancyIndicator;
endif

 if(Trim(xFraudVictimIndicator)="X")then 
  xScoreFlagVS:="Y";
  endif
 if(InStringlist(xFraudVictimIndicator,"V,T",","))then 
  xScoreFlagVS:="Y";
  endif
 if(xConsumerStatementIndicator = "Y")then 
  xScoreFlagCS:="Y";
  endif
 if(InStringlist(xFraudVictimIndicator,"N,Q,W,R",","))then 
  xScoreFlagACTIVEDUTY:="Y";
  endif
 if (INSTR ("I", xSafescanCode, true) &gt; 0) then 
  xScoreFlagDEAD:="Y";
  endif
 if (INSTR ("A", xSafescanCode, true) &gt; 0) then
  xScoreFlagSSNNI:="Y";
  endif
 if (INSTR ("B", xSafescanCode, true) &gt; 0) then
  xScoreFlagSSNMIS:="Y";
  endif
  
	if(InStr("Y",xAddressDiscrepancyIndicator,true)&gt;0)then
		xAddressDiscrepancyIndicatorY:="Y";
	endif
 dm_ReturnOptional_AlertState_Efx(xSafeScanCode);
endfor

//Gaming Velocity
if(dm_get_GamingVelocityCounter&gt;= dm_GamingVelocityLimit) then
              xScoreFlagGamingVelocity := "Y";
endif

for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS relative to PersonalApplicantOutput do
 ScoreFlagVS:=xScoreFlagVS;
 ScoreFlagCS:=xScoreFlagCS;
 ScoreFlagACTIVEDUTY:=xScoreFlagACTIVEDUTY;
 ScoreFlagDEAD:=xScoreFlagDEAD;
 ScoreFlagSSNNI:=xScoreFlagSSNNI;
 ScoreFlagSSNMIS:=xScoreFlagSSNMIS;
 ScoreFlagSSNSUS2:=xScoreFlagSSNSUS2;
 ScoreFlagSSNSUS4:=xScoreFlagSSNSUS4;
 FILE_ADDR_MISMATCH:=xAddressDiscrepancyIndicatorY;
 ScoreFlagPreciseID:="N";
 ScoreFlagGamingVelocity := xScoreFlagGamingVelocity;
endfor
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_setUDConsumerCC" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Sets the Upgrade Consumer Credit Class</Description>
<ExpressionText>
for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do 
                  if(PersonalApplicantOutput.NEUSTAR_CREDIT_CLASS &lt;&gt; null AND PersonalApplicantOutput.NEUSTAR_CREDIT_CLASS &lt;&gt; "")then
                                    PersonalApplicantOutput.FINAL_CREDIT_CLASS := PersonalApplicantOutput.NEUSTAR_CREDIT_CLASS;
                               
                  endif
endfor 
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_BusinessSummaryEFB" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="0.0" Name="xYearsInBusiness" Type="numeric"/>
<Local InitialValue="false" Name="xYearsInBusinessFound" Type="boolean"/>
<Local InitialValue="0.0" Name="xBusHighCreditLimitNonFin" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusHighCreditLimitFin" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusAllTradesTotalBal" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusNumRecentTrades" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusHighCreditLimit" Type="numeric"/>
<Local InitialValue="0.0" Name="xAppNumberOfEmployees" Type="numeric"/>
<Local InitialValue="0.0" Name="xMonthsOnFile" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusChargeOffNum" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusChargeOffNumNonFin" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusNumRecentTradesNonFin" Type="numeric"/>
<Local InitialValue="0.0" Name="xCombTradesTotalCt" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusJudgementLienNum" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusNumLiens" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusNumJudgements" Type="numeric"/>
<Local InitialValue="null" Name="xFileCreateDate" Type="timestamp"/>
<Local InitialValue="null" Name="xDateOfRequest" Type="timestamp"/>
<Local InitialValue="0.0" Name="xBusRiskScore" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusNonFinancialTradesExtendedTotBal" Type="numeric"/>
<Local InitialValue="0.0" Name="xCurrentCreditLimitTotalsNonFin" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusNumOfActiveFin" Type="numeric"/>
<Local InitialValue="0.0" Name="xTotalExposureNonFin" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusNumOfActiveNonFin" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusNumRecentTradesFin" Type="numeric"/>
<Local InitialValue="0.0" Name="xCurrentCreditLimitTotalsFin" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusFinancialTradesExtendedTotBal" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusFinancialTradesNum" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusChargeOffNumFin" Type="numeric"/>
<Local InitialValue="0.0" Name="xTotalExposureFin" Type="numeric"/>
<Local InitialValue="FAIL" Name="xBusIsBkInLast7Yrs" Type="string"/>
<Local InitialValue="0.0" Name="xNumberOfEmployees" Type="numeric"/>
</Locals>
<Description>Summarizes EFB business bureau data</Description>
<ExpressionText>if(BusinessApplicant.numberOfEmployees &lt;&gt; null AND BusinessApplicant.numberOfEmployees &gt;= 0)then
                xAppNumberOfEmployees := BusinessApplicant.numberOfEmployees;
endif


        for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.EFBDataSource.Response.Output.EfxTransmit.CommercialCreditReport.Folder.ReportAttributes.FinancialSummary.SummaryAttributes relative to BusinessApplicant do 
                if(SummaryAttributes.NumberOfActiveTrades &lt;&gt; null and SummaryAttributes.NumberOfActiveTrades &gt; 0)then
                        xBusNumOfActiveFin := SummaryAttributes.NumberOfActiveTrades;
                endif

                if(SummaryAttributes.TotalExposure&lt;&gt;null and SummaryAttributes.TotalExposure&gt;0)then
                        xTotalExposureFin:=SummaryAttributes.TotalExposure;
                endif

                if(SummaryAttributes.NumberOfChargeOffs &lt;&gt; null and SummaryAttributes.NumberOfChargeOffs &gt; 0)then
                        xBusChargeOffNumFin := SummaryAttributes.NumberOfChargeOffs;
                endif

                //Number of Financial Trades
                if(SummaryAttributes.NumberOfAccounts &lt;&gt; null and SummaryAttributes.NumberOfAccounts &gt; 0)then
                        xBusFinancialTradesNum := SummaryAttributes.NumberOfAccounts;
                endif

                //Financial Trade extended total balance
                if(SummaryAttributes.HiCreditOrOrigLoanAmtTotals &lt;&gt; null AND SummaryAttributes.HiCreditOrOrigLoanAmtTotals &gt; 0)then
                                xBusFinancialTradesExtendedTotBal := SummaryAttributes.HiCreditOrOrigLoanAmtTotals
                endif
/* CR051 - Changed logic see line 33
                if(SummaryAttributes.CurrentCreditLimitTotals &lt;&gt; null and SummaryAttributes.CurrentCreditLimitTotals &gt; 0)then
                        xCurrentCreditLimitTotalsFin := MAX(xCurrentCreditLimitTotalsFin,SummaryAttributes.CurrentCreditLimitTotals);
                endif
*/
// CR051 - 3.1.2.2
                      if(SummaryAttributes.HighestCredit&lt;&gt;null and SummaryAttributes.HighestCredit&gt;0)then
                                 xBusHighCreditLimitFin:=SummaryAttributes.HighestCredit;
                      endif

                if(SummaryAttributes.NewAccounts &lt;&gt; null and SummaryAttributes.NewAccounts &gt; 0)then
                        xBusNumRecentTradesFin := SummaryAttributes.NewAccounts;
                endif
        endfor
 
        for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.EFBDataSource.Response.Output.EfxTransmit.CommercialCreditReport.Folder.ReportAttributes.NonFinancialSummary.SummaryAttributes relative to BusinessApplicant do 
                if(SummaryAttributes.NumberOfActiveTrades &lt;&gt; null and SummaryAttributes.NumberOfActiveTrades &gt; 0)then
                        xBusNumOfActiveNonFin := SummaryAttributes.NumberOfActiveTrades;
                endif

                if(SummaryAttributes.TotalExposure&lt;&gt;null and SummaryAttributes.TotalExposure&gt;0)then
                        xTotalExposureNonFin:=SummaryAttributes.TotalExposure;
                endif

                if(SummaryAttributes.NumberOfChargeOffs &lt;&gt; null and SummaryAttributes.NumberOfChargeOffs &gt; 0)then
                        xBusChargeOffNumNonFin := SummaryAttributes.NumberOfChargeOffs;
                endif
/* CR051 - Changed logic see line 60
                if(SummaryAttributes.CurrentCreditLimitTotals &lt;&gt; null and SummaryAttributes.CurrentCreditLimitTotals &gt; 0)then
                        xCurrentCreditLimitTotalsNonFin := MAX(xCurrentCreditLimitTotalsNonFin, SummaryAttributes.CurrentCreditLimitTotals);
                endif
*/
// CR051 - 3.1.2.3
                      if(SummaryAttributes.HighestCredit&lt;&gt;null and SummaryAttributes.HighestCredit&gt;0)then
                                 xBusHighCreditLimitNonFin:=SummaryAttributes.HighestCredit;
                      endif

                if(SummaryAttributes.NewAccounts &lt;&gt; null and SummaryAttributes.NewAccounts &gt; 0)then
                        xBusNumRecentTradesNonFin := SummaryAttributes.NewAccounts;
                endif

                if(SummaryAttributes.HiCreditOrOrigLoanAmtTotals&lt;&gt;null and  SummaryAttributes.HiCreditOrOrigLoanAmtTotals &gt;0)then
                        xBusNonFinancialTradesExtendedTotBal := xBusNonFinancialTradesExtendedTotBal + SummaryAttributes.HiCreditOrOrigLoanAmtTotals;
                endif
        endfor

        for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.EFBDataSource.Response.Output.EfxTransmit.CommercialCreditReport.Folder.DecisionTools.ScoreData relative to BusinessApplicant do 
                if(ScoreData.score &lt;&gt; null and trim(ScoreData.score) &lt;&gt; "" and Val(ScoreData.score) &gt;= 0)then
                        xBusRiskScore := Val(ScoreData.score);
                endif
        endfor

        for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.EFBDataSource.Response.Output.EfxTransmit.CommercialCreditReport.Header relative to BusinessApplicant do 
                xDateOfRequest :=  dm_formatDate( Header.DateOfRequest);
        endfor 
        for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.EFBDataSource.Response.Output.EfxTransmit.CommercialCreditReport.Folder.FolderActivity relative to BusinessApplicant do 
                xFileCreateDate := dm_formatDate( FolderActivity.FileCreationDate);
        endfor 


        for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.EFBDataSource.Response.Output.EfxTransmit.CommercialCreditReport.Folder.ReportAttributes.PublicRecordsSummary relative to BusinessApplicant do 
                if(PublicRecordsSummary.NumberOfJudgments &lt;&gt; null and PublicRecordsSummary.NumberOfJudgments &gt; 0)then
                        xBusNumJudgements := PublicRecordsSummary.NumberOfJudgments;
                endif
                if(PublicRecordsSummary.NumberOfLiens &lt;&gt; null and  PublicRecordsSummary.NumberOfLiens &gt; 0)then
                        xBusNumLiens := PublicRecordsSummary.NumberOfLiens;
                endif

                if(PublicRecordsSummary.NumberOfBankruptcies&lt;&gt;null and PublicRecordsSummary.NumberOfBankruptcies&gt;0)then
                                xBusIsBkInLast7Yrs:="PASS";
                endif
        endfor
/*CR051 - change in logic 3.1.2.6 xNumberOfEmployees 
        for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.EFBDataSource.Response.Output.EfxTransmit.CommercialCreditReport.Folder.FirmographicsTrait.CurrentFirm.NumberOfEmployees relative to BusinessApplicant do 
                if(NumberOfEmployees.code&lt;&gt;null and Trim(NumberOfEmployees.code)&lt;&gt;"")then
                        xNumberOfEmployees:=Val(NumberOfEmployees.code);
                endif
        endfor 
*/
//CR051 - 3.1.2.6 xNumberOfEmployees
 for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.EFBDataSource.Response.Output.EfxTransmit.CommercialCreditReport.Folder.FirmographicsTrait.CurrentFirm.NumberOfEmployees relative to BusinessApplicant do 
  if(NumberOfEmployees.code="01")then
   xNumberOfEmployees:=1;
  else if(NumberOfEmployees.code="02")then
   xNumberOfEmployees:=3;
  else if(NumberOfEmployees.code="03")then
   xNumberOfEmployees:=7;
  else if(NumberOfEmployees.code="04")then
   xNumberOfEmployees:=18;
  else if(NumberOfEmployees.code="05")then
   xNumberOfEmployees:=38;
  else if(NumberOfEmployees.code="06")then
   xNumberOfEmployees:=75;
  else if(NumberOfEmployees.code="07")then
   xNumberOfEmployees:=175;
  else if(NumberOfEmployees.code="08")then
   xNumberOfEmployees:=375;  
  else if(NumberOfEmployees.code="09")then
   xNumberOfEmployees:=750;  
  else if(NumberOfEmployees.code="10")then
   xNumberOfEmployees:=1750;  
  else if(NumberOfEmployees.code="11")then
   xNumberOfEmployees:=3750;  
  else if(NumberOfEmployees.code="12")then
   xNumberOfEmployees:=7500;  
  else if(NumberOfEmployees.code="13")then
   xNumberOfEmployees:=12500;  
  else if(NumberOfEmployees.code="14")then
   xNumberOfEmployees:=17500;  
  else if(NumberOfEmployees.code="15")then
   xNumberOfEmployees:=20000; 
endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif 
endfor 


//CR051 - 3.1.2.5 new logic for xMonthsOnFile
		 for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.EFBDataSource.Response.Output.EfxTransmit.CommercialCreditReport.Folder.FirmographicsTrait.CurrentFirm relative to BusinessApplicant do
	if(CurrentFirm.YearsInBusiness&lt;&gt;null and Val(Trim(CurrentFirm.YearsInBusiness))&gt;=0)then
		xYearsInBusiness:=Val(CurrentFirm.YearsInBusiness);
		xYearsInBusinessFound:=True;
	endif
endfor
				
        xBusJudgementLienNum:=xBusNumJudgements+xBusNumLiens;
        xCombTradesTotalCt := xBusNumOfActiveFin + xBusNumOfActiveNonFin;
        xBusAllTradesTotalBal:=xBusFinancialTradesExtendedTotBal + xBusNonFinancialTradesExtendedTotBal;
        xBusChargeOffNum := xBusChargeOffNumFin + xBusChargeOffNumNonFin;
//     xBusHighCreditLimit := Max(xCurrentCreditLimitTotalsFin, xCurrentCreditLimitTotalsNonFin);  CR051 - changed logic see line 112
        xBusHighCreditLimit:=Max(xBusHighCreditLimitFin, xBusHighCreditLimitNonFin);          // CR051 - 3.1.2.1
        xBusNumRecentTrades := xBusNumRecentTradesFin + xBusNumRecentTradesNonFin;
//      xMonthsOnFile :=  TimestampDiff("months", xDateOfRequest, xFileCreateDate);  CR051 - change in logic see line 123
//CR051 - 3.1.2.5 new logic for xMonthsOnFile
if(xYearsInBusinessFound=True) then
		xMonthsOnFile:=xYearsInBusiness*12;
else
	xMonthsOnFile :=  TimestampDiff("months", xDateOfRequest, xFileCreateDate);
endif
  
//Assign Values
for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do 
        BusinessApplicantOutput.BusActiveTradesNum := xCombTradesTotalCt;
        BusinessApplicantOutput.BusAddTradesTotalBal := xBusAllTradesTotalBal;
        BusinessApplicantOutput.BusChargeOffNum := xBusChargeOffNum;
        BusinessApplicantOutput.BusFinancialTradesExtendedTotBal := xBusFinancialTradesExtendedTotBal;
        BusinessApplicantOutput.BusFinancialTradesNum := xBusFinancialTradesNum;
        BusinessApplicantOutput.BushighCreditLimit := xBusHighCreditLimit;
		BusinessApplicantOutput.BusHighCreditLimitFin:=xBusHighCreditLimitFin;
		BusinessApplicantOutput.BusHighCreditLimitNonFin:=xBusHighCreditLimitNonFin;
        BusinessApplicantOutput.BusNumRecentTrades := xBusNumRecentTrades;
        BusinessApplicantOutput.BusRiskScore := xBusRiskScore;
        BusinessApplicantOutput.BusAgeInMonths := xMonthsOnFile;
        BusinessApplicantOutput.BusAgeInYears := Int(xMonthsOnFile/12);
        BusinessApplicantOutput.BusJudgementLienNum := xBusJudgementLienNum;
      //BusinessApplicantOutput.BusTMChargeOff := "FAIL";     CR051 - 3.1.2.9
        BusinessApplicantOutput.BusIsBkInLast7Yrs:=xBusIsBkInLast7Yrs;

        if(xAppNumberOfEmployees&gt;xNumberOfEmployees)then
                BusinessApplicantOutput.numberOfEmployees:=xAppNumberOfEmployees;
        else
                BusinessApplicantOutput.numberOfEmployees:=xNumberOfEmployees;
        endif

endfor 


//Assign ohter BusinessApplicantOutput values - must be called after other calculations
dm_AssignBusinessSummaryOutput;</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES" Name="dm_ValidateAttributeValues" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Validate Attribute Values</Description>
<ExpressionText>result := null;



          BUREAU_ATTRIBUTES.ALE001 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE001, 0, 99);
          BUREAU_ATTRIBUTES.ALE002 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE002, 0, 99);
          BUREAU_ATTRIBUTES.ALE005 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE005, 0, 99);
          BUREAU_ATTRIBUTES.ALE007 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE007, 0, 99);
          BUREAU_ATTRIBUTES.ALE022 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE022, 0, 99);
          BUREAU_ATTRIBUTES.ALE023 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE023, 0, 99);
          BUREAU_ATTRIBUTES.ALE026 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE026, 0, 99);
          BUREAU_ATTRIBUTES.ALE071 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE071, 0, 99);
          BUREAU_ATTRIBUTES.ALE074 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE074, 0, 99);
          BUREAU_ATTRIBUTES.ALE075 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE075, 0, 99);
          BUREAU_ATTRIBUTES.ALE076 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE076, 0, 99);
          BUREAU_ATTRIBUTES.ALE077 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE077, 0, 99);
          BUREAU_ATTRIBUTES.ALE078 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE078, 0, 99);
          BUREAU_ATTRIBUTES.ALE080 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE080, 0, 99);
          BUREAU_ATTRIBUTES.ALE081 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE081, 0, 99);
          BUREAU_ATTRIBUTES.ALE084 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE084, 0, 99);

          BUREAU_ATTRIBUTES.ALE501 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.ALE501);
          BUREAU_ATTRIBUTES.ALE502 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.ALE502);
          BUREAU_ATTRIBUTES.ALE503 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.ALE503);
          BUREAU_ATTRIBUTES.ALE601 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.ALE601);
          BUREAU_ATTRIBUTES.ALE720 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE720, 0, 9999);
          BUREAU_ATTRIBUTES.ALE724 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE724, 0, 9999);
          BUREAU_ATTRIBUTES.ALE740 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE740, 0, 9999);
          BUREAU_ATTRIBUTES.ALE801 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE801, 0, 99);
          BUREAU_ATTRIBUTES.ALE804 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALE804, 0, 99);


          BUREAU_ATTRIBUTES.ALL001 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL001, 0, 99);
          BUREAU_ATTRIBUTES.ALL002 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL002, 0, 99);
          BUREAU_ATTRIBUTES.ALL003 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL003, 0, 99);
          BUREAU_ATTRIBUTES.ALL005 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL005, 0, 99);
          BUREAU_ATTRIBUTES.ALL006 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL006, 0, 99);
          BUREAU_ATTRIBUTES.ALL007 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL007, 0, 99);
          BUREAU_ATTRIBUTES.ALL010 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL010, 0, 99);
          BUREAU_ATTRIBUTES.ALL021 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL021, 0, 99);
          BUREAU_ATTRIBUTES.ALL022 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL022, 0, 99);
          BUREAU_ATTRIBUTES.ALL023 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL023, 0, 99);
          BUREAU_ATTRIBUTES.ALL024 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL024, 0, 99);
          BUREAU_ATTRIBUTES.ALL026 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL026, 0, 99);
          BUREAU_ATTRIBUTES.ALL051 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL051, 0, 99);
          BUREAU_ATTRIBUTES.ALL052 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL052, 0, 99);
          BUREAU_ATTRIBUTES.ALL062 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL062, 0, 99);
          BUREAU_ATTRIBUTES.ALL064 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL064, 0, 99);
          BUREAU_ATTRIBUTES.ALL067 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL067, 0, 99);
          BUREAU_ATTRIBUTES.ALL071 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL071, 0, 99);
          BUREAU_ATTRIBUTES.ALL074 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL074, 0, 99);
          BUREAU_ATTRIBUTES.ALL075 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL075, 0, 99);
          BUREAU_ATTRIBUTES.ALL076 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL076, 0, 99);
          BUREAU_ATTRIBUTES.ALL077 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL077, 0, 99);
          BUREAU_ATTRIBUTES.ALL078 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL078, 0, 99);
          BUREAU_ATTRIBUTES.ALL080 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL080, 0, 99);
          BUREAU_ATTRIBUTES.ALL081 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL081, 0, 99);
          BUREAU_ATTRIBUTES.ALL082 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL082, 0, 99);
          BUREAU_ATTRIBUTES.ALL084 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL084, 0, 99);
          BUREAU_ATTRIBUTES.ALL085 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL085, 0, 99);
          BUREAU_ATTRIBUTES.ALL086 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL086, 0, 99);
          BUREAU_ATTRIBUTES.ALL090 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL090, 0, 99);
          BUREAU_ATTRIBUTES.ALL091 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL091, 0, 99);
          BUREAU_ATTRIBUTES.ALL092 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL092, 0, 99);
          BUREAU_ATTRIBUTES.ALL101 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL101, 0, 99);
          BUREAU_ATTRIBUTES.ALL102 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL102, 0, 99);
          BUREAU_ATTRIBUTES.ALL103 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL103, 0, 99);
          BUREAU_ATTRIBUTES.ALL104 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL104, 0, 99);
          BUREAU_ATTRIBUTES.ALL105 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL105, 0, 99);
          BUREAU_ATTRIBUTES.ALL106 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL106, 0, 99);
          BUREAU_ATTRIBUTES.ALL107 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL107, 0, 99);
          BUREAU_ATTRIBUTES.ALL108 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL108, 0, 99);
          BUREAU_ATTRIBUTES.ALL109 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL109, 0, 99);
          BUREAU_ATTRIBUTES.ALL110 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL110, 0, 99);
          BUREAU_ATTRIBUTES.ALL111 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL111, 0, 99);
          BUREAU_ATTRIBUTES.ALL112 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL112, 0, 99);
          BUREAU_ATTRIBUTES.ALL113 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL113, 0, 99);
          BUREAU_ATTRIBUTES.ALL114 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL114, 0, 99);
          BUREAU_ATTRIBUTES.ALL115 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL115, 0, 99);
          BUREAU_ATTRIBUTES.ALL116 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL116, 0, 99);
          BUREAU_ATTRIBUTES.ALL117 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL117, 0, 99);
          BUREAU_ATTRIBUTES.ALL118 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL118, 0, 99);
          BUREAU_ATTRIBUTES.ALL119 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL119, 0, 99);
          BUREAU_ATTRIBUTES.ALL122 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL122, 0, 99);
          BUREAU_ATTRIBUTES.ALL124 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL124, 0, 99);
          BUREAU_ATTRIBUTES.ALL125 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL125, 0, 99);
          BUREAU_ATTRIBUTES.ALL126 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL126, 0, 99);
          BUREAU_ATTRIBUTES.ALL127 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL127, 0, 99);
          BUREAU_ATTRIBUTES.ALL128 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL128, 0, 99);
          BUREAU_ATTRIBUTES.ALL129 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL129, 0, 99);
          BUREAU_ATTRIBUTES.ALL130 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL130, 0, 99);
          BUREAU_ATTRIBUTES.ALL131 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL131, 0, 99);
          BUREAU_ATTRIBUTES.ALL134 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL134, 0, 99);
          BUREAU_ATTRIBUTES.ALL136 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL136, 0, 99);
          BUREAU_ATTRIBUTES.ALL141 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL141, 0, 99);
          BUREAU_ATTRIBUTES.ALL142 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL142, 0, 99);
          BUREAU_ATTRIBUTES.ALL143 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL143, 0, 99);
          BUREAU_ATTRIBUTES.ALL144 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL144, 0, 99);
          BUREAU_ATTRIBUTES.ALL145 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL145, 0, 99);
          BUREAU_ATTRIBUTES.ALL146 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL146, 0, 99);
          BUREAU_ATTRIBUTES.ALL201 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL201, 0, 999999999);
          BUREAU_ATTRIBUTES.ALL207 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL207, 0, 999999999);
          BUREAU_ATTRIBUTES.ALL208 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL208, 0, 999999999);
          BUREAU_ATTRIBUTES.ALL301 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL301, 0, 999999999);
          BUREAU_ATTRIBUTES.ALL501 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.ALL501);
          BUREAU_ATTRIBUTES.ALL502 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.ALL502);
          BUREAU_ATTRIBUTES.ALL503 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.ALL503);
          BUREAU_ATTRIBUTES.ALL504 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.ALL504);
          BUREAU_ATTRIBUTES.ALL505 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.ALL505);

          BUREAU_ATTRIBUTES.ALL601 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.ALL601);
          BUREAU_ATTRIBUTES.ALL602 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.ALL602);
          BUREAU_ATTRIBUTES.ALL701 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL701, 0, 600);
          BUREAU_ATTRIBUTES.ALL702 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL702, 0, 9999);

          BUREAU_ATTRIBUTES.ALL720 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL720, 0, 9999);
          BUREAU_ATTRIBUTES.ALL724 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL724, 0, 9999);
          BUREAU_ATTRIBUTES.ALL740 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL740, 0, 9999);
          BUREAU_ATTRIBUTES.ALL760 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL760, 0, 9999);
          BUREAU_ATTRIBUTES.ALL780 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL780, 0, 9999);
          BUREAU_ATTRIBUTES.ALL790 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL790, 0, 9999);
          BUREAU_ATTRIBUTES.ALL801 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL801, 0, 99);
          BUREAU_ATTRIBUTES.ALL803 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL803, 0, 99);
          BUREAU_ATTRIBUTES.ALL804 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL804, 0, 99);
          BUREAU_ATTRIBUTES.ALL805 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL805, 0, 9999);
          BUREAU_ATTRIBUTES.ALL806 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL806, 0, 99);
          BUREAU_ATTRIBUTES.ALL807 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ALL807, 0, 99);

          BUREAU_ATTRIBUTES.AUT001 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.AUT001, 0, 99);
          BUREAU_ATTRIBUTES.AUT071 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.AUT071, 0, 99);
          BUREAU_ATTRIBUTES.AUT720 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.AUT720, 0, 9999);
          BUREAU_ATTRIBUTES.BAC001 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC001, 0, 9999);
          BUREAU_ATTRIBUTES.BAC002 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC002, 0, 99);
          BUREAU_ATTRIBUTES.BAC005 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC005, 0, 99);
          BUREAU_ATTRIBUTES.BAC007 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC007, 0, 99);
          BUREAU_ATTRIBUTES.BAC022 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC022, 0, 99);
          BUREAU_ATTRIBUTES.BAC023 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC023, 0, 99);
          BUREAU_ATTRIBUTES.BAC026 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC026, 0, 99);
          BUREAU_ATTRIBUTES.BAC028 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC028, 0, 99);
          BUREAU_ATTRIBUTES.BAC031 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC031, 0, 99);
          BUREAU_ATTRIBUTES.BAC035 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC035, 0, 99);
          BUREAU_ATTRIBUTES.BAC037 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC037, 0, 99);
          BUREAU_ATTRIBUTES.BAC042 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC042, 0, 99);
          BUREAU_ATTRIBUTES.BAC044 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC044, 0, 99);
          BUREAU_ATTRIBUTES.BAC045 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC045, 0, 99);
          BUREAU_ATTRIBUTES.BAC071 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC071, 0, 99);
          BUREAU_ATTRIBUTES.BAC074 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC074, 0, 99);
          BUREAU_ATTRIBUTES.BAC075 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC075, 0, 99);
          BUREAU_ATTRIBUTES.BAC076 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC076, 0, 99);
          BUREAU_ATTRIBUTES.BAC077 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC077, 0, 99);
          BUREAU_ATTRIBUTES.BAC078 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC078, 0, 99);
          BUREAU_ATTRIBUTES.BAC080 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC080, 0, 99);
          BUREAU_ATTRIBUTES.BAC081 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC081, 0, 99);
          BUREAU_ATTRIBUTES.BAC084 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC084, 0, 99);

          BUREAU_ATTRIBUTES.BAC303 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC303, 0, 999999999);
          BUREAU_ATTRIBUTES.BAC401 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC401, 0, 999999999);

          BUREAU_ATTRIBUTES.BAC501 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.BAC501);
          BUREAU_ATTRIBUTES.BAC502 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.BAC502);
          BUREAU_ATTRIBUTES.BAC503 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.BAC503);
          BUREAU_ATTRIBUTES.BAC601 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.BAC601);
          BUREAU_ATTRIBUTES.BAC801 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC801, 0, 99);
          BUREAU_ATTRIBUTES.BAC804 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BAC804, 0, 99);

          BUREAU_ATTRIBUTES.BNK001 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BNK001, 0, 99);
          BUREAU_ATTRIBUTES.BNK026 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BNK026, 0, 99);
          BUREAU_ATTRIBUTES.BRR026 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.BRR026, 0, 99);
          BUREAU_ATTRIBUTES.CAP026 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.CAP026, 0, 99);
          BUREAU_ATTRIBUTES.CAP801 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.CAP801, 0, 99);
          BUREAU_ATTRIBUTES.CRU001 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.CRU001, 0, 99);
          BUREAU_ATTRIBUTES.FIL001 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.FIL001, 0, 99);
          BUREAU_ATTRIBUTES.FIL022 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.FIL022, 0, 99);
          BUREAU_ATTRIBUTES.FIL023 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.FIL023, 0, 99);
          BUREAU_ATTRIBUTES.FIN001 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.FIN001, 0, 99);
          BUREAU_ATTRIBUTES.FIN026 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.FIN026, 0, 99);
          BUREAU_ATTRIBUTES.FIN601 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.FIN601);
          BUREAU_ATTRIBUTES.FIN801 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.FIN801, 0, 99);
          BUREAU_ATTRIBUTES.GBL007 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.GBL007, 0, 99);
          BUREAU_ATTRIBUTES.HEQ001 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.HEQ001, 0, 99);
          BUREAU_ATTRIBUTES.ILN001 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN001, 0, 99);
          BUREAU_ATTRIBUTES.ILN002 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN002, 0, 99);
          BUREAU_ATTRIBUTES.ILN005 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN005, 0, 99);
          BUREAU_ATTRIBUTES.ILN006 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN006, 0, 99);
          BUREAU_ATTRIBUTES.ILN007 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN007, 0, 99);
          BUREAU_ATTRIBUTES.ILN022 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN022, 0, 99);
          BUREAU_ATTRIBUTES.ILN023 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN023, 0, 99);
          BUREAU_ATTRIBUTES.ILN026 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN026, 0, 99);
          BUREAU_ATTRIBUTES.ILN064 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN064, 0, 99);
          BUREAU_ATTRIBUTES.ILN067 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN067, 0, 99);
          BUREAU_ATTRIBUTES.ILN071 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN071, 0, 99);
          BUREAU_ATTRIBUTES.ILN074 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN074, 0, 99);
          BUREAU_ATTRIBUTES.ILN075 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN075, 0, 99);
          BUREAU_ATTRIBUTES.ILN076 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN076, 0, 99);
          BUREAU_ATTRIBUTES.ILN077 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN077, 0, 99);
          BUREAU_ATTRIBUTES.ILN078 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN078, 0, 99);
          BUREAU_ATTRIBUTES.ILN080 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN080, 0, 99);
          BUREAU_ATTRIBUTES.ILN081 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN081, 0, 99);
          BUREAU_ATTRIBUTES.ILN084 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN084, 0, 99);
          BUREAU_ATTRIBUTES.ILN085 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN085, 0, 99);
          BUREAU_ATTRIBUTES.ILN086 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN086, 0, 99);
          BUREAU_ATTRIBUTES.ILN101 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN101, 0, 99);
          BUREAU_ATTRIBUTES.ILN102 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN102, 0, 99);
          BUREAU_ATTRIBUTES.ILN103 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN103, 0, 99);
          BUREAU_ATTRIBUTES.ILN104 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN104, 0, 99);
          BUREAU_ATTRIBUTES.ILN105 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN105, 0, 99);
          BUREAU_ATTRIBUTES.ILN106 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN106, 0, 99);
          BUREAU_ATTRIBUTES.ILN107 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN107, 0, 99);
          BUREAU_ATTRIBUTES.ILN108 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN108, 0, 99);
          BUREAU_ATTRIBUTES.ILN109 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN109, 0, 99);
          BUREAU_ATTRIBUTES.ILN110 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN110, 0, 99);
          BUREAU_ATTRIBUTES.ILN111 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN111, 0, 99);
          BUREAU_ATTRIBUTES.ILN112 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN112, 0, 99);
          BUREAU_ATTRIBUTES.ILN113 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN113, 0, 99);
          BUREAU_ATTRIBUTES.ILN114 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN114, 0, 99);
          BUREAU_ATTRIBUTES.ILN115 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN115, 0, 99);
          BUREAU_ATTRIBUTES.ILN116 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN116, 0, 99);
          BUREAU_ATTRIBUTES.ILN117 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN117, 0, 99);
          BUREAU_ATTRIBUTES.ILN118 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN118, 0, 99);
          BUREAU_ATTRIBUTES.ILN119 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN119, 0, 99);
          BUREAU_ATTRIBUTES.ILN122 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN122, 0, 99);
          BUREAU_ATTRIBUTES.ILN124 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN124, 0, 99);
          BUREAU_ATTRIBUTES.ILN125 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN125, 0, 99);
          BUREAU_ATTRIBUTES.ILN126 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN126, 0, 99);
          BUREAU_ATTRIBUTES.ILN127 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN127, 0, 99);
          BUREAU_ATTRIBUTES.ILN128 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN128, 0, 99);
          BUREAU_ATTRIBUTES.ILN129 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN129, 0, 99);
          BUREAU_ATTRIBUTES.ILN130 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN130, 0, 99);
          BUREAU_ATTRIBUTES.ILN201 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN201, 0, 999999999);
          BUREAU_ATTRIBUTES.ILN301 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN301, 0, 999999999);


          BUREAU_ATTRIBUTES.ILN501 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.ILN501);
          BUREAU_ATTRIBUTES.ILN502 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.ILN502);
          BUREAU_ATTRIBUTES.ILN503 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.ILN503);
          BUREAU_ATTRIBUTES.ILN504 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.ILN504);
          BUREAU_ATTRIBUTES.ILN601 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.ILN601);
          BUREAU_ATTRIBUTES.ILN701 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN701, 0, 600);
          BUREAU_ATTRIBUTES.ILN702 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN702, 0, 9999);

          BUREAU_ATTRIBUTES.ILN720 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN720, 0, 9999);
          BUREAU_ATTRIBUTES.ILN724 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN724, 0, 9999);
          BUREAU_ATTRIBUTES.ILN740 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN740, 0, 9999);
          BUREAU_ATTRIBUTES.ILN801 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN801, 0, 99);
          BUREAU_ATTRIBUTES.ILN804 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.ILN804, 0, 99);

         BUREAU_ATTRIBUTES.IRC004 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.IRC004, 0, 99);
          BUREAU_ATTRIBUTES.IRC005 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.IRC005, 0, 99);

          BUREAU_ATTRIBUTES.LFI801 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.LFI801, 0, 99);
          BUREAU_ATTRIBUTES.REF001 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REF001, 0, 99);
          BUREAU_ATTRIBUTES.REP001 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP001, 0, 99);
          BUREAU_ATTRIBUTES.REP002 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP002, 0, 99);
          BUREAU_ATTRIBUTES.REP005 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP005, 0, 99);
          BUREAU_ATTRIBUTES.REP026 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP026, 0, 99);
          BUREAU_ATTRIBUTES.REP071 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP071, 0, 99);
          BUREAU_ATTRIBUTES.REP074 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP074, 0, 99);
          BUREAU_ATTRIBUTES.REP075 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP075, 0, 99);
          BUREAU_ATTRIBUTES.REP076 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP076, 0, 99);
          BUREAU_ATTRIBUTES.REP077 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP077, 0, 99);
          BUREAU_ATTRIBUTES.REP078 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP078, 0, 99);
          BUREAU_ATTRIBUTES.REP080 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP080, 0, 99);
          BUREAU_ATTRIBUTES.REP081 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP081, 0, 99);
          BUREAU_ATTRIBUTES.REP084 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REP084, 0, 99);

          BUREAU_ATTRIBUTES.REP501 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.REP501);
          BUREAU_ATTRIBUTES.REP503 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.REP503);
          BUREAU_ATTRIBUTES.REP601 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.REP601);

          BUREAU_ATTRIBUTES.REV001 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV001, 0, 99);
          BUREAU_ATTRIBUTES.REV002 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV002, 0, 99);
          BUREAU_ATTRIBUTES.REV005 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV005, 0, 99);
          BUREAU_ATTRIBUTES.REV006 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV006, 0, 99);
          BUREAU_ATTRIBUTES.REV007 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV007, 0, 99);
          BUREAU_ATTRIBUTES.REV022 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV022, 0, 99);
          BUREAU_ATTRIBUTES.REV023 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV023, 0, 99);
          BUREAU_ATTRIBUTES.REV024 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV024, 0, 99);
          BUREAU_ATTRIBUTES.REV026 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV026, 0, 99);
          BUREAU_ATTRIBUTES.REV028 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV028, 0, 99);
          BUREAU_ATTRIBUTES.REV038 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV038, 0, 99);
          BUREAU_ATTRIBUTES.REV044 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV044, 0, 99);
          BUREAU_ATTRIBUTES.REV064 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV064, 0, 99);
          BUREAU_ATTRIBUTES.REV067 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV067, 0, 99);
          BUREAU_ATTRIBUTES.REV071 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV071, 0, 99);
          BUREAU_ATTRIBUTES.REV074 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV074, 0, 99);
          BUREAU_ATTRIBUTES.REV075 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV075, 0, 99);
          BUREAU_ATTRIBUTES.REV076 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV076, 0, 99);
          BUREAU_ATTRIBUTES.REV077 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV077, 0, 99);
          BUREAU_ATTRIBUTES.REV078 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV078, 0, 99);
          BUREAU_ATTRIBUTES.REV080 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV080, 0, 99);
          BUREAU_ATTRIBUTES.REV081 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV081, 0, 99);
          BUREAU_ATTRIBUTES.REV084 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV084, 0, 99);
          BUREAU_ATTRIBUTES.REV085 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV085, 0, 99);
          BUREAU_ATTRIBUTES.REV086 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV086, 0, 99);
          BUREAU_ATTRIBUTES.REV101 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV101, 0, 99);
          BUREAU_ATTRIBUTES.REV102 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV102, 0, 99);
          BUREAU_ATTRIBUTES.REV103 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV103, 0, 99);
          BUREAU_ATTRIBUTES.REV104 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV104, 0, 99);
          BUREAU_ATTRIBUTES.REV105 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV105, 0, 99);
          BUREAU_ATTRIBUTES.REV106 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV106, 0, 99);
          BUREAU_ATTRIBUTES.REV107 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV107, 0, 99);
          BUREAU_ATTRIBUTES.REV108 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV108, 0, 99);
          BUREAU_ATTRIBUTES.REV109 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV109, 0, 99);
          BUREAU_ATTRIBUTES.REV110 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV110, 0, 99);
          BUREAU_ATTRIBUTES.REV111 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV111, 0, 99);
          BUREAU_ATTRIBUTES.REV112 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV112, 0, 99);
          BUREAU_ATTRIBUTES.REV113 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV113, 0, 99);
          BUREAU_ATTRIBUTES.REV114 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV114, 0, 99);
          BUREAU_ATTRIBUTES.REV115 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV115, 0, 99);
          BUREAU_ATTRIBUTES.REV116 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV116, 0, 99);
          BUREAU_ATTRIBUTES.REV117 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV117, 0, 99);
          BUREAU_ATTRIBUTES.REV118 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV118, 0, 99);
          BUREAU_ATTRIBUTES.REV119 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV119, 0, 99);
          BUREAU_ATTRIBUTES.REV122 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV122, 0, 99);
          BUREAU_ATTRIBUTES.REV124 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV124, 0, 99);
          BUREAU_ATTRIBUTES.REV125 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV125, 0, 99);
          BUREAU_ATTRIBUTES.REV126 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV126, 0, 99);
          BUREAU_ATTRIBUTES.REV127 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV127, 0, 99);
          BUREAU_ATTRIBUTES.REV128 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV128, 0, 99);
          BUREAU_ATTRIBUTES.REV129 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV129, 0, 99);
          BUREAU_ATTRIBUTES.REV130 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV130, 0, 99);
          BUREAU_ATTRIBUTES.REV201 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV201, 0, 999999999);

          BUREAU_ATTRIBUTES.REV301 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV301, 0, 999999999);

          BUREAU_ATTRIBUTES.REV401 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV401, 0, 999999999);


          BUREAU_ATTRIBUTES.REV501 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.REV501);
          BUREAU_ATTRIBUTES.REV502 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.REV502);
          BUREAU_ATTRIBUTES.REV503 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.REV503);
          BUREAU_ATTRIBUTES.REV504 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.REV504);

          BUREAU_ATTRIBUTES.REV601 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.REV601);
          BUREAU_ATTRIBUTES.REV701 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV701, 0, 600);
          BUREAU_ATTRIBUTES.REV702 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV702, 0, 9999);

          BUREAU_ATTRIBUTES.REV720 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV720, 0, 9999);
          BUREAU_ATTRIBUTES.REV724 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV724, 0, 9999);
          BUREAU_ATTRIBUTES.REV740 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.REV740, 0, 9999);

          BUREAU_ATTRIBUTES.RTI026 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTI026, 0, 99);
          BUREAU_ATTRIBUTES.RTL001 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL001, 0, 99);
          BUREAU_ATTRIBUTES.RTL002 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL002, 0, 99);
          BUREAU_ATTRIBUTES.RTL005 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL005, 0, 99);
          BUREAU_ATTRIBUTES.RTL026 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL026, 0, 99);
          BUREAU_ATTRIBUTES.RTL071 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL071, 0, 99);
          BUREAU_ATTRIBUTES.RTL074 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL074, 0, 99);
          BUREAU_ATTRIBUTES.RTL075 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL075, 0, 99);
          BUREAU_ATTRIBUTES.RTL076 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL076, 0, 99);
          BUREAU_ATTRIBUTES.RTL077 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL077, 0, 99);
          BUREAU_ATTRIBUTES.RTL078 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL078, 0, 99);
          BUREAU_ATTRIBUTES.RTL080 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL080, 0, 99);
          BUREAU_ATTRIBUTES.RTL081 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL081, 0, 99);
          BUREAU_ATTRIBUTES.RTL084 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTL084, 0, 99);
          BUREAU_ATTRIBUTES.RTL501 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.RTL501);
          BUREAU_ATTRIBUTES.RTL502 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.RTL502);
          BUREAU_ATTRIBUTES.RTL503 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.RTL503);

          BUREAU_ATTRIBUTES.RTR001 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR001, 0, 99);
          BUREAU_ATTRIBUTES.RTR002 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR002, 0, 99);
          BUREAU_ATTRIBUTES.RTR005 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR005, 0, 99);
          BUREAU_ATTRIBUTES.RTR007 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR007, 0, 99);
          BUREAU_ATTRIBUTES.RTR022 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR022, 0, 99);
          BUREAU_ATTRIBUTES.RTR023 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR023, 0, 99);
          BUREAU_ATTRIBUTES.RTR026 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR026, 0, 99);
          BUREAU_ATTRIBUTES.RTR028 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR028, 0, 99);
          BUREAU_ATTRIBUTES.RTR031 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR031, 0, 99);
          BUREAU_ATTRIBUTES.RTR035 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR035, 0, 99);
          BUREAU_ATTRIBUTES.RTR044 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR044, 0, 99);
          BUREAU_ATTRIBUTES.RTR071 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR071, 0, 99);
          BUREAU_ATTRIBUTES.RTR074 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR074, 0, 99);
          BUREAU_ATTRIBUTES.RTR075 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR075, 0, 99);
          BUREAU_ATTRIBUTES.RTR076 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR076, 0, 99);
          BUREAU_ATTRIBUTES.RTR077 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR077, 0, 99);
          BUREAU_ATTRIBUTES.RTR078 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR078, 0, 99);
          BUREAU_ATTRIBUTES.RTR080 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR080, 0, 99);
          BUREAU_ATTRIBUTES.RTR081 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR081, 0, 99);
          BUREAU_ATTRIBUTES.RTR084 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR084, 0, 99);
          BUREAU_ATTRIBUTES.RTR303 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR303, 0, 999999999);
          BUREAU_ATTRIBUTES.RTR401 := dm_ValidateAttribute(BUREAU_ATTRIBUTES.RTR401, 0, 999999999);

          BUREAU_ATTRIBUTES.RTR501 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.RTR501);
          BUREAU_ATTRIBUTES.RTR601 := dm_ValidateAttributeGRIDLimit(BUREAU_ATTRIBUTES.RTR601);

    </ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_AssignInProcessNegFileDetails" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="0.0" Name="xCount" Type="numeric"/>
</Locals>
<Description>Assign Current Neg File to calculate</Description>
<ExpressionText>result := null;

//loop through all available optimized offers
for every Application.CreditApplication.PersonalApplicant.NegFileDetails in dor_NegFileDetailsUnEvaluated do

    //set the inprocess value for only one optimized offer
    xCount := xCount + 1;
    if(xCount = 1) then
        NegFileDetails.InProcess := 1;
    endif
 
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_SetECOAReasonCodesCCC" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="false" Name="xIRC" Type="boolean"/>
<Local InitialValue="false" Name="xNegFileFlag" Type="boolean"/>
<Local InitialValue="null" Name="xECOAReason" Type="ECOA_REASON"/>
<Local InitialValue="null" Name="xECOAReasonList" Type="ECOA_REASON_LIST"/>
<Local InitialValue="false" Name="xMismatchRedFlag" Type="boolean"/>
<Local InitialValue="&quot;&quot;" Name="xScorable" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xClarityHit" Type="string"/>
<Local InitialValue="0.0" Name="xLNScore" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xInitialCreditClass" Type="string"/>
<Local InitialValue="false" Name="xLettersCreditClass" Type="boolean"/>
<Local InitialValue="false" Name="xGamingVelocity" Type="boolean"/>
</Locals>
<Description>Populate ECOA Reason List with the appropriate flags fro CCC flow</Description>
<ExpressionText>result:=0;
xECOAReasonList:= new ECOA_REASON_LIST;

//ECOA Neg File Flag
for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to CreditApplication do
      if(RESULT_NEG_CREDIT_CLASS&lt;&gt;null and RESULT_NEG_CREDIT_CLASS&lt;&gt;"") then
                xNegFileFlag:=true;
        endif
endfor
for every Application.CreditApplication.CreditApplicationOutput relative to CreditApplication do
if(CreditApplicationOutput.GamingVelocity &lt;&gt; null ) then
               xGamingVelocity := CreditApplicationOutput.GamingVelocity;
endif
endfor
		
//Is Clarity Hit
xClarityHit := CreditApplication.isClarityHit;

//ECOA Mismatch, Red, and OFAC Flags
for Every Application.CreditApplication.PersonalApplicant relative to CreditApplication do

        //ECOA OFAC Flags Moved to dm_SetECOAReasonHotNameOFACC

        //is Scorable
        xScorable := dm_isScorable;
		
        //LN Score
        xLNScore := dm_ScoreLexis;
		
        //FINAL CREDIT CLASS
       for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
              if(PersonalApplicantOutput.INITIAL_CREDIT_CLASS &lt;&gt; null) then
                      xInitialCreditClass := PersonalApplicantOutput.INITIAL_CREDIT_CLASS;
              endif   
			  
              if(PersonalApplicantOutput.FINAL_CREDIT_CLASS &lt;&gt; null and  CreditApplication.REVIEW_CREDIT_CLASS &lt;&gt; null and CreditApplication.REVIEW_CREDIT_CLASS ="S")then
                            xMismatchRedFlag:=true;
              endif
       endfor
	   
      
	   
endfor

//ECOA IRC FLag
for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to CreditApplication do
        if(IRC_CREDIT_CLASS&lt;&gt;null and IRC_CREDIT_CLASS&lt;&gt;"") then
                xIRC:=true;
        endif
endfor

xLettersCreditClass := InStringList(xInitialCreditClass, "C,D,H,I,L,Y,S", ","); 

//Attached ECOA Reasons to ECOA Reson List
if(xMismatchRedFlag) then
        xECOAReason:=  new ECOA_REASON;
        xECOAReason.ECOA_PRINTABLE:="Y";
        xECOAReason.ECOA_RANK:="50";
        xECOAReason.ECOA_REASON_CODE:="0050";
        Attach(xECOAReasonList,xECOAReason);
endif
if(xNegFileFlag) then
        xECOAReason:= new ECOA_REASON;
        xECOAReason.ECOA_PRINTABLE:="Y";
        xECOAReason.ECOA_RANK:="300";
        xECOAReason.ECOA_REASON_CODE:="0300";
        Attach(xECOAReasonList,xECOAReason);
endif
if(xIRC) then
        xECOAReason:= new ECOA_REASON;
        xECOAReason.ECOA_PRINTABLE:="Y";
        xECOAReason.ECOA_RANK:="700";
        xECOAReason.ECOA_REASON_CODE:="0700";
        Attach(xECOAReasonList,xECOAReason);
endif

if(xLettersCreditClass = true )then
	if(xScorable = "N" ) then
		if (xLNScore &lt;=500) then
			xECOAReason:= new ECOA_REASON;
			xECOAReason.ECOA_PRINTABLE:="Y";
			xECOAReason.ECOA_RANK:="600";
			xECOAReason.ECOA_REASON_CODE:="0600";
			Attach(xECOAReasonList,xECOAReason);
		else 
			xECOAReason:= new ECOA_REASON;
			xECOAReason.ECOA_PRINTABLE:="Y";
       		xECOAReason.ECOA_RANK:="900";
        	xECOAReason.ECOA_REASON_CODE:="0900";
        Attach(xECOAReasonList,xECOAReason);
		endif
	else
			xECOAReason:= new ECOA_REASON;
			xECOAReason.ECOA_PRINTABLE:="Y";
       		xECOAReason.ECOA_RANK:="900";
        	xECOAReason.ECOA_REASON_CODE:="0900";
        Attach(xECOAReasonList,xECOAReason);
	endif
endif

if(xGamingVelocity)then
        xECOAReason:= new ECOA_REASON;
        xECOAReason.ECOA_PRINTABLE:="Y";
        xECOAReason.ECOA_RANK:="350";
        xECOAReason.ECOA_REASON_CODE:="0350";
        Attach(xECOAReasonList,xECOAReason);
endif 

//Attach ECOA Reason List to Credit Class
Attach(CreditApplication,xECOAReasonList);

</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_CheckWorkflowType" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Determines the workflowType</Description>
<ExpressionText>result:="INV_WORKTYPE";

For Every Application.CreditApplication relative to Application do
	  if (CreditApplication.WORKFLOW_TYPE = "001" or CreditApplication.WORKFLOW_TYPE = "" or CreditApplication.WORKFLOW_TYPE = NULL ) then
	    result := "CREDITAPPTYPE";
		else if (CreditApplication.WORKFLOW_TYPE = "002") then
		  result := "BYOD";
		 else if(CreditApplication.WORKFLOW_TYPE = "003") then
		   result := "PSWL";
		endif
		endif
	  endif
Endfor

</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_ValidateAttributeGRIDLimit" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iValue" Type="numeric"/>
</Inputs>
<Locals/>
<Description>Validate values</Description>
<ExpressionText>result := 0;

if(InNumberList(  iValue, "0, 1, 30, 34, 60, 90, 120, 150, 180, 400", "," ) ) then
                 result := iValue;
endif

</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsTUBureau" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="string"/>
</Inputs>
<Locals>
<Local InitialValue="null" Name="xProfileDate" Type="timestamp"/>
</Locals>
<Description>Generate filters for TU bureau</Description>
<ExpressionText>result := null;

//set the Profile Date timestamp object
if(iProfileDate &lt;&gt; null) then
            xProfileDate := dm_GetParsedDateYYYYMM(iProfileDate);
endif



for every Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES.NORMALIZED_BUREAU_SEGMENTS relative to PersonalApplicant do
  
    //Global Filters
    dm_STAGGFiltersAndFunctionsTUProfileGlobal(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);
 
    //Tradeline Filters
    dm_STAGGFiltersAndFunctionsTUTradeline(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);


    //Accuont Status Filters
    dm_STAGGFiltersAndFunctionsTUAccountStatus(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);
  
 
     //Amount Filters
    dm_STAGGFiltersAndFunctionsTUAmount(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);
 
  
     //Accuont Type Filters
    dm_STAGGFiltersAndFunctionsTUAccountType(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);
 
 
     //Group Functions Filters
    dm_STAGGFiltersAndFunctionsTUGroupFilters(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);  
 

 
     //MonthsAgo Filters
    dm_STAGGFiltersAndFunctionsTUMonthsAgo(xProfileDate, NORMALIZED_BUREAU_SEGMENTS); 
 
 
    //Functions Filters
    dm_STAGGFiltersAndFunctionsTUFunctions(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);  
 
 
    //Dates Filters
    dm_STAGGFiltersAndFunctionsTUDates(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);  
  
 
    //Grid Filters
    dm_STAGGFiltersAndFunctionsTUGridFilters(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);  
  


    //Public Record Filters
    dm_STAGGFiltersAndFunctionsTUPublicRecord(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);  
  

    //Inquiry Filters
    dm_STAGGFiltersAndFunctionsTUInquiry(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);  
  
	//IRC
	dm_STAGGFiltersAndFunctionsTUIRC(xProfileDate, NORMALIZED_BUREAU_SEGMENTS);

endfor 
//End 


</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_set_CreditClass3" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Set Credit class 3</Description>
<ExpressionText>for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do
	BusinessApplicantOutput.INITIAL_CREDIT_CLASS:="3";
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesALE" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xMaximum" Type="numeric"/>
</Locals>
<Description>calculates ALE Attributes</Description>
<ExpressionText>result := null;

          //ALE001
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.ALE001 := iBUREAU_ATTRIBUTES.ALE001 + 1;
          endif

          //ALE002
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.ALE002 := iBUREAU_ATTRIBUTES.ALE002 + 1;
          endif

          //ALE005
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.ALE005 := iBUREAU_ATTRIBUTES.ALE005 + 1;
          endif

          //ALE007
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN) then
                iBUREAU_ATTRIBUTES.ALE007 := iBUREAU_ATTRIBUTES.ALE007 + 1;
          endif

          //ALE022
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 12) then
                iBUREAU_ATTRIBUTES.ALE022 := iBUREAU_ATTRIBUTES.ALE022 + 1;
          endif

          //ALE023
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_OPEN &lt;= 24) then
                iBUREAU_ATTRIBUTES.ALE023 := iBUREAU_ATTRIBUTES.ALE023 + 1;
          endif

          //ALE026
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.ALE026 := iBUREAU_ATTRIBUTES.ALE026 + 1;
          endif

          //ALE071
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) = 1) then
                iBUREAU_ATTRIBUTES.ALE071 := iBUREAU_ATTRIBUTES.ALE071 + 1;
          endif
       
          //ALE074
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 34) then
                iBUREAU_ATTRIBUTES.ALE074 := iBUREAU_ATTRIBUTES.ALE074 + 1;
          endif

          //ALE075
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30) then
                iBUREAU_ATTRIBUTES.ALE075 := iBUREAU_ATTRIBUTES.ALE075 + 1;
          endif

          //ALE076
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 60) then
                iBUREAU_ATTRIBUTES.ALE076 := iBUREAU_ATTRIBUTES.ALE076 + 1;
          endif

          //ALE077
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) = 60) then
                iBUREAU_ATTRIBUTES.ALE077 := iBUREAU_ATTRIBUTES.ALE077 + 1;
          endif

          //ALE078
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 60) then
                iBUREAU_ATTRIBUTES.ALE078 := iBUREAU_ATTRIBUTES.ALE078 + 1;
          endif

          //ALE080
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 90 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 180) then
                iBUREAU_ATTRIBUTES.ALE080 := iBUREAU_ATTRIBUTES.ALE080 + 1;
          endif

          //ALE081
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 90) then
                iBUREAU_ATTRIBUTES.ALE081 := iBUREAU_ATTRIBUTES.ALE081 + 1;
          endif

          //ALE084
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER = 400) then
                iBUREAU_ATTRIBUTES.ALE084 := iBUREAU_ATTRIBUTES.ALE084 + 1;
          endif

          //ALE501
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                xMaximum := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD);
                iBUREAU_ATTRIBUTES.ALE501 := MAX(iBUREAU_ATTRIBUTES.ALE501, xMaximum);
          endif

          //ALE502
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.ALE502 := MAX(iBUREAU_ATTRIBUTES.ALE502, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD12);
          endif

          //ALE503
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.ALE503 := MAX(iBUREAU_ATTRIBUTES.ALE503, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24);
          endif

          //ALE601
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN) then
                iBUREAU_ATTRIBUTES.ALE601 := MAX(iBUREAU_ATTRIBUTES.ALE601, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS);
          endif

          //ALE720
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL &lt;= 9998) then
                iBUREAU_ATTRIBUTES.ALE720 := MIN(iBUREAU_ATTRIBUTES.ALE720, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRDDEL);
          endif

          //ALE724
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36 &lt;= 9998) then
                iBUREAU_ATTRIBUTES.ALE724 := MIN(iBUREAU_ATTRIBUTES.ALE724, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD36);
          endif

          //ALE740
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P &lt;= 9998) then
                iBUREAU_ATTRIBUTES.ALE740 := MIN(iBUREAU_ATTRIBUTES.ALE740, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_GRD90P);
          endif

          //ALE801
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE_INQ) then
                iBUREAU_ATTRIBUTES.ALE801 := iBUREAU_ATTRIBUTES.ALE801 + 1;
          endif 

          //ALE804
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE_INQ AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_INQ &lt;= 12) then
                iBUREAU_ATTRIBUTES.ALE804 := iBUREAU_ATTRIBUTES.ALE804 + 1;
          endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_SetECOAReasonCodesCCC_MismatchRedFlag" ResultType="boolean" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Do not delete this dm as it gives compilation error</Description>
<ExpressionText>result:=false;</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_EFXDeDupInquiry" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
</Inputs>
<Locals>
<Local InitialValue="9999" Name="xPrevDaysInq" Type="numeric"/>
<Local InitialValue="-1" Name="xPrevInqToDedup" Type="numeric"/>
<Local InitialValue="0.0" Name="xNewInqToDedup" Type="numeric"/>
<Local InitialValue="null" Name="xInquiry" Type="Inquiry"/>
</Locals>
<Description>DeDup EFX Inquiry</Description>
<ExpressionText>result := null;


//Delete Duplicates
for every Application.CreditApplication.PersonalApplicant relative to CreditApplication do

            //sort the inquiries on specified conditions. 
            for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.InquiryList.Inquiry relative to PersonalApplicant do 
                              dm_SortEFXInquiry(iProfileDate, Inquiry);
            endfor
  
            //execute DEDUP logic 
            for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.InquiryList.Inquiry relative to PersonalApplicant do 
			
                    //Check to run Duplicates only on IQ inquiries. Open question on FI inquiries. 
                    if(Inquiry.SourceSegment = "IQ") then					
                              xNewInqToDedup := Inquiry.INQ_TO_DEDUP;
         
                              //if first record
                              if(xPrevInqToDedup &lt; 0) then
                                           xPrevInqToDedup := xNewInqToDedup;
                              endif
         
                             //if values are not equals initialize to default
                             if(xPrevInqToDedup &lt;&gt; xNewInqToDedup) then
                                          xPrevDaysInq := 9999;
                                          xPrevInqToDedup := xNewInqToDedup;
                            endif
       
       
                           if(xNewInqToDedup &gt; 0) then
                                         if(dm_AbsoluteDifferenceValue(xPrevDaysInq, Inquiry.DAYS_INQ)  &lt; 14) then
                                                       Inquiry.IS_DUPLICATE_INQ := true;
                                                       Inquiry.IS_DUPLICATE_BANK_INQ := true;
                                         else
                                                       xPrevDaysInq := Inquiry.DAYS_INQ;
                                         endif
                           endif
                    endif
            endfor
endfor

</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_AssignScoreReasonToScoreModel" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xDMFunction" Type="string"/>
</Locals>
<Description>Move the calculated score reasons to Score Model Object</Description>
<ExpressionText>result:=null;

For Every Application.CreditRequest relative to Application do
	xDMFunction:=CreditRequest.DMFunction;
endfor

if(xDMFunction="CSA")then
	for every Application.CreditApplication.PersonalApplicant relative to Application do
		dm_PCRv4ScoreModel;
		if(CreditApplication.isPuertoRico &lt;&gt; null and CreditApplication.isPuertoRico="Y") then
			dm_PRScoreModel;
		endif
	endfor
endif

if(xDMFunction="CCC")then
	for every Application.CreditApplication.PersonalApplicant relative to Application do
		dm_PCRv6ScoreModel;
		dm_LNScoreModel;
	endfor
endif

</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesREP" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xMaximum" Type="numeric"/>
</Locals>
<Description>calculates REP Attributes</Description>
<ExpressionText>          result := null;

          //REP001
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.REP001 := iBUREAU_ATTRIBUTES.REP001 + 1;
          endif

          //REP002
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.REP002 := iBUREAU_ATTRIBUTES.REP002 + 1;
          endif

          //REP005
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.REP005 := iBUREAU_ATTRIBUTES.REP005 + 1;
          endif

          //REP026
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.REP026 := iBUREAU_ATTRIBUTES.REP026 + 1;
          endif

          //REP071
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) = 1) then
                iBUREAU_ATTRIBUTES.REP071 := iBUREAU_ATTRIBUTES.REP071 + 1;
          endif
       
          //REP074
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 34) then
                iBUREAU_ATTRIBUTES.REP074 := iBUREAU_ATTRIBUTES.REP074 + 1;
          endif

          //REP075
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30) then
                iBUREAU_ATTRIBUTES.REP075 := iBUREAU_ATTRIBUTES.REP075 + 1;
          endif

          //REP076
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 30 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 60) then
                iBUREAU_ATTRIBUTES.REP076 := iBUREAU_ATTRIBUTES.REP076 + 1;
          endif

          //REP077
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) = 60) then
                iBUREAU_ATTRIBUTES.REP077 := iBUREAU_ATTRIBUTES.REP077 + 1;
          endif

          //REP078
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC
                                                         AND MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 60) then
                iBUREAU_ATTRIBUTES.REP078 := iBUREAU_ATTRIBUTES.REP078 + 1;
          endif

          //REP080
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 90 AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &lt;= 180) then
                iBUREAU_ATTRIBUTES.REP080 := iBUREAU_ATTRIBUTES.REP080 + 1;
          endif

          //REP081
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND
                                                         MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD) &gt;= 90) then
                iBUREAU_ATTRIBUTES.REP081 := iBUREAU_ATTRIBUTES.REP081 + 1;
          endif

          //REP084
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER = 400) then
                iBUREAU_ATTRIBUTES.REP084 := iBUREAU_ATTRIBUTES.REP084 + 1;
          endif

          //REP501
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                xMaximum := MAX(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WORST_EVER, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD);
                iBUREAU_ATTRIBUTES.REP501 := MAX(iBUREAU_ATTRIBUTES.REP501, xMaximum);
          endif

          //REP503
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI) then
                iBUREAU_ATTRIBUTES.REP503 := MAX(iBUREAU_ATTRIBUTES.REP503, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_WE_GRD24);
          endif

          //REP601
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REAL_PROPERTY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN) then
                iBUREAU_ATTRIBUTES.REP601 := MAX(iBUREAU_ATTRIBUTES.REP601, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS);
          endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_setSmartCreditCCto_Q" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="Q" Name="xCreditClass" Type="string"/>
</Locals>
<Description>Sets the Credit Class of Smart Credit</Description>
<ExpressionText>for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do 
		PersonalApplicantOutput.INITIAL_CREDIT_CLASS := xCreditClass;
		PersonalApplicantOutput.FINAL_CREDIT_CLASS := xCreditClass;
endfor 
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.PublicRecordList.PublicRecord" Name="dm_PopulatePublicRecordListData" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iNormalizedSegment" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Populates PublicRecords data to Normalized Data Object</Description>
<ExpressionText>result := null;

if(PublicRecord.Amount &lt;&gt; null) then
                     iNormalizedSegment.CUR_BAL_AMT := PublicRecord.Amount;
endif

if(PublicRecord.AccountDesignator &lt;&gt; null) then
                     iNormalizedSegment.ECOA := PublicRecord.AccountDesignator;
endif

if(PublicRecord.AssociatedCreditBureauCreditorClass &lt;&gt; null) then
                     iNormalizedSegment.BUREAU_CREDITOR_CLASS := PublicRecord.AssociatedCreditBureauCreditorClass;
endif

if(PublicRecord.AttorneyName &lt;&gt; null) then
                     iNormalizedSegment.ATTORNEY_NAME := PublicRecord.AttorneyName;
endif

if(PublicRecord.BankruptcyType &lt;&gt; null) then
                     iNormalizedSegment.BANKRUPTCY_TYPE := PublicRecord.BankruptcyType;
endif

if(PublicRecord.DispositionCode &lt;&gt; null) then
                     iNormalizedSegment.DISPOSITION_CODE := PublicRecord.DispositionCode;
endif

if(PublicRecord.CourtCity &lt;&gt; null) then
                     iNormalizedSegment.COURT_CITY := PublicRecord.CourtCity;
endif

if(PublicRecord.CourtState &lt;&gt; null) then
                     iNormalizedSegment.COURT_STATE := PublicRecord.CourtState;
endif

if(PublicRecord.CourtType &lt;&gt; null) then
                     iNormalizedSegment.COURT_TYPE := PublicRecord.CourtType;
endif

if(PublicRecord.DateEffective &lt;&gt; null) then
                     iNormalizedSegment.DATE_VERIFIED := PublicRecord.DateEffective;
endif

if(PublicRecord.DateFiled &lt;&gt; null) then
                     iNormalizedSegment.DATE_FILED := PublicRecord.DateFiled;
endif

if(PublicRecord.DatePaid &lt;&gt; null) then
                     iNormalizedSegment.DATE_PAID_OUT := PublicRecord.DatePaid;
endif

if(PublicRecord.DocketNumber &lt;&gt; null) then
                     iNormalizedSegment.DOCKET_NUMBER := PublicRecord.DocketNumber;
endif

if(PublicRecord.FilingType &lt;&gt; null) then
                     iNormalizedSegment.FILING_TYPE := PublicRecord.FilingType;
endif

if(PublicRecord.IndustryCode &lt;&gt; null) then
                     iNormalizedSegment.INDUSTRY_CODE := PublicRecord.IndustryCode;
endif

if(PublicRecord.NarrativeCode1 &lt;&gt; null) then
                     iNormalizedSegment.NARRATIVE_CODE1 := PublicRecord.NarrativeCode1;
endif

if(PublicRecord.NarrativeCode2 &lt;&gt; null) then
                     iNormalizedSegment.NARRATIVE_CODE2 := PublicRecord.NarrativeCode2;
endif

if(PublicRecord.Plaintiff &lt;&gt; null) then
                     iNormalizedSegment.PLAINTIFF := PublicRecord.Plaintiff;
endif

if(PublicRecord.RecordType &lt;&gt; null) then
                     iNormalizedSegment.RECORD_TYPE := PublicRecord.RecordType;
endif

if(PublicRecord.ReleasedDate &lt;&gt; null) then
                     iNormalizedSegment.DATE_RELEASED := PublicRecord.ReleasedDate;
endif

if(PublicRecord.SatisfiedDate &lt;&gt; null) then
                     iNormalizedSegment.DATE_SATISFIED := PublicRecord.SatisfiedDate;
endif

if(PublicRecord.SourceSegment &lt;&gt; null) then
                     iNormalizedSegment.SEGMENT_TYPE := PublicRecord.SourceSegment;
                     iNormalizedSegment.RECORD_CODE := PublicRecord.SourceSegment;
endif

if(PublicRecord.StatusCode &lt;&gt; null) then
                     iNormalizedSegment.STATUS_CODE := PublicRecord.StatusCode;
endif

if(PublicRecord.SubscriberNumber &lt;&gt; null) then
                     iNormalizedSegment.REPORTING_SUB_CODE := PublicRecord.SubscriberNumber;
                     iNormalizedSegment.SUBSCRIBER_NUMBER := PublicRecord.SubscriberNumber;
endif

if(PublicRecord.TypeCode &lt;&gt; null) then
                     iNormalizedSegment.TYPE_CODE := PublicRecord.TypeCode;
endif

</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_set_CreditClass4" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Set Credit class 4</Description>
<ExpressionText>for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do
	BusinessApplicantOutput.INITIAL_CREDIT_CLASS:="4";
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_AssignBureauScoreAndName" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xBureauName" Type="string"/>
<Local InitialValue="null" Name="xBureauScore" Type="numeric"/>
<Local InitialValue="-999" Name="xBureauPRScore" Type="numeric"/>
</Locals>
<Description>Bureau Score</Description>
<ExpressionText>xBureauScore:=-999;

for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.HeaderList.Header relative to PersonalApplicant do

         if(Header.Bureau&lt;&gt;null and Header.Bureau="TU4.1") then
                  xBureauName:="TU";
         endif
 
         if(Header.Bureau&lt;&gt;null and Header.Bureau="EFU") then
                  xBureauName:="EFX";
         endif
endfor

if(xBureauName&lt;&gt;"" and xBureauName="EFX")then
         for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse relative to PersonalApplicant do
                  for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.ScoringList.Scoring relative to ParsedResponse do
                           if(Scoring.Score&lt;&gt;null and Scoring.Score&lt;&gt;"") then 
                                    xBureauScore:=Val(Scoring.Score);
                           endif 
                  endfor 
         endfor
else if(xBureauName&lt;&gt;"" and xBureauName="TU")then
         for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse relative to PersonalApplicant do
                  for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.ScoringList.Scoring relative to ParsedResponse do
                           if(Scoring.ModelTypeIndicator &lt;&gt; null and Scoring.ModelTypeIndicator &lt;&gt; "" and Scoring.ModelTypeIndicator = "00Q87")then
                                    if(Scoring.Score &lt;&gt; null and Scoring.Score &lt;&gt; "") then 
                                             xBureauPRScore := Val(Scoring.Score);
                                    endif
                           endif
                           if(Scoring.ModelTypeIndicator &lt;&gt; null and Scoring.ModelTypeIndicator &lt;&gt; "")then
                                    if(Scoring.Score &lt;&gt; null and Scoring.Score &lt;&gt; "") then 
                                             xBureauScore := Val(Scoring.Score);
                                    endif
                           endif
                  endfor 

                  if(xBureauPRScore &lt;&gt; -999) then
                           xBureauScore := xBureauPRScore;
                  endif
         endfor
endif endif

for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do
         SCORES.BureauScore:=xBureauScore;
         SCORES.BureauName:=xBureauName;
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_BusinessSummaryXPB" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="0.0" Name="xBusNumLiens" Type="numeric"/>
<Local InitialValue="0.0" Name="xTotalEmployeesCount" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusHighCreditLimitNonFin" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusHighCreditLimitFin" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusChargeOffNum" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusAllTradesTotalBal" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusNumRecentTrades" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusHighCreditLimit" Type="numeric"/>
<Local InitialValue="0.0" Name="xAppNumberOfEmployees" Type="numeric"/>
<Local InitialValue="0.0" Name="xAge" Type="numeric"/>
<Local InitialValue="null" Name="xDateReportedAdditional" Type="timestamp"/>
<Local InitialValue="null" Name="xDateReported" Type="timestamp"/>
<Local InitialValue="null" Name="xProfileDate" Type="timestamp"/>
<Local InitialValue="0.0" Name="xMonthsOnFile" Type="numeric"/>
<Local InitialValue="0.0" Name="xCombTradesTotalCt" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusJudgementLienNum" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusRiskScore" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusFinancialTradesExtendedTotBal" Type="numeric"/>
<Local InitialValue="0.0" Name="xBusFinancialTradesNum" Type="numeric"/>
<Local InitialValue="0.0" Name="xNonFiledJudgmentActionsCount" Type="numeric"/>
<Local InitialValue="FAIL" Name="xBusIsBkInLast7Yrs" Type="string"/>
<Local InitialValue="0.0" Name="xNumberOfEmployees" Type="numeric"/>
</Locals>
<Description>Summarizes XPB business bureau data</Description>
<ExpressionText>if(BusinessApplicant.numberOfEmployees &lt;&gt; null AND BusinessApplicant.numberOfEmployees &gt;= 0)then
                xAppNumberOfEmployees := BusinessApplicant.numberOfEmployees;
endif

        for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.NetConnectResponse.Products.Intelliscore.BusinessNameAndAddress relative to BusinessApplicant do
                if(BusinessNameAndAddress.ProfileDate &lt;&gt; null and Trim(BusinessNameAndAddress.ProfileDate) &lt;&gt; "")then
                        xProfileDate := dm_formatDate( BusinessNameAndAddress.ProfileDate);
                endif
        endfor


        for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.NetConnectResponse.Products.Intelliscore.TradePaymentExperiences relative to BusinessApplicant do
		
 /* CR051 - removed for 3.1.1.7
              if(TradePaymentExperiences.BusinessCategory &lt;&gt; null and Trim(TradePaymentExperiences.BusinessCategory) &lt;&gt; "")then
                        if(InStringList(TradePaymentExperiences.BusinessCategory,"CRED CARD, BANK, BANK CARD, FINCL SVCS, LEASING, CREDTUNION, FINANCE, FACTOR, AUTO LEASE", ",") = false) then
                                xCombTradesTotalCt := xCombTradesTotalCt + 1;

                        endif
                endif             */
                                for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.NetConnectResponse.Products.Intelliscore.TradePaymentExperiences.RecentHighCredit relative to TradePaymentExperiences do
                                        if(RecentHighCredit.Amount&lt;&gt;null and Val(RecentHighCredit.Amount)&gt;0)then
                                                xBusAllTradesTotalBal := xBusAllTradesTotalBal + Val(RecentHighCredit.Amount);
                                        endif
                                endfor				
				
				
/* CR051 - Changed logic see line 33
                if(TradePaymentExperiences.Comments &lt;&gt; null and Trim(TradePaymentExperiences.Comments) &lt;&gt; "")then
                           if(Trim(TradePaymentExperiences.Comments) = "CHARGE OFF")then
                                    xBusChargeOffNum := xBusChargeOffNum + 1;
                           endif
                endif
*/
//CR051 - 3.1.1.6
                 if(TradePaymentExperiences.Comments &lt;&gt; null and Trim(TradePaymentExperiences.Comments) &lt;&gt; "")then
                           if(Trim(TradePaymentExperiences.Comments) = "CHARGE OFF")then
						   if (TimestampDiff("months", Now(), dm_formatDate(TradePaymentExperiences.DateLastActivity)) &lt; 24 OR TradePaymentExperiences.DateLastActivity="00000000" OR TradePaymentExperiences.DateLastActivity=null) then
                                    xBusChargeOffNum := xBusChargeOffNum + 1;
                           endif
						   endif
                endif


                //Number of Financial Trades
                if(TradePaymentExperiences.BusinessCategory &lt;&gt; null and Trim(TradePaymentExperiences.BusinessCategory) &lt;&gt; ""  and TimestampDiff("months", Now() , dm_formatDate(TradePaymentExperiences.DateReported)) &lt; 24)then
                        if(InStringList(TradePaymentExperiences.BusinessCategory,"CRED CARD, BANK, BANK CARD, FINCL SVCS, LEASING, CREDTUNION, FINANCE, FACTOR, AUTO LEASE", ","))then
                                xBusFinancialTradesNum := xBusFinancialTradesNum+1;
                   
                                 //Financial Trade extended total balance
                                for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.NetConnectResponse.Products.Intelliscore.TradePaymentExperiences.RecentHighCredit relative to TradePaymentExperiences do
                                        if(RecentHighCredit.Amount &lt;&gt; null and Val(RecentHighCredit.Amount) &gt; 0)then
                                                xBusFinancialTradesExtendedTotBal := xBusFinancialTradesExtendedTotBal + VAL(RecentHighCredit.Amount);
                                        endif
                                endfor
                        endif
                endif


                if(TradePaymentExperiences.DateReported &lt;&gt; null and Trim(TradePaymentExperiences.DateReported) &lt;&gt; "")then
                                xDateReported := dm_formatDate(TradePaymentExperiences.DateReported);
                endif
                
                xAge := TimestampDiff("months", xProfileDate, xDateReported);
                if(xAge &lt; 24)then
                                xBusNumRecentTrades := xBusNumRecentTrades + 1;
                endif
//CR051 - changed logic see line 166
//                for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.NetConnectResponse.Products.Intelliscore.TradePaymentExperiences.RecentHighCredit relative to TradePaymentExperiences do
//                                if(RecentHighCredit.Amount&lt;&gt;null and Val(RecentHighCredit.Amount)&gt;0)then
//                                                xBusHighCreditLimit := MAX(xBusHighCreditLimit,Val(RecentHighCredit.Amount));
//                                endif
//                endfor

        endfor


        for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.NetConnectResponse.Products.Intelliscore.AdditionalPaymentExperiences relative to BusinessApplicant do

/* CR051 - remove for 3.1.1.7
                if(AdditionalPaymentExperiences.BusinessCategory&lt;&gt;null and Trim(AdditionalPaymentExperiences.BusinessCategory)&lt;&gt;"")then
                        if(InStringList(AdditionalPaymentExperiences.BusinessCategory,"CRED CARD, BANK, BANK CARD, FINCL SVCS, LEASING, CREDTUNION, FINANCE, FACTOR, AUTO LEASE", ",") = false) then
                                xCombTradesTotalCt := xCombTradesTotalCt + 1;



                        endif
                endif	*/
                                for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.NetConnectResponse.Products.Intelliscore.AdditionalPaymentExperiences.RecentHighCredit relative to AdditionalPaymentExperiences do
                                        if(RecentHighCredit.Amount&lt;&gt;null and Val(RecentHighCredit.Amount)&gt;0)then
                                                xBusAllTradesTotalBal := xBusAllTradesTotalBal  + Val(RecentHighCredit.Amount);
                                        endif
                                endfor				
				
				
/* CR051 - Change in logic see line 97
                if(AdditionalPaymentExperiences.Comments&lt;&gt;null and Trim(AdditionalPaymentExperiences.Comments)&lt;&gt;"")then
                           if(Trim(AdditionalPaymentExperiences.Comments) = "CHARGE OFF")then
                                    xBusChargeOffNum := xBusChargeOffNum + 1;
                           endif
                endif
*/
//CR051 - 3.1.1.6
                 if(AdditionalPaymentExperiences.Comments&lt;&gt;null and Trim(AdditionalPaymentExperiences.Comments)&lt;&gt;"")then
                           if(Trim(AdditionalPaymentExperiences.Comments) = "CHARGE OFF")then
						   if (TimestampDiff("months", Now() , dm_formatDate(AdditionalPaymentExperiences.DateLastActivity)) &lt; 24 OR AdditionalPaymentExperiences.DateLastActivity="00000000" OR AdditionalPaymentExperiences.DateLastActivity=null) then
                                    xBusChargeOffNum := xBusChargeOffNum + 1;
                           endif
						   endif
                endif

                //Number of Financial Trades
                if(AdditionalPaymentExperiences.BusinessCategory &lt;&gt; null and Trim(AdditionalPaymentExperiences.BusinessCategory) &lt;&gt; "" and TimestampDiff("months", Now() , dm_formatDate(AdditionalPaymentExperiences.DateReported)) &lt; 24)then
                        if(InStringList(AdditionalPaymentExperiences.BusinessCategory, "CRED CARD, BANK, BANK CARD, FINCL SVCS, LEASING, CREDTUNION, FINANCE, FACTOR, AUTO LEASE", ","))then
                                xBusFinancialTradesNum := xBusFinancialTradesNum+1;

                                 //Financial Trade extended total balance
                                for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.NetConnectResponse.Products.Intelliscore.AdditionalPaymentExperiences.RecentHighCredit relative to AdditionalPaymentExperiences do
                                        if(RecentHighCredit.Amount &lt;&gt; null and Val(RecentHighCredit.Amount) &gt; 0)then
                                                xBusFinancialTradesExtendedTotBal := xBusFinancialTradesExtendedTotBal + VAL(RecentHighCredit.Amount);
                                        endif
                                endfor
                        endif
                endif

                if(AdditionalPaymentExperiences.DateReported&lt;&gt;null and Trim(AdditionalPaymentExperiences.DateReported)&lt;&gt;"")then
                                xDateReportedAdditional := dm_formatDate(AdditionalPaymentExperiences.DateReported);
                endif    
                
                xAge := TimestampDiff("months", xProfileDate, xDateReportedAdditional);
                if(xAge &lt; 24)then
                                xBusNumRecentTrades := xBusNumRecentTrades + 1;
                endif
//CR051 - changed logic see line 166
//                for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.NetConnectResponse.Products.Intelliscore.AdditionalPaymentExperiences.RecentHighCredit relative to AdditionalPaymentExperiences do
//                                if(RecentHighCredit.Amount&lt;&gt;null and Val(RecentHighCredit.Amount)&gt;0)then
//                                                xBusHighCreditLimit := MAX(xBusHighCreditLimit,Val(RecentHighCredit.Amount));
//                                endif
//                endfor

        endfor

        for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.NetConnectResponse.Products.Intelliscore.KeyModelElements relative to BusinessApplicant do
                if(KeyModelElements.MonthsOnFile &lt;&gt; null and Val(Trim(KeyModelElements.MonthsOnFile)) &gt;= 0)then
                        xMonthsOnFile := Val(KeyModelElements.MonthsOnFile);
                endif

                if(KeyModelElements.CombTradesTotalCt &lt;&gt; null and Val(Trim(KeyModelElements.CombTradesTotalCt)) &gt;= 0)then
                        xCombTradesTotalCt := Val(KeyModelElements.CombTradesTotalCt);
                endif
				
//CR51 Changes for 3.1.1.8
if(KeyModelElements.NonFiledJudgmentActionsCount &lt;&gt; null )then
       	 xNonFiledJudgmentActionsCount := Val(KeyModelElements.NonFiledJudgmentActionsCount);
                endif
                                                            
    if(KeyModelElements.TaxLiensCountLast24Months&lt;&gt;null)then
   xBusNumLiens:=Val(KeyModelElements.TaxLiensCountLast24Months);
 endif
                                                            
      xBusJudgementLienNum:=xNonFiledJudgmentActionsCount+xBusNumLiens;
/*

                xNonFiledJudgmentActionsCount := Val(KeyModelElements.NonFiledJudgmentActionsCount);
                if(xNonFiledJudgmentActionsCount &lt;&gt; null and xNonFiledJudgmentActionsCount &gt;= 0)then
                                xBusJudgementLienNum := Val(KeyModelElements.NonFiledJudgmentActionsCount);
                endif
*/
                if(KeyModelElements.BankruptcyFilings&lt;&gt;null and Val(Trim(KeyModelElements.BankruptcyFilings))&gt;0)then
                                xBusIsBkInLast7Yrs:="PASS";
                endif
        endfor

        for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.NetConnectResponse.Products.Intelliscore.IntelliscoreScoreInformation.ScoreInfo relative to BusinessApplicant do
                if(ScoreInfo.Score &lt;&gt; null and Val(Trim(ScoreInfo.Score)) &gt;= 0)then
                        xBusRiskScore := Val(ScoreInfo.Score);
                endif
        endfor

/*CR051 - 3.1.1.1 change see line 169
        for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.Analysis.Characteristics relative to BusinessApplicant do 
                if(Characteristics.TotalEmployeesCount&lt;&gt;null and Trim(Characteristics.TotalEmployeesCount)&lt;&gt;"")then
                        xNumberOfEmployees:=Val(Characteristics.TotalEmployeesCount);
                endif
        endfor
*/
//CR051 - 3.1.1.1.
        for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.Analysis.Characteristics relative to BusinessApplicant do 
                if(Characteristics.TotalEmployeesCount&lt;&gt;null and Trim(Characteristics.TotalEmployeesCount)&lt;&gt;"" )then
                        xTotalEmployeesCount:=Val(Characteristics.TotalEmployeesCount);
                endif
        endfor

for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.NetConnectResponse.Products.Intelliscore.KeyModelElements relative to BusinessApplicant do
if(KeyModelElements.EmployeeSizeCode&lt;&gt;null and KeyModelElements.EmployeeSizeCode&lt;&gt;"")then
if(KeyModelElements.EmployeeSizeCode = "A") then 
xNumberOfEmployees:=3;
else if(KeyModelElements.EmployeeSizeCode = "B") then 
xNumberOfEmployees:=7;
else if(KeyModelElements.EmployeeSizeCode = "C") then 
xNumberOfEmployees:=15;
else if(KeyModelElements.EmployeeSizeCode = "D") then 
xNumberOfEmployees:=35;
else if(KeyModelElements.EmployeeSizeCode = "E") then 
xNumberOfEmployees:=75;
else if(KeyModelElements.EmployeeSizeCode = "F") then 
xNumberOfEmployees:=175;
else if(KeyModelElements.EmployeeSizeCode = "G") then 
xNumberOfEmployees:=375;
else if(KeyModelElements.EmployeeSizeCode = "H") then 
xNumberOfEmployees:=750;
else if(KeyModelElements.EmployeeSizeCode = "I") then 
xNumberOfEmployees:=1000;
else 
xNumberOfEmployees:=xTotalEmployeesCount;
endif endif endif endif endif endif endif endif endif endif

endfor

//CR051 - 3.1.1.3, 3.1.1.4, 3.1.1.5
//TradePaymentExperiences Fin and NonFin
    for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.NetConnectResponse.Products.Intelliscore.TradePaymentExperiences.RecentHighCredit relative to BusinessApplicant do
    if(RecentHighCredit.Amount&lt;&gt;null and Val(RecentHighCredit.Amount)&gt;0 and TimestampDiff("months", Now() , dm_formatDate(TradePaymentExperiences.DateReported)) &lt; 24)then
    if(InStringList(TradePaymentExperiences.BusinessCategory,"CRED CARD, BANK, BANK CARD, FINCL SVCS, LEASING, CREDTUNION, FINANCE, FACTOR, AUTO LEASE", ",") = True) then   
	  xBusHighCreditLimitFin := MAX(xBusHighCreditLimitFin,Val(RecentHighCredit.Amount));
    endif
	endif
	if(RecentHighCredit.Amount&lt;&gt;null and Val(RecentHighCredit.Amount)&gt;0 and TimestampDiff("months", Now() , dm_formatDate(TradePaymentExperiences.DateReported)) &lt; 24)then
    if(InStringList(TradePaymentExperiences.BusinessCategory,"CRED CARD, BANK, BANK CARD, FINCL SVCS, LEASING, CREDTUNION, FINANCE, FACTOR, AUTO LEASE", ",") = False) then   
	  xBusHighCreditLimitNonFin := MAX(xBusHighCreditLimitNonFin,Val(RecentHighCredit.Amount));
    endif
	endif
     endfor

//AdditionalPaymentExperiences Fin and NonFin	 
    for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.NetConnectResponse.Products.Intelliscore.AdditionalPaymentExperiences.RecentHighCredit relative to BusinessApplicant do
    if(RecentHighCredit.Amount&lt;&gt;null and Val(RecentHighCredit.Amount)&gt;0 and TimestampDiff("months", Now() , dm_formatDate(AdditionalPaymentExperiences.DateReported)) &lt; 24)then
    if(InStringList(AdditionalPaymentExperiences.BusinessCategory,"CRED CARD, BANK, BANK CARD, FINCL SVCS, LEASING, CREDTUNION, FINANCE, FACTOR, AUTO LEASE", ",") = True) then   
	  xBusHighCreditLimitFin := MAX(xBusHighCreditLimitFin,Val(RecentHighCredit.Amount));
    endif
	endif
	if(RecentHighCredit.Amount&lt;&gt;null and Val(RecentHighCredit.Amount)&gt;0 and TimestampDiff("months", Now() , dm_formatDate(AdditionalPaymentExperiences.DateReported)) &lt; 24)then
    if(InStringList(AdditionalPaymentExperiences.BusinessCategory,"CRED CARD, BANK, BANK CARD, FINCL SVCS, LEASING, CREDTUNION, FINANCE, FACTOR, AUTO LEASE", ",") = False) then   
	  xBusHighCreditLimitNonFin := MAX(xBusHighCreditLimitNonFin,Val(RecentHighCredit.Amount));
    endif
	endif
     endfor
	 
	xBusHighCreditLimit:=Max(xBusHighCreditLimitFin, xBusHighCreditLimitNonFin);


//Assign Values
for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do 
        BusinessApplicantOutput.BusActiveTradesNum := xCombTradesTotalCt;
        BusinessApplicantOutput.BusAddTradesTotalBal := xBusAllTradesTotalBal;
        BusinessApplicantOutput.BusChargeOffNum := xBusChargeOffNum;
        BusinessApplicantOutput.BusFinancialTradesExtendedTotBal := xBusFinancialTradesExtendedTotBal;
        BusinessApplicantOutput.BusFinancialTradesNum := xBusFinancialTradesNum;
        BusinessApplicantOutput.BushighCreditLimit := xBusHighCreditLimit;
		BusHighCreditLimitFin:=xBusHighCreditLimitFin;	//CR051 - 3.1.1.4
	    BusHighCreditLimitNonFin:=xBusHighCreditLimitNonFin; //CR051 - 3.1.1.5
        BusinessApplicantOutput.BusNumRecentTrades := xBusNumRecentTrades;
        BusinessApplicantOutput.BusRiskScore := xBusRiskScore;
        BusinessApplicantOutput.BusAgeInMonths := xMonthsOnFile;
        BusinessApplicantOutput.BusAgeInYears := Int(xMonthsOnFile/12);
        BusinessApplicantOutput.BusJudgementLienNum := xBusJudgementLienNum;
       // BusinessApplicantOutput.BusTMChargeOff := "FAIL"; 	CR051 - removed for 3.1.1.9
        BusinessApplicantOutput.BusIsBkInLast7Yrs:=xBusIsBkInLast7Yrs;

        if(xAppNumberOfEmployees&gt;xNumberOfEmployees)then
                BusinessApplicantOutput.numberOfEmployees:=xAppNumberOfEmployees;
        else
                BusinessApplicantOutput.numberOfEmployees:=xNumberOfEmployees;
        endif

endfor 



//Assign ohter BusinessApplicantOutput values - must be called after other calculations
dm_AssignBusinessSummaryOutput;</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_STAGGFiltersAndFunctionsEFXPublicRecord" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Generate filters for EFX Public Record</Description>
<ExpressionText>    result := null;

    //LEGAL
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LEGAL := false;
    if(InStringList(iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE, "BP, LI, TL, GN", ",")) then
           iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LEGAL := true;
    endif

    //MONTHS-FILE
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_FILE := 9999;
    if(InStringList(iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE, "BP, LI, TL", ",")) then
          if(iNORMALIZED_BUREAU_SEGMENTS.DATE_FILED &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.DATE_FILED) &lt;&gt; "") then
                   iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_FILE := TimestampDiff("months", iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.DATE_FILED));
          endif
    else if(iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE = "GN") then
          if(iNORMALIZED_BUREAU_SEGMENTS.DATE_REPORTED &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.DATE_REPORTED) &lt;&gt; "") then
                  iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_FILE := TimestampDiff("months", iProfileDate, dm_GetParsedDateYYYYMM(iNORMALIZED_BUREAU_SEGMENTS.DATE_REPORTED))
          endif
    endif endif

    
    //AMOUNT - Public Record - Not trade, collection and inquiry
    //Do not inintialize the Amount field here as its already initialized in the Tradeline normalization
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LEGAL 
                                                  AND iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) &lt;&gt; "") then
          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT := MAX(0, VAL(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT));
    endif


    //PR-DEROG
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_DEROG := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LEGAL;


    //PR-DEROG2
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_DEROG2 := false;
    if((iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE = "BP" AND (iNORMALIZED_BUREAU_SEGMENTS.DISPOSITION_CODE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.DISPOSITION_CODE, "C, D, G, I, V", ","))) OR
                                        (iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE = "GN" AND (iNORMALIZED_BUREAU_SEGMENTS.DATE_SATISFIED = null OR TRIM(iNORMALIZED_BUREAU_SEGMENTS.DATE_SATISFIED) = "")) OR
                                        (iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE = "TL" AND (iNORMALIZED_BUREAU_SEGMENTS.DATE_RELEASED = null OR TRIM(iNORMALIZED_BUREAU_SEGMENTS.DATE_RELEASED) = "")) OR
                                        (iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE = "LI" AND (iNORMALIZED_BUREAU_SEGMENTS.TYPE_CODE &lt;&gt; null AND  InStringList(iNORMALIZED_BUREAU_SEGMENTS.TYPE_CODE, "S, A", ","))) OR
                                        (iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1 &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "EV, IM, AG, BG, DK, EI, EJ", ",")) OR 
                                        (iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2 &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "EV, IM, AG, BG, DK, EI, EJ", ","))) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_DEROG2 := true;
    endif


    //BK-STATUS
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BK_STATUS := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE = "BP" ) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BK_STATUS := true;
    endif


    //BK-FILED
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BK_FILED := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE = "BP" AND
                                            iNORMALIZED_BUREAU_SEGMENTS.DISPOSITION_CODE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.DISPOSITION_CODE, "C, D, G, I, V", ",")) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BK_FILED := true;
    endif



    //PR-UNSAT
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_UNSAT := false;
    if( (iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1 &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "BG, BW, AG, CP, DK, DO, DZ, EI, EJ, EL, EN, EO, EV, FH, FL, FM, FO, FP, HM, HN, IK, IL, IM, IN", ",")) OR
                           (iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2 &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "BG, BW, AG, CP, DK, DO, DZ, EI, EJ, EL, EN, EO, EV, FH, FL, FM, FO, FP, HM, HN, IK, IL, IM, IN", ",")) OR
                           ( (iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE = "BP" AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BK_FILED) OR
                                    (iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE = "TL" AND (iNORMALIZED_BUREAU_SEGMENTS.DATE_RELEASED = null OR TRIM(iNORMALIZED_BUREAU_SEGMENTS.DATE_RELEASED) = "")) OR
                                    (iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE = "LI" AND  (iNORMALIZED_BUREAU_SEGMENTS.STATUS_CODE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.STATUS_CODE, "A, P", ",")))  OR
                                    (iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE = "GN" AND (iNORMALIZED_BUREAU_SEGMENTS.DATE_SATISFIED = null OR TRIM(iNORMALIZED_BUREAU_SEGMENTS.DATE_SATISFIED) = ""))     )) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PR_UNSAT := true;
    endif



</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_GetTMOBILE" ResultType="boolean" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iName" Type="string"/>
</Inputs>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xValue" Type="string"/>
</Locals>
<Description>Returns TMOBILE customer</Description>
<ExpressionText>result := false;


xValue := MATCHES("^.*(?i)(T MOBILE COMMUNICATIONS|T MOBILE GSP|T MOBILE USA INC|T MOBILE USA PRIME REACTIVATIO|T MOBILE USA SECONDARY|T MOBILE USA|T MOBILE|TELEKOM DEUTSCHLAND T MOBILE|TMOBILE|T-MOBILE).*$", iName); 

if(xValue &lt;&gt; null AND UCASE(xValue) = "TRUE") then
             result := true;
endif


</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_SmartCreditPORTCOMP" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Smart Credit Application</Description>
<ExpressionText>result:="N";

if((CreditApplication.PORTCOMP&lt;&gt;null and Trim(CreditApplication.PORTCOMP)&lt;&gt;"" and InStringList(CreditApplication.PORTCOMP,"SCNC,WFM,METRO,PREPAID",",")))then
                     result:="Y";
endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_IsBureauNameNull" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Result = Yes if BureauName = null</Description>
<ExpressionText>result := "No";

for every Application.CreditApplication.PersonalApplicant.SCORES relative to Application do 
if (BureauName = null) then 
result := "Yes";
endif
endfor </ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsEFXAmount" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xAmount" Type="numeric"/>
<Local InitialValue="0.0" Name="xBalance" Type="numeric"/>
</Locals>
<Description>Generate filters for EFX amount</Description>
<ExpressionText>    result := null;
  

    //AMONT_PAST_DUE
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT_PAST_DUE := 0;
    if(iNORMALIZED_BUREAU_SEGMENTS.PAST_DUE_AMT &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.PAST_DUE_AMT) &lt;&gt; "")then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT_PAST_DUE  :=  VAL(iNORMALIZED_BUREAU_SEGMENTS.PAST_DUE_AMT);
    endif


    //BALANCE
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE := 0;
    if(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) &lt;&gt; "") then
        if(VAL(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) &gt;= iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT_PAST_DUE) then
                          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE := VAL(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT);
        else
                          iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT_PAST_DUE;
        endif
    else
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT_PAST_DUE;
    endif
    


    //AVAILABLE-CREDIT
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AVAILABLE_CREDIT := 0;
    if( (iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT = null OR TRIM(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) = "") OR (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT = 0) ) then
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AVAILABLE_CREDIT := 0;
    else 
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AVAILABLE_CREDIT := MAX(0, (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT - VAL(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT)));
    endif
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AVAILABLE_CREDIT &gt;= 1000000) then
              iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AVAILABLE_CREDIT := 0;
    endif


    //MONTHLY-PAYMENT
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHLY_PAYMENT := 0;
    if(InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS_CD, "0, 1, 2, 3, 4, 5, 6, 7, 8, 9", ",")) then
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHLY_PAYMENT := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS_NUM;
    else if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS_CD = "D") then
               if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS_NUM &lt; 30) then
                         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHLY_PAYMENT := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
               else if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS_NUM &gt;= 30) then
                         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHLY_PAYMENT := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT / (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS_NUM / 30);
               endif endif
    else if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS_CD = "M" AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS_NUM &lt;&gt; 0) then
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHLY_PAYMENT := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT / iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS_NUM;
    else if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS_CD = "Y" AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS_NUM &lt;&gt; 0) then
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHLY_PAYMENT := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT / (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS_NUM * 12);
    else if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS_CD = "K" AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS_NUM &lt;&gt; 0) then
               iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHLY_PAYMENT := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS_NUM * 1000;
    endif endif endif endif endif
     

    //BTL
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BTL := 0;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT &lt;&gt; 0 AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE &lt;&gt; 0) then
            xAmount := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT;
            xBalance := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BALANCE;
            //iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BTL := INT((xBalance/xAmount)*100);
            //Removed truncating on the filters
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BTL := (xBalance/xAmount)*100;
    else
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BTL := 0;
    endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_set_CreditClass7" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Set Credit class 7</Description>
<ExpressionText>for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do
	BusinessApplicantOutput.INITIAL_CREDIT_CLASS:="7";
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_AssignPGCreditClass3" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Assign PG credit-class 3</Description>
<ExpressionText>
for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do
                  BusinessApplicantOutput.INITIAL_CREDIT_CLASS :=  "3";
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_formatDate" ResultType="timestamp" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iDate" Type="string"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xLength" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xDay" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xMonth" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xYear" Type="string"/>
</Locals>
<Description>formats a string to date </Description>
<ExpressionText>if(iDate &lt;&gt; null and Trim(iDate) &lt;&gt; "") then
    xLength := strlen(Trim(iDate));
endif

if (iDate = null or Trim(iDate) = "" or iDate = "00000000") then
  xDay  := "01";
   xMonth := "01";
   xYear := "1900" ;

 else if(xLength = 8 and iDate&gt;"19000000") then       //Assume yyyymmdd
     xDay := Right (iDate, 2);
     xMonth := Mid(iDate,5,2);
     xYear := Left (iDate,4); 

else if(xLength = 8) then       //Assume mmddyyyy
     xDay := Mid (iDate, 3,2);
     xMonth := Left(iDate,2);
     xYear := Right (iDate,4);
 
 else if(xLength = 6 ) then   //Assume mmyyyy
     xDay := "01";
     xMonth := Left(iDate,2);
     xYear := Right (iDate,4);
         
else if(xLength = 10 and (Instr("-", iDate, true)&lt;&gt;0)) then   //Assume yyyy-mm-dd
     xDay := Right (iDate, 2);
     xMonth := Mid(iDate,6,2);
     xYear := Left (iDate,4);
    
else if(xLength = 10 ) then   //Assume mm/dd/yyyy
       xDay := Mid (iDate, 4,2);
       xMonth := Left(iDate,2);
       xYear := Right (iDate,4);
    
     else if(xLength = 7 ) then   //Assume mm/yyyy
       xDay := "01";
       xMonth := Left(iDate,2);
       xYear := Right (iDate,4);
  
 endif endif  endif    endif    endif    endif    endif
 
 
 result := TimestampfromStr(xYear + "-" + xMonth + "-" + xDay);</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_EfficiencyOfNeustar" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xCallNeustar" Type="string"/>
</Locals>
<Description>to determine Neustar interface on-demand call</Description>
<ExpressionText>result := null;

xCallNeustar := "Y";

  //if PG app then do not qualify for upgrade
		  if(CreditApplication.PG_APP &lt;&gt; null and CreditApplication.PG_APP ="Y") then
		  	  xCallNeustar := "N";
			endif

if(InStringList(CreditApplication.T_CHANNEL_CODE,"213,220,240,260",",") ) then
          //Exclude WebBank
         xCallNeustar := "N";
endif

//Smart Credit Applications
if(CreditApplication.PORTCOMP &lt;&gt; null AND TRIM(CreditApplication.PORTCOMP) &lt;&gt; "") then
          xCallNeustar := "N";
endif


for every Application.CreditApplication.PersonalApplicant relative to CreditApplication do
          //NEG Downgraded Apps
          for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
                       if(PersonalApplicantOutput.RESULT_NEG_CREDIT_CLASS &lt;&gt; null AND PersonalApplicantOutput.RESULT_NEG_CREDIT_CLASS &lt;&gt; "") then
                                   // Downgraded as a result of NEG
                                   xCallNeustar := "N";           
                      endif
         endfor
   
          //Assigned Credit Class A or B
          for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
                       if(PersonalApplicantOutput.FINAL_CREDIT_CLASS &lt;&gt; null AND 
                                                       (PersonalApplicantOutput.FINAL_CREDIT_CLASS = "A" OR PersonalApplicantOutput.FINAL_CREDIT_CLASS = "B")) then
                                   xCallNeustar := "N";
                       endif
          endfor
		  
		
endfor


//set the Neustar Efficiency response
CreditApplication.CallNeustar := xCallNeustar;


</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.TradelineList.Tradeline" Name="dm_PopulateTradelineListData" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="xNormalizedSegment" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Populates Tradelines data to Normalized data Object</Description>
<ExpressionText>result := null;


if(Tradeline.AccountDesignatorCode &lt;&gt; null) then
   xNormalizedSegment.ECOA := Tradeline.AccountDesignatorCode;
endif

if(Tradeline.AccountNumber &lt;&gt; null) then
   xNormalizedSegment.ACCOUNT_NUMBER := Tradeline.AccountNumber;
endif

if(Tradeline.AccountType &lt;&gt; null) then
   xNormalizedSegment.ACCOUNT_TYPE := Tradeline.AccountType;
endif

if(Tradeline.Balance &lt;&gt; null) then
   xNormalizedSegment.CUR_BAL_AMT := Tradeline.Balance;
endif

if(Tradeline.ComplianceRemarkCode &lt;&gt; null) then
   xNormalizedSegment.COMPLIANCE_REMARK_CODE := Tradeline.ComplianceRemarkCode;
endif

if(Tradeline.Consolidated_Remark_Code &lt;&gt; null) then
   xNormalizedSegment.CONSOLIDATED_REMARK_CODE := Tradeline.Consolidated_Remark_Code;
endif

if(Tradeline.CreditLimit &lt;&gt; null) then
   xNormalizedSegment.CREDIT_LIMIT_AMT := Tradeline.CreditLimit;
endif

if(Tradeline.CurrentStatus &lt;&gt; null) then
   xNormalizedSegment.MOP := Tradeline.CurrentStatus;
   xNormalizedSegment.RATE_CODE := Tradeline.CurrentStatus;
endif

if(Tradeline.DateClosed &lt;&gt; null) then
   xNormalizedSegment.DATE_CLOSED := Tradeline.DateClosed;
endif

if(Tradeline.DateClosedIndicator &lt;&gt; null) then
   xNormalizedSegment.DATE_CLOSED_IND := Tradeline.DateClosedIndicator;
endif

if(Tradeline.DateOfLastActivity &lt;&gt; null) then
   xNormalizedSegment.DATE_LAST_PMT := Tradeline.DateOfLastActivity;
endif

if(Tradeline.DateOpened &lt;&gt; null) then
   xNormalizedSegment.DATE_OPENED := Tradeline.DateOpened;
endif

if(Tradeline.DatePaidOut &lt;&gt; null) then
   xNormalizedSegment.DATE_PAID_OUT := Tradeline.DatePaidOut;
endif

if(Tradeline.DateReported &lt;&gt; null) then
   xNormalizedSegment.DATE_REPORTED := Tradeline.DateReported;
endif

if(Tradeline.DateVerified &lt;&gt; null) then
   xNormalizedSegment.DATE_VERIFIED := Tradeline.DateVerified;
endif

if(Tradeline.Filler &lt;&gt; null) then
   xNormalizedSegment.FILLER := Tradeline.Filler;
endif

if(Tradeline.GenericRemarkCode &lt;&gt; null) then
   xNormalizedSegment.GENERIC_REMARK_CODE := Tradeline.GenericRemarkCode;
endif

if(Tradeline.HighCredit &lt;&gt; null) then
   xNormalizedSegment.HIGH_CRED_AMT := Tradeline.HighCredit;
endif

if(Tradeline.IndustryCode &lt;&gt; null) then
   xNormalizedSegment.INDUSTRY_CODE := Tradeline.IndustryCode;
endif

if(Tradeline.MaximumDelinquencyAmount &lt;&gt; null) then
   xNormalizedSegment.MAX_DELINQ_AMT := Tradeline.MaximumDelinquencyAmount;
endif

if(Tradeline.MaximumDelinquencyDate &lt;&gt; null) then
   xNormalizedSegment.MAX_DELINQ_DATE := Tradeline.MaximumDelinquencyDate;
endif

if(Tradeline.MaximumDelinquencyMannerOfPayment &lt;&gt; null) then
   xNormalizedSegment.MAX_DELINQ_MOP := Tradeline.MaximumDelinquencyMannerOfPayment;
endif

if(Tradeline.MostRecentMaxDelinquencyAmount &lt;&gt; null) then
   xNormalizedSegment.MOST_RECENT_MAX_DELINQ_AMT := Tradeline.MostRecentMaxDelinquencyAmount;
endif

if(Tradeline.MostRecentMaxDelinquencyDate &lt;&gt; null) then
   xNormalizedSegment.MOST_RECENT_MAX_DELINQ_DATE := Tradeline.MostRecentMaxDelinquencyDate;
endif

if(Tradeline.NarrativeCode1 &lt;&gt; null) then
   xNormalizedSegment.NARRATIVE_CODE1 := Tradeline.NarrativeCode1;
endif

if(Tradeline.NarrativeCode2 &lt;&gt; null) then
   xNormalizedSegment.NARRATIVE_CODE2 := Tradeline.NarrativeCode2;
endif

if(Tradeline.NinetyOrMoreDayCounter &lt;&gt; null) then
   xNormalizedSegment.NUM_90_DPD := Tradeline.NinetyOrMoreDayCounter;
endif

if(Tradeline.NumberOfMonthsReviewed &lt;&gt; null) then
   xNormalizedSegment.NUM_MTHS_REVIEWED := Tradeline.NumberOfMonthsReviewed;
endif

if(Tradeline.PaymentAmount &lt;&gt; null) then
   xNormalizedSegment.ACTUAL_PMT_AMT := Tradeline.PaymentAmount;
endif

if(Tradeline.PastDueAmount &lt;&gt; null) then
   xNormalizedSegment.PAST_DUE_AMT := Tradeline.PastDueAmount;
endif

if(Tradeline.PaymentPattern &lt;&gt; null) then
   xNormalizedSegment.PAY_PATT := Tradeline.PaymentPattern;
endif

if(Tradeline.PaymentPatternStartDate &lt;&gt; null) then
   xNormalizedSegment.PAY_PATT_START_DATE := Tradeline.PaymentPatternStartDate;
endif

if(Tradeline.PortfolioType &lt;&gt; null) then
   xNormalizedSegment.PORTFOLIO_TYPE := Tradeline.PortfolioType;
endif

if(Tradeline.PreviousDate1 &lt;&gt; null) then
   xNormalizedSegment.PREVIOUS_DATE1 := Tradeline.PreviousDate1;
endif

if(Tradeline.PreviousDate2 &lt;&gt; null) then
   xNormalizedSegment.PREVIOUS_DATE2 := Tradeline.PreviousDate2;
endif

if(Tradeline.PreviousDate3 &lt;&gt; null) then
   xNormalizedSegment.PREVIOUS_DATE3 := Tradeline.PreviousDate3;
endif

if(Tradeline.PreviousRate1 &lt;&gt; null) then
   xNormalizedSegment.PREVIOUS_RATE1 := Tradeline.PreviousRate1;
endif

if(Tradeline.PreviousRate2 &lt;&gt; null) then
   xNormalizedSegment.PREVIOUS_RATE2 := Tradeline.PreviousRate2;
endif

if(Tradeline.PreviousRate3 &lt;&gt; null) then
   xNormalizedSegment.PREVIOUS_RATE3 := Tradeline.PreviousRate3;
endif

if(Tradeline.Times30DaysLate &lt;&gt; null) then
   xNormalizedSegment.NUM_30_DPD := Tradeline.Times30DaysLate;
endif

if(Tradeline.Times60DaysLate &lt;&gt; null) then
   xNormalizedSegment.NUM_60_DPD := Tradeline.Times60DaysLate;
endif

if(Tradeline.RatingRemarkCode &lt;&gt; null) then
   xNormalizedSegment.RATING_REMARK_CODE := Tradeline.RatingRemarkCode;
endif

if(Tradeline.RemarksCode &lt;&gt; null) then
   xNormalizedSegment.REMARK_CODE := Tradeline.RemarksCode;
endif

if(Tradeline.SubscriberNumber &lt;&gt; null) then
   xNormalizedSegment.REPORTING_SUB_CODE := Tradeline.SubscriberNumber;
   xNormalizedSegment.SUBSCRIBER_NUMBER := Tradeline.SubscriberNumber;
endif

if(Tradeline.SourceSegment &lt;&gt; null) then
   xNormalizedSegment.SEGMENT_TYPE := Tradeline.SourceSegment;
   xNormalizedSegment.RECORD_CODE := Tradeline.SourceSegment;
endif

if(Tradeline.SubscriberName &lt;&gt; null) then
   xNormalizedSegment.SUBSCRIBER_NAME := Tradeline.SubscriberName;
endif

if(Tradeline.TapeIndicator &lt;&gt; null) then
   xNormalizedSegment.TAPE_INDICATOR := Tradeline.TapeIndicator;
endif

if(Tradeline.Terms &lt;&gt; null) then
   xNormalizedSegment.TERMS := Tradeline.Terms;
endif

if(Tradeline.TermsFrequencyOfPayment &lt;&gt; null) then
   xNormalizedSegment.TERMS_FREQ := Tradeline.TermsFrequencyOfPayment;
endif

if(Tradeline.TermsDuration &lt;&gt; null) then
   xNormalizedSegment.TERMS_PMT_SCHED_MTH := Tradeline.TermsDuration;
endif

if(Tradeline.TermsAmountOfPayment &lt;&gt; null) then
   xNormalizedSegment.TERMS_SCHED_MTH_PMT_AMT := Tradeline.TermsAmountOfPayment;
endif

if(Tradeline.UpdateIndicator &lt;&gt; null) then
   xNormalizedSegment.UPDATE_IND := Tradeline.UpdateIndicator;
endif

</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_getTMWriteOffStatusNEG" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>TM Write Offfrom NEG File</Description>
<ExpressionText>result:="PASS";
For every Application.CreditApplication.BusinessApplicant.NegFileDetails relative to BusinessApplicant do
	if(ActivityType&lt;&gt;null and ActivityType&lt;&gt;"")then
		if(ActivityType&lt;&gt;"WOR")then
			result:="FAIL";
		endif
	endif
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_CalculateAverage" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iOperand1" Type="numeric"/>
<Input Name="iOperand2" Type="numeric"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xAverage" Type="numeric"/>
</Locals>
<Description>Ratio calculations</Description>
<ExpressionText>result := 0;

if(iOperand2 = 0) then
         result := 0;
else 
        xAverage := (iOperand1/  iOperand2);
        result  := INT(xAverage);
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_isBusBureauPresent" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Is any Business Bureau Available</Description>
<ExpressionText>result:="YES";

for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.NetConnectResponse.Products.Intelliscore.BusinessNameAndAddress.ProfileType relative to BusinessApplicant do

	if(ProfileType.code&lt;&gt;null and ProfileType.code&lt;&gt; "" )then
		If(trim(ProfileType.code)="NO RECORD")then
			result:="NO";
		endif
 	endif
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsTUGroupFilters" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Generate filters for TU Group filters</Description>
<ExpressionText>    result := null;
  

    //AUTO
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AUTO := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true) then
           if(iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE, "AT, AR, AU", ",") AND 
            iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND NOT InStringList(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE, "LBR, LEA, PLL", ",") ) then
    
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AUTO := true;
    endif endif
    

    //ALE
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE, "AT, AR, AU, AL", ",")) then
           iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE := true;
    else if (((iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE = "LE") OR 
     (iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE, "LBR, LEA, PLL", ","))) AND
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT &gt;= 5000) then
           iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_ALE := true;
    endif endif


    //CAP
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CAP := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true) then
       if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "Q") then
          if(iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE, "AL, AR, AT, AU", ",")) then
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CAP := true;
          else if (((iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE = "LE") OR 
                    (iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE, "LBR, LEA, PLL", ","))) AND
                    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT &gt;= 5000) then
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CAP := true;
    endif endif endif endif

    //BNK
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BNK := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "B" AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BNK := true;    
    endif


    //BAC
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE, "B, Q", ",") AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC := true;    
    endif

    //RTL
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE, "C, D, H, J, L, S, T", ",")) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL := true;    
    endif

    //RTR
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR := true;    
    endif


    //RTI
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTI := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTL AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTI := true;    
    endif

    //FIL
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIL := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE, "F, Q", ",") AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIL := true;    
    endif


    //FIN
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIN := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE, "F, Q", ",") AND
                       (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REVOLVING)) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIN := true;    
    endif


    //LFI
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LFI := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "F" AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INSTALL) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_LFI := true;    
    endif


    //CRU
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CRU := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE = "Q") then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CRU := true;    
    endif

    //REF
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REF := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true AND 
                                      ((iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE, "VAL, VAR", ",")) OR 
                                                       (iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE, "CV, FH, FR, RE, RM, VA, VM", ",")))) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_REF := true;    
    endif


    //HEQ
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_HEQ := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_TR = true AND 
                                      ((iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE &lt;&gt; null AND iNORMALIZED_BUREAU_SEGMENTS.REMARK_CODE = "HEQ") OR 
                                                       (iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE &lt;&gt; null AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE, "FI, HI, HE, PI, RT, SI, SM", ",")))) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_HEQ := true;    
    endif


    //BRR
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BRR := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BAC OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_RTR) then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_BRR := true;
    endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_get_isFinancialTrade" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Find the availability of financial trades</Description>
<ExpressionText>result:="NO";
for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do
	if(BusinessApplicantOutput.BusFinancialTradesNum&lt;&gt;null and BusinessApplicantOutput.BusFinancialTradesNum&gt;0)then
		result:="YES";
	endif
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_isBlankOrZero" ResultType="boolean" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="xValue" Type="string"/>
</Inputs>
<Locals/>
<Description>Check if value is blank or zero</Description>
<ExpressionText>result := false;

if(xValue = null) then 
		result := true;
else if( TRIM(xValue) = "") then
		result := true;
else if (VAL(xValue) = 0) then
		result := true;
endif endif endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesFIN" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>calculates FIN Attributes</Description>
<ExpressionText>          result := null;

          //FIN001
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.FIN001 := iBUREAU_ATTRIBUTES.FIN001 + 1;
          endif

          //FIN026
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_MONTHS_RPTED &lt;= 6) then
                iBUREAU_ATTRIBUTES.FIN026 := iBUREAU_ATTRIBUTES.FIN026 + 1;
          endif

          //FIN601
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIN AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN) then
                iBUREAU_ATTRIBUTES.FIN601 := MAX(iBUREAU_ATTRIBUTES.FIN601, iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PRESENT_STATUS);
          endif

          //FIN801
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INQUIRY AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_FIN_INQ) then
                iBUREAU_ATTRIBUTES.FIN801 := iBUREAU_ATTRIBUTES.FIN801 + 1;
          endif 
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_AttachBusinessAapplicantOutput" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="null" Name="xBusinessApplicantOutput" Type="BusinessApplicantOutput"/>
</Locals>
<Description>Attach business Applicant Output</Description>
<ExpressionText>result:=null;

for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do 
 xBusinessApplicantOutput := BusinessApplicantOutput;
endfor 

if(xBusinessApplicantOutput = null) then
	xBusinessApplicantOutput := new BusinessApplicantOutput;
	ATTACH(BusinessApplicant, xBusinessApplicantOutput);
endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_AdverseActionDerogSegment" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xBureauName" Type="string"/>
<Local InitialValue="0.0" Name="xLNScore" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR6" Type="numeric"/>
<Local InitialValue="0.0" Name="xPCR4" Type="numeric"/>
<Local InitialValue="0.0" Name="xREv601d1_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV501d3_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV501d0_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xREP601d0_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xREP501d0_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN503d3_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN503d1_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN503d0_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC503d1_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC503d0_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xRTR401_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xRTR078_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xRTL901_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV044_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xREP081_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN804_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN116_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN102_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xFIN801_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xCAP801_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC908_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC901_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC801_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC078_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL804_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL740_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL702_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL701_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL301_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL146_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL084_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL052_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL022_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE908_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE801_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE001_b" Type="numeric"/>
<Local InitialValue="0.0" Name="xREv601d1_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV501d3_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV501d0_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xREP601d0_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xREP501d0_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN503d3_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN503d1_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN503d0_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC503d1_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC503d0_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xRTR401_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xRTR078_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xRTL901_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xREV044_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xREP081_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN804_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN116_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xILN102_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE001_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE801_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL022_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL052_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL084_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL146_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL301_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL701_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL702_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL740_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC078_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC801_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALL804_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC901_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xBAC908_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xCAP801_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xFIN801_m" Type="numeric"/>
<Local InitialValue="0.0" Name="xALE908_m" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xSubmodel" Type="string"/>
<Local InitialValue="null" Name="xAdverseActionList" Type="AdverseActionList"/>
<Local InitialValue="null" Name="xAdverseAction" Type="AdverseAction"/>
</Locals>
<Description>Adverse action logic Derog Segment</Description>
<ExpressionText>result:=null;
xAdverseActionList:=new AdverseActionList;

for every Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES relative to PersonalApplicant do

	//Assign Clean or Derog
	if (ALL081 &lt;= 0) then xSubmodel := "Clean"; else xSubmodel := "Derog"; endif
	
	//Clean Submodel logic for Adverse Action
	if(xSubmodel="Derog")then
		xALE001_m:=1;
		xALE801_m:=0;
		xALE908_m:=8;
		xALL022_m:=1;
		xALL052_m:=0;
		xALL084_m:=6;
		xALL146_m:=0;
		xALL301_m:=25000;
		xALL701_m:=105;
		xALL702_m:=28;
		xALL740_m:=6;
		xALL804_m:=3;
		xBAC078_m:=1;
		xBAC801_m:=1;
		xBAC901_m:=28;
		xBAC908_m:=14;
		xCAP801_m:=0;
		xFIN801_m:=1;
		xILN102_m:=1;
		xILN116_m:=0;
		xILN804_m:=1;
		xREP081_m:=0;
		xREV044_m:=0;
		xRTL901_m:=28;
		xRTR078_m:=0;
		xRTR401_m:=200;
		xBAC503d0_m:=0.5;
		xBAC503d1_m:=0.2;
		xILN503d0_m:=0.4;
		xILN503d1_m:=0.3;
		xILN503d3_m:=0.2;
		xREP501d0_m:=0.8;
		xREP601d0_m:=0.9;
		xREV501d0_m:=0.3;
		xREV501d3_m:=0.1;
		xREv601d1_m:=0.4;
		
		xALE001_b:=-0.052029;
		xALE801_b:=-0.11273;
		xALE908_b:=-0.003903;
		xALL022_b:=0.0688578;
		xALL052_b:=0.2697169;
		xALL084_b:=0.0250423;
		xALL146_b:=-0.256476;
		xALL301_b:=-0.00000361;
		xALL701_b:=-0.002372;
		xALL702_b:=-0.002278;
		xALL740_b:=-0.014457;
		xALL804_b:=0.1012543;
		xBAC078_b:=-0.113965;
		xBAC801_b:=0.0350093;
		xBAC901_b:=-0.001938;
		xBAC908_b:=-0.005679;
		xCAP801_b:=-0.106779;
		xFIN801_b:=0.0618298;
		xILN102_b:=-0.062217;
		xILN116_b:=-0.135327;
		xILN804_b:=-0.092353;
		xREP081_b:=-0.104738;
		xREV044_b:=0.061238;
		xRTL901_b:=-0.001973;
		xRTR078_b:=-0.084938;
		xRTR401_b:=-0.000087;
		xBAC503d0_b:=0.0674267;
		xBAC503d1_b:=-0.293883;
		xILN503d0_b:=0.1998753;
		xILN503d1_b:=-0.150614;
		xILN503d3_b:=-0.102037;
		xREP501d0_b:=0.1681424;
		xREP601d0_b:=-0.233072;
		xREV501d0_b:=0.080209;
		xREV501d3_b:=-0.252998;
		xREv601d1_b:=-0.152181;
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALE001";
		xAdverseAction.Weighted_Mean:=xALE001_m*xALE001_b;
		xAdverseAction.Weighted_Actual:=ALE001*xALE001_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="1";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALE801";
		xAdverseAction.Weighted_Mean:=xALE801_m*xALE801_b;
		xAdverseAction.Weighted_Actual:=ALE801*xALE801_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="2";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALE908";
		xAdverseAction.Weighted_Mean:=xALE908_m*xALE908_b;
		xAdverseAction.Weighted_Actual:=ALE908*xALE908_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="3";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL022";
		xAdverseAction.Weighted_Mean:=xALL022_m*xALL022_b;
		xAdverseAction.Weighted_Actual:=ALL022*xALL022_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="4";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL052";
		xAdverseAction.Weighted_Mean:=xALL052_m*xALL052_b;
		xAdverseAction.Weighted_Actual:=ALL052*xALL052_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="5";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL084";
		xAdverseAction.Weighted_Mean:=xALL084_m*xALL084_b;
		xAdverseAction.Weighted_Actual:=ALL084*xALL084_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="6";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL146";
		xAdverseAction.Weighted_Mean:=xALL146_m*xALL146_b;
		xAdverseAction.Weighted_Actual:=ALL146*xALL146_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="7";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL301";
		xAdverseAction.Weighted_Mean:=xALL301_m*xALL301_b;
		xAdverseAction.Weighted_Actual:=ALL301*xALL301_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="8";
		Attach(xAdverseActionList,xAdverseAction);
			
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL701";
		xAdverseAction.Weighted_Mean:=xALL701_m*xALL701_b;
		xAdverseAction.Weighted_Actual:=ALL701*xALL701_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="9";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL702";
		xAdverseAction.Weighted_Mean:=xALL702_m*xALL702_b;
		xAdverseAction.Weighted_Actual:=ALL702*xALL702_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="10";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL740";
		xAdverseAction.Weighted_Mean:=xALL740_m*xALL740_b;
		xAdverseAction.Weighted_Actual:=ALL740*xALL740_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="11";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ALL804";
		xAdverseAction.Weighted_Mean:=xALL804_m*xALL804_b;
		xAdverseAction.Weighted_Actual:=ALL804*xALL804_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="12";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="BAC078";
		xAdverseAction.Weighted_Mean:=xBAC078_m*xBAC078_b;
		xAdverseAction.Weighted_Actual:=BAC078*xBAC078_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="13";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="BAC801";
		xAdverseAction.Weighted_Mean:=xBAC801_m*xBAC801_b;
		xAdverseAction.Weighted_Actual:=BAC801*xBAC801_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="14";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="BAC901";
		xAdverseAction.Weighted_Mean:=xBAC901_m*xBAC901_b;
		xAdverseAction.Weighted_Actual:=BAC901*xBAC901_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="15";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="BAC908";
		xAdverseAction.Weighted_Mean:=xBAC908_m*xBAC908_b;
		xAdverseAction.Weighted_Actual:=BAC908*xBAC908_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="16";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="CAP801";
		xAdverseAction.Weighted_Mean:=xCAP801_m*xCAP801_b;
		xAdverseAction.Weighted_Actual:=CAP801*xCAP801_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="17";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="FIN801";
		xAdverseAction.Weighted_Mean:=xFIN801_m*xFIN801_b;
		xAdverseAction.Weighted_Actual:=FIN801*xFIN801_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="18";
		Attach(xAdverseActionList,xAdverseAction);
			
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ILN102";
		xAdverseAction.Weighted_Mean:=xILN102_m*xILN102_b;
		xAdverseAction.Weighted_Actual:=ILN102*xILN102_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="19";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ILN116";
		xAdverseAction.Weighted_Mean:=xILN116_m*xILN116_b;
		xAdverseAction.Weighted_Actual:=ILN116*xILN116_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="20";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ILN804";
		xAdverseAction.Weighted_Mean:=xILN804_m*xILN804_b;
		xAdverseAction.Weighted_Actual:=ILN804*xILN804_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="21";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="REP081";
		xAdverseAction.Weighted_Mean:=xREP081_m*xREP081_b;
		xAdverseAction.Weighted_Actual:=REP081*xREP081_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="22";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="xREV044";
		xAdverseAction.Weighted_Mean:=xREV044_m*xREV044_b;
		xAdverseAction.Weighted_Actual:=REV044*xREV044_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="23";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="RTL901";
		xAdverseAction.Weighted_Mean:=xRTL901_m*xRTL901_b;
		xAdverseAction.Weighted_Actual:=RTL901*xRTL901_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="24";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="RTR078";
		xAdverseAction.Weighted_Mean:=xRTR078_m*xRTR078_b;
		xAdverseAction.Weighted_Actual:=RTR078*xRTR078_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="25";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="RTR401";
		xAdverseAction.Weighted_Mean:=xRTR401_m*xRTR401_b;
		xAdverseAction.Weighted_Actual:=RTR401*xRTR401_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="26";
		Attach(xAdverseActionList,xAdverseAction);
	
	
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="BAC503d0";
		xAdverseAction.Weighted_Mean:=xBAC503d0_m*xBAC503d0_b;
		xAdverseAction.Weighted_Actual:=BAC503d0*xBAC503d0_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="27";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="BAC503d1";
		xAdverseAction.Weighted_Mean:=xBAC503d1_m*xBAC503d1_b;
		xAdverseAction.Weighted_Actual:=BAC503d1*xBAC503d1_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="28";
		Attach(xAdverseActionList,xAdverseAction);
			
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ILN503d0";
		xAdverseAction.Weighted_Mean:=xILN503d0_m*xILN503d0_b;
		xAdverseAction.Weighted_Actual:=ILN503d0*xILN503d0_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="29";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ILN503d1";
		xAdverseAction.Weighted_Mean:=xILN503d1_m*xILN503d1_b;
		xAdverseAction.Weighted_Actual:=ILN503d1*xILN503d1_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="30";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="ILN503d3";
		xAdverseAction.Weighted_Mean:=xILN503d3_m*xILN503d3_b;
		xAdverseAction.Weighted_Actual:=ILN503d3*xILN503d3_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="31";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="REP501d0";
		xAdverseAction.Weighted_Mean:=xREP501d0_m*xREP501d0_b;
		xAdverseAction.Weighted_Actual:=REP501d0*xREP501d0_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="32";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="REP601d0";
		xAdverseAction.Weighted_Mean:=xREP601d0_m*xREP601d0_b;
		xAdverseAction.Weighted_Actual:=REP601d0*xREP601d0_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="33";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="REV501d0";
		xAdverseAction.Weighted_Mean:=xREV501d0_m*xREV501d0_b;
		xAdverseAction.Weighted_Actual:=REV501d0*xREV501d0_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="34";
		Attach(xAdverseActionList,xAdverseAction);

		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="REV501d3";
		xAdverseAction.Weighted_Mean:=xREV501d3_m*xREV501d3_b;
		xAdverseAction.Weighted_Actual:=REV501d3*xREV501d3_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="35";
		Attach(xAdverseActionList,xAdverseAction);
		
		xAdverseAction:=new AdverseAction;
		xAdverseAction.Variable:="REv601d1";
		xAdverseAction.Weighted_Mean:=xREv601d1_m*xREv601d1_b;
		xAdverseAction.Weighted_Actual:=REv601d1*xREv601d1_b;
		xAdverseAction.Delta:=xAdverseAction.Weighted_Mean - xAdverseAction.Weighted_Actual;
		xAdverseAction.ReasonCode:="36";
		Attach(xAdverseActionList,xAdverseAction);
	endif
endfor

if(xSubmodel="Derog")then
for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do
	if(SCORES.PCR4&lt;&gt;null) then
			xPCR4:=SCORES.PCR4;
		endif
		if(SCORES.PCR6&lt;&gt;null)then
			xPCR6:=SCORES.PCR6;
		endif
		if(SCORES.LNScore&lt;&gt;null)then
			xLNScore:=SCORES.LNScore;
		endif
		if(SCORES.BureauName&lt;&gt;null)then		
		xBureauName:=SCORES.BureauName;
	 endif	

endfor
xAdverseActionList.AABureauName:=xBureauName;
xAdverseActionList.PCRV4Score:=xPCR4;
xAdverseActionList.PCRV6Score:=xPCR6;
xAdverseActionList.LNScore:=xLNScore;

for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
	Attach(PersonalApplicantOutput,xAdverseActionList);
endfor


for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.AdverseActionList.AdverseAction relative to PersonalApplicant do
	if(InStringList(AdverseAction.Variable,"ALE801, ALL804, BAC801, CAP801, FIN801, ILN804", ","))then
		AdverseAction.INQ:="Y"
	else
		AdverseAction.INQ:="N"
	endif
endfor
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_ValidateValue" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iValue" Type="numeric"/>
<Input Name="iMinimum" Type="numeric"/>
<Input Name="iMaximum" Type="numeric"/>
</Inputs>
<Locals/>
<Description>Validate values</Description>
<ExpressionText>result := iValue;

if(iValue &gt; iMaximum) then
                 result := iMaximum;
else if(iValue &lt; iMinimum) then
                result := iMinimum;
endif endif

</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_GetInterpretedGRD3GridEFXValue" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iValue" Type="string"/>
</Inputs>
<Locals/>
<Description>Get the interpreted grid value for GRD3 for EFX</Description>
<ExpressionText>result := 0;

if(iValue = null) then
         result := 0;
else if(iValue = "1") then
         result := 1;
else if(iValue = "2") then
         result := 30;
else if(iValue = "3") then
         result := 60;
else if(iValue = "4") then
         result := 90;
else if(iValue = "5") then
         result := 120;
else if(InStringList(iValue, "7, 8, 9, F, G, H, M, Z, #, $", ",")) then
        result := 400;
endif endif endif endif endif endif endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.BusinessApplicant" Name="dm_get_RiskScoreGroup" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xBureauName" Type="string"/>
<Local InitialValue="0.0" Name="xRiskScore" Type="numeric"/>
</Locals>
<Description/>
<ExpressionText>result:="";
xBureauName := "";


for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do
                xBureauName := BusinessApplicantOutput.businessBureauName;
                xRiskScore := BusinessApplicantOutput.BusRiskScore
endfor


if(xBureauName="XPB")then
                if(xRiskScore &lt;&gt; null and (xRiskScore &gt;= 9281 and xRiskScore &lt;= 10000) )then
                        result:="HIGH";
                else if(xRiskScore &lt;&gt; null and (xRiskScore &gt;= 7090 and xRiskScore &lt;= 9280))then
                        result:="MEDIUM";
                else if(xRiskScore &lt;&gt; null and xRiskScore &lt; 7090 )then
                        result:="LOW";
                endif endif endif


                //check if the score element is null or blank
                for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.XPBDataSource.Response.Output.NetConnectResponse.Products.Intelliscore.IntelliscoreScoreInformation.ScoreInfo relative to BusinessApplicant do
                        if(ScoreInfo.Score = null OR TRIM(ScoreInfo.Score) = "") then
                                result := "NO_SCORE";
                        endif
                endfor
endif


if(xBureauName="EFX")then
                if(xRiskScore &lt;&gt; null and (xRiskScore &gt;= 499 and xRiskScore &lt;= 1000) )then
                        result:="HIGH";
                else if(xRiskScore &lt;&gt; null and ( xRiskScore &gt;= 101 and xRiskScore &lt;= 498))then
                        result:="MEDIUM";
                else if(xRiskScore &lt;&gt; null and xRiskScore &lt; 101 )then
                        result:="LOW";
                endif endif endif
 
                 //check if the score element is null or blank
                for every Application.CreditApplication.BusinessApplicant.businessExternalDataSource.business.EFBDataSource.Response.Output.EfxTransmit.CommercialCreditReport.Folder.DecisionTools.ScoreData relative to BusinessApplicant do 
                        if(ScoreData.score = null or TRIM(ScoreData.score) = "") then
                                result := "NO_SCORE";
                        endif
                endfor
 
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_DefaultCreditClassCCC" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xAvailableCCTrigger" Type="string"/>
</Locals>
<Description>Determine Default Credit Class for CCC.</Description>
<ExpressionText>

for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to CreditApplication do
	//setting default only when final credit class is null or blank
	if(PersonalApplicantOutput.FINAL_CREDIT_CLASS=null OR Trim(PersonalApplicantOutput.FINAL_CREDIT_CLASS)="")then
		xAvailableCCTrigger:="B";
		
		//checking additional critiera for setting default credit class
		if(PersonalApplicant.OFACFlag&lt;&gt;null and PersonalApplicant.OFACFlag&lt;&gt;"" and PersonalApplicant.OFACFlag="Y")then
			xAvailableCCTrigger:="OFAC";
		else if(PersonalApplicant.FlagHotName&lt;&gt;null and PersonalApplicant.FlagHotName&lt;&gt;"" and PersonalApplicant.FlagHotName="Y")then
			xAvailableCCTrigger:="HotName";
		else if(PersonalApplicant.FlagHotSSN&lt;&gt;null and PersonalApplicant.FlagHotSSN&lt;&gt;"" and PersonalApplicant.FlagHotSSN="Y")then
			xAvailableCCTrigger:="HotSSN";
		else if(PersonalApplicantOutput.RESULT_NEG_CREDIT_CLASS &lt;&gt;null and PersonalApplicantOutput.RESULT_NEG_CREDIT_CLASS &lt;&gt;"" )then
				xAvailableCCTrigger:="NegFile";
			
		endif endif	endif endif
		

		if(xAvailableCCTrigger&lt;&gt;null or xAvailableCCTrigger&lt;&gt;"")then
			if(xAvailableCCTrigger="OFAC" or xAvailableCCTrigger="HotName" or xAvailableCCTrigger="HotSSN")then				
				CreditApplication.REVIEW_CREDIT_CLASS:="S";
				
			else if(xAvailableCCTrigger="NegFile")then
				PersonalApplicantOutput.FINAL_CREDIT_CLASS:="I";
			else if(xAvailableCCTrigger="B")then
				PersonalApplicantOutput.FINAL_CREDIT_CLASS:="B";
			endif endif endif
		endif
	endif
	
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_IsPCR6ScoreAvail" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Is the PCR6Score Avail?  Y or N</Description>
<ExpressionText>result:="N";
for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do
        
        //This is not the right way to do it. We should be setting up a flag while calculating PCR6 score, not checking for tag.
        //TODO : Needs correction.
		if(PCR6 &lt;&gt; null  AND PCR6 &gt; 0) then
			result:="Y";
		endif
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant.NegFileDetails" Name="dm_InitInProcessNegFileDetails" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Initalises inprocess to 0</Description>
<ExpressionText>NegFileDetails.InProcess := 0;</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_PIDError" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>Return Y if the PID ERROR</Description>
<ExpressionText>result := "N";

if(CreditApplication.PID_ERROR &lt;&gt; null AND CreditApplication.PID_ERROR = "Y" ) then
               result := "Y";
endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsEFXTradeline" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Generate filters for EFX Tradeline</Description>
<ExpressionText> result:=null;

//TR_PT
iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT := false;
if(InStringList(iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE, "PT, TC", ",")) then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT := true;
endif

//COLLECT-SEG
iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG := false;
if(iNORMALIZED_BUREAU_SEGMENTS.RECORD_CODE = "CO") then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG := true;
endif

//IND-CODE
if(iNORMALIZED_BUREAU_SEGMENTS.SUBSCRIBER_NUMBER &lt;&gt; null) then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE := RIGHT ( LEFT ( iNORMALIZED_BUREAU_SEGMENTS.SUBSCRIBER_NUMBER,  4) , 1);  
else
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE := "";
endif

//IND-TYPE
if(iNORMALIZED_BUREAU_SEGMENTS.SUBSCRIBER_NUMBER &lt;&gt; null) then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE := RIGHT ( LEFT ( iNORMALIZED_BUREAU_SEGMENTS.SUBSCRIBER_NUMBER,  5) , 2); 
else
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_TYPE := "";
endif



   //AMOUNT 
   iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT := 0;
   if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT) then
        if(iNORMALIZED_BUREAU_SEGMENTS.HIGH_CRED_AMT &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.HIGH_CRED_AMT) &gt; 0)then
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT := MAX(0, VAL(iNORMALIZED_BUREAU_SEGMENTS.HIGH_CRED_AMT));
        endif 
   else if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG) then
        if(iNORMALIZED_BUREAU_SEGMENTS.ORIGINAL_AMOUNT &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.ORIGINAL_AMOUNT) &gt; 0)then
                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT := MAX(0, VAL(iNORMALIZED_BUREAU_SEGMENTS.ORIGINAL_AMOUNT));
        endif
   endif endif


    //VALID-AMOUNT
   iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT := false;
   if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND 
                       (iNORMALIZED_BUREAU_SEGMENTS.HIGH_CRED_AMT &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.HIGH_CRED_AMT) &gt; 0)) then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT := true;
   else if (iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG AND
                      (iNORMALIZED_BUREAU_SEGMENTS.ORIGINAL_AMOUNT &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.ORIGINAL_AMOUNT) &gt; 0)) then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_VALID_AMOUNT := true;
   endif endif



//TRADE
iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE := false;
if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_IND_CODE &lt;&gt; "Y") then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE := true;
endif

//TRADE2
iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 := false;
if((iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG) AND
                             ((iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) &lt;&gt; "" AND VAL(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) &gt;= 0) OR 
                             (iNORMALIZED_BUREAU_SEGMENTS.PAST_DUE_AMT &lt;&gt; null AND TRIM(iNORMALIZED_BUREAU_SEGMENTS.PAST_DUE_AMT) &lt;&gt; "" AND VAL(iNORMALIZED_BUREAU_SEGMENTS.PAST_DUE_AMT) &gt;= 0))) then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE2 := true;
endif

//TRADEX
 iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX := false;
 if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG) then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADEX := true;
 endif
 
 
 
//TYPE
iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TYPE := "";
if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT ) then
        if(iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE = null OR TRIM(iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE) ="" ) then
                       if(InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AO, AP, AQ, AR, AS, AT, AU, AW, BR, BS, BT, BU, BX, CH, CI, CL, CK, CX, DG, DJ, DM, DQ, DS, DT, DY, EB, EE, EF, EG, EH, EX, EY, EZ, FD, HO, GP, HP, HQ, HR, HS, HU, HW, IB, IC, ID", ",") OR 
                                              InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AO, AP, AQ, AR, AS, AT, AU, AW, BR, BS, BT, BU, BX, CH, CI, CL, CK, CX, DG, DJ, DM, DQ, DS, DT, DY, EB, EE, EF, EG, EH, EX, EY, EZ, FD, HO, GP, HP, HQ, HR, HS, HU, HW, IB, IC, ID", ",") ) then
                                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TYPE := "I";
                       else if(InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AV, AZ, BE, CS, CV, FC, FE", ",") OR 
                                              InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AV, AZ, BE, CS, CV, FC, FE", ",") ) then
                                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TYPE := "R";
                       else if(InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "FR", ",") OR 
                                              InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "FR", ",") ) then
                                iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TYPE := "O";
                       endif endif endif
        else
                       iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TYPE := iNORMALIZED_BUREAU_SEGMENTS.ACCOUNT_TYPE;
        endif
endif

 
 

//TERMS3
iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS3 := 0;
if(iNORMALIZED_BUREAU_SEGMENTS.TERMS &lt;&gt; null) then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS3 := VAL(LEFT(iNORMALIZED_BUREAU_SEGMENTS.TERMS, 6));
endif


//TERMS4
iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS4 := "";
if(iNORMALIZED_BUREAU_SEGMENTS.TERMS &lt;&gt; null) then
        iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS4 := RIGHT(iNORMALIZED_BUREAU_SEGMENTS.TERMS, 1);
endif

//TERMS-CD
iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS_CD := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS4;

//TERMS-NUM
if(InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS4, "0, 1, 2, 3, 4, 5, 6, 7, 8, 9", ",") ) then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS_NUM := VAL(iNORMALIZED_BUREAU_SEGMENTS.TERMS);
else 
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS_NUM := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS3;
endif
  

//INST_TERMS
iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INST_TERMS := 0;
if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TYPE = "I") then
        if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS4 = "Y") then
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INST_TERMS := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS3 * 12;
        else if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS4 = "M") then
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INST_TERMS := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS3;
        else if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS4 = "D") then
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INST_TERMS := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS3 / 30;
        else if(TRIM(iNORMALIZED_BUREAU_SEGMENTS.TERMS) &lt;&gt; "" 
                                                                                   AND InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TERMS4, "0, 1, 2, 3, 4, 5, 6, 7, 8, 9", ",")  
                                                                                   AND VAL(iNORMALIZED_BUREAU_SEGMENTS.TERMS) &gt; 0) then
                      iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INST_TERMS := iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_AMOUNT / VAL(iNORMALIZED_BUREAU_SEGMENTS.TERMS);
        endif endif endif endif
endif
  



  

</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_GetInterpretedEFXGridValue" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iValue" Type="string"/>
</Inputs>
<Locals/>
<Description>Get the EFX interpreted grid value for GRD2</Description>
<ExpressionText>result := 0;


if(iValue = null) then
         result := 0;
else if(iValue = "X" OR iValue = "*") then
         result := 1;
else if(iValue = "2") then
         result := 30;
else if(iValue = "3") then
         result := 60;
else if(iValue = "4") then
         result := 90;
else if(iValue = "5") then
         result := 120;
endif endif endif endif endif endif</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_SetFinalCreditClass_CCC" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>assign final credit class to personal applicant output</Description>
<ExpressionText>

for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
        if((PersonalApplicantOutput.RESULT_NEG_CREDIT_CLASS=null or PersonalApplicantOutput.RESULT_NEG_CREDIT_CLASS="") and 
                                        (PersonalApplicantOutput.IRC_CREDIT_CLASS=null or PersonalApplicantOutput.IRC_CREDIT_CLASS ="" ))then
		
                PersonalApplicantOutput.FINAL_CREDIT_CLASS:=PersonalApplicantOutput.INITIAL_CREDIT_CLASS;
        else if(PersonalApplicantOutput.RESULT_NEG_CREDIT_CLASS&lt;&gt;null and PersonalApplicantOutput.RESULT_NEG_CREDIT_CLASS&lt;&gt;"")then
                PersonalApplicantOutput.FINAL_CREDIT_CLASS:=PersonalApplicantOutput.RESULT_NEG_CREDIT_CLASS;
        else if(PersonalApplicantOutput.IRC_CREDIT_CLASS&lt;&gt;null and PersonalApplicantOutput.IRC_CREDIT_CLASS&lt;&gt;"")then
                PersonalApplicantOutput.FINAL_CREDIT_CLASS:=PersonalApplicantOutput.IRC_CREDIT_CLASS;
        endif
        endif
        endif
		
    
endfor
</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_Decimal_Round" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iNumber" Type="numeric"/>
<Input Name="iPrecision" Type="numeric"/>
</Inputs>
<Locals>
<Local InitialValue="0.0" Name="xNumber" Type="numeric"/>
</Locals>
<Description>Round decimal part of of number for a certain precision</Description>
<ExpressionText>result:=0;

if(iPrecision&lt;&gt;0) then
	xNumber:= iNumber * iPrecision;
	xNumber:= Int(xNumber + 0.5);
	result:= xNumber/iPrecision;
endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_ParseTUInquiryData" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="string"/>
</Inputs>
<Locals>
<Local InitialValue="null" Name="xProfileDate" Type="timestamp"/>
<Local InitialValue="null" Name="xNormalizedSegmentObject" Type="NORMALIZED_BUREAU_SEGMENTS"/>
<Local InitialValue="null" Name="xBureauAttributes" Type="BUREAU_ATTRIBUTES"/>
</Locals>
<Description>Parse TU Inquiry data</Description>
<ExpressionText>result := null;

for every Application.CreditApplication.PersonalApplicant relative to CreditApplication do

          //set to null for every applicant
          xBureauAttributes := null;
         
   
          //calculate Profile Date timestamp
          xProfileDate := dm_formatDate(iProfileDate);
    
    
          //create BureauAttributes Object if not available
          for every Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES relative to PersonalApplicant do
                  xBureauAttributes := BUREAU_ATTRIBUTES;
                  //Attach(BUREAU_ATTRIBUTES, xNormalizedSegmentObject);
          endfor
    
         if(xBureauAttributes = null) then
                  xBureauAttributes := new BUREAU_ATTRIBUTES;
                  ATTACH(PersonalApplicant, xBureauAttributes);
         endif
    
 
        //dedupe TU inquiries
        dm_TUDeDupInquiry(xProfileDate);


        //dedupe TU inquiries - not required
        //dm_TUDeDupBankInquiry(xProfileDate);
  
    
         //Parse Inquiries
        for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.DataSource.Response.Output.ParsedResponseList.ParsedResponse.InquiryList.Inquiry relative to PersonalApplicant do

                       xNormalizedSegmentObject := new NORMALIZED_BUREAU_SEGMENTS;
                       //populate all the Tradeline data
                      dm_PopulateInquiryListData(xNormalizedSegmentObject);
                      //PROFILE_DATE
                     xNormalizedSegmentObject.STAGG_FF_PROFILE_DATE := iProfileDate;
     
                     ATTACH(xBureauAttributes, xNormalizedSegmentObject);
       endfor


endfor




</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGAttributesCRU" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iBUREAU_ATTRIBUTES" Type="BUREAU_ATTRIBUTES"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>calculates CRU Attributes</Description>
<ExpressionText>          result := null;

          //CRU001
          if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TRADE AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CRU AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC) then
                iBUREAU_ATTRIBUTES.CRU001 := iBUREAU_ATTRIBUTES.CRU001 + 1;
          endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application" Name="dm_get_GamingVelocityCounter" ResultType="real" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals/>
<Description>returns GamingVelocityCounter</Description>
<ExpressionText>for every Application.CreditApplication.CreditApplicationOutput relative to Application do
if(CreditApplicationOutput.GamingVelocityCounter &lt;&gt; null) then
	result:= CreditApplicationOutput.GamingVelocityCounter;
endif
endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_CalculateScorableFlag" ResultType="boolean" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="true" Name="xScorable" Type="boolean"/>
<Local InitialValue="0.0" Name="xScore" Type="numeric"/>
</Locals>
<Description>Calculates Scorable flag</Description>
<ExpressionText>result := true;

for every Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES relative to PersonalApplicant do

               if(GBL007 = 1) then
                              //DESEASED
                              xScorable := false;
                              xScore := -9001;
               else if(ALL002 = 0 AND ALL005 = 0 ) then
                              //NO SCORE
                              xScorable := false;
                              xScore := -9002;
               else if( ALL002 = 0 AND ALL005 &gt; 0 ) then
                              //NOS BAD
                              xScorable := false;
                              xScore := -9003;
               endif endif endif

endfor

//set output
for every Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput relative to PersonalApplicant do
               PersonalApplicantOutput.isScorable := xScorable;
endfor


if( NOT xScorable) then
               

                //Attach the PCR4 score
               for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do
                              SCORES.PCR4 :=  xScore;
               endfor    
    
//                 xSCORES.PCR4 := xScore;
endif

result := xScorable;</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_STAGGFiltersAndFunctionsEFXAccountStatus" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="iProfileDate" Type="timestamp"/>
<Input Name="iNORMALIZED_BUREAU_SEGMENTS" Type="NORMALIZED_BUREAU_SEGMENTS"/>
</Inputs>
<Locals/>
<Description>Generate filters for EFX Account Status</Description>
<ExpressionText>    result := null;
  
  
    //NEUTRAL
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NEUTRAL := false;
    if( iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND
                                                 (InStringList(iNORMALIZED_BUREAU_SEGMENTS.RATE_CODE, "J, S", ",") OR
                                                     InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AA, AF, AG, BB, BH, BV, DE, EI, EJ, FF, FG, FO, FP, FQ, FW, GE", ",") OR
                                                     InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AA, AF, AG, BB, BH, BV, DE, EI, EJ, FF, FG, FO, FP, FQ, FW, GE", ",")))then
             iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NEUTRAL := true;  
    endif
  
    //INACTIVE
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INACTIVE := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NEUTRAL = false) then
             if( iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND
                                                 (InStringList(iNORMALIZED_BUREAU_SEGMENTS.RATE_CODE, "A, B, D, V, X, U", ",") OR
                                                     InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "BC, CE, CM, DQ, DY, IJ", ",") OR
                                                     InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "BC, CE, CM, DQ, DY, IJ", ",")))then
                     iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INACTIVE := true;
    endif endif
 
    //CLOSED
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CLOSED := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NEUTRAL = false AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INACTIVE = false) then
             if( iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND
                                                 (InStringList(iNORMALIZED_BUREAU_SEGMENTS.RATE_CODE, "7, 8, 9, G, H, M, Z, #, $", ",") OR
                                                     (( TRIM(iNORMALIZED_BUREAU_SEGMENTS.RATE_CODE) = "" OR InStringList(iNORMALIZED_BUREAU_SEGMENTS.RATE_CODE, "0, 1, 2, 3, 4, 5, *, C, F, K, L, N, Q, T, W", ",")) AND
                                                         (InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AM, AN, BE, BG, BR, BW, BY, CA, CB, CD, CF, CG, CJ, CP, CT, CU, CW, CY, CZ, DA, DB, DJ, DN, DM, DO, DU, EB, EM, EN, EO, ES, EV, FC, FD, FU, GB, GC, GJ, GL, HF, HM, HN, HX, IB, IC, IK, IL, IM, IN, IR", ",") OR
                                                          InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AM, AN, BE, BG, BR, BW, BY, CA, CB, CD, CF, CG, CJ, CP, CT, CU, CW, CY, CZ, DA, DB, DJ, DN, DM, DO, DU, EB, EM, EN, EO, ES, EV, FC, FD, FU, GB, GC, GJ, GL, HF, HM, HN, HX, IB, IC, IK, IL, IM, IN, IR", ",")))))then
                    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CLOSED := true;
        else if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG AND 
                                iNORMALIZED_BUREAU_SEGMENTS.STATUS_CODE &lt;&gt; "P") then
                    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CLOSED := true;
        endif endif
  
     endif
 
    //PAID
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PAID := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NEUTRAL = false AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INACTIVE = false AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CLOSED = false) then
        if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND 
                                                 (TRIM(iNORMALIZED_BUREAU_SEGMENTS.RATE_CODE) = "" OR InStringList(iNORMALIZED_BUREAU_SEGMENTS.RATE_CODE, "0, 1, 2, 3, 4, 5, *, C, F, K, L, N, Q, T, W", ","))   AND
       (InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1, "AX, BD, BQ, BS, BZ, CH, CL, CQ, DI, DK, DP, EL, ER, ET, FA, FV, GA, GD, GH", ",") OR 
                                                      InStringList(iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE2, "AX, BD, BQ, BS, BZ, CH, CL, CQ, DI, DK, DP, EL, ER, ET, FA, FV, GA, GD, GH", ",") OR  
                                                      (InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TYPE, "I", ",")  AND iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) = 0 AND 
                                                                                                                                                                        iNORMALIZED_BUREAU_SEGMENTS.PAST_DUE_AMT &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.PAST_DUE_AMT) = 0) OR
                                                      (InStringList(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TYPE, "O, R", ",")  AND iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.CUR_BAL_AMT) = 0 AND 
                                                                                                                                                                                                              iNORMALIZED_BUREAU_SEGMENTS.PAST_DUE_AMT &lt;&gt; null AND VAL(iNORMALIZED_BUREAU_SEGMENTS.PAST_DUE_AMT) = 0 AND
                                                                                                      (iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1 = "EA" OR iNORMALIZED_BUREAU_SEGMENTS.NARRATIVE_CODE1 = "EA")      ))     ) then
  
                     iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PAID := true;

    else if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_COLLECT_SEG AND 
                                iNORMALIZED_BUREAU_SEGMENTS.STATUS_CODE = "P") then   
                     iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PAID := true;
        endif endif
    endif
 
    
    //OPEN
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_NEUTRAL = false AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INACTIVE = false AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CLOSED = false AND iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PAID = false) then
       if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_TR_PT AND 
                                                 (TRIM(iNORMALIZED_BUREAU_SEGMENTS.RATE_CODE) = "" OR InStringList(iNORMALIZED_BUREAU_SEGMENTS.RATE_CODE, "F, K, L, N, Q, T, W, 0, 1, 2, 3, 4, 5, C, *", ","))) then
            iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN := true;
       endif
    endif
   
    //STATUS-OPC
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN = true OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PAID = true OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CLOSED = true) then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPC := true;
    endif
   
    //STATUS-OPCI
    iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI := false;
    if(iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_OPEN = true OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_PAID = true OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_CLOSED = true  OR iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_INACTIVE = true) then
         iNORMALIZED_BUREAU_SEGMENTS.STAGG_FF_STATUS_OPCI := true;
    endif
</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication" Name="dm_setBusinessCC" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="&quot;&quot;" Name="xNEGAvailable" Type="string"/>
</Locals>
<Description>Sets the Business Credit Class</Description>
<ExpressionText>xNEGAvailable:="NO";
for every Application.CreditApplication.BusinessApplicant relative to CreditApplication do
        for every Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput relative to BusinessApplicant do 
                if(BusinessApplicantOutput.NEGAvailable &lt;&gt; null AND BusinessApplicantOutput.NEGAvailable = "true") then
                        xNEGAvailable := "YES";
                endif
                if(BusinessApplicantOutput.INITIAL_CREDIT_CLASS &lt;&gt; null and BusinessApplicantOutput.INITIAL_CREDIT_CLASS &lt;&gt; "")then
                        BusinessApplicantOutput.FINAL_CREDIT_CLASS:=Trim(BusinessApplicantOutput.INITIAL_CREDIT_CLASS);
                endif         
	

                if(xNEGAvailable = "YES") then
                        BusinessApplicantOutput.RESULT_NEG_CREDIT_CLASS := "6";
                        CreditApplication.REVIEW_CREDIT_CLASS:="S";
						BusinessApplicantOutput.FINAL_CREDIT_CLASS := "6";
                endif

                //Default Credit Class Logic
                if(BusinessApplicantOutput.FINAL_CREDIT_CLASS = null OR BusinessApplicantOutput.FINAL_CREDIT_CLASS = "")then
                        BusinessApplicantOutput.FINAL_CREDIT_CLASS := "5";
                        if(BusinessApplicant.OFACFlag &lt;&gt; null AND BusinessApplicant.OFACFlag = "Y")then
                                CreditApplication.REVIEW_CREDIT_CLASS:="S";
                        else if(xNEGAvailable = "YES")then
                                BusinessApplicantOutput.FINAL_CREDIT_CLASS:="6"; //this never executes
                        endif endif 
                endif
               
        endfor

endfor</ExpressionText>
</DataMethod>
<DataMethod Context="Application.CreditApplication.PersonalApplicant" Name="dm_LNScoreModel" ResultType="string" SaveHistory="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Locals>
<Local InitialValue="false" Name="xValidScore" Type="boolean"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode5" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode4" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode3" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode2" Type="string"/>
<Local InitialValue="&quot;&quot;" Name="xReasonCode1" Type="string"/>
<Local InitialValue="null" Name="xReportDate" Type="timestamp"/>
<Local InitialValue="null" Name="xScoreModel" Type="SCORE_MODEL"/>
<Local InitialValue="&quot;&quot;" Name="xBureauName" Type="string"/>
<Local InitialValue="0.0" Name="xScoreValue" Type="numeric"/>
<Local InitialValue="&quot;&quot;" Name="xScoreName" Type="string"/>
</Locals>
<Description>Assign Lexis Nexus score to Score Model</Description>
<ExpressionText>result:=null;

for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.LNRiskViewDataSource.Response.Output.RiskViewResponseEx.Result.Models.Model.LNScores.LNScore relative to PersonalApplicant do
	if(LNScore.Type&lt;&gt;null and LNScore.Type&lt;&gt;"")then
		if(LNScore.Type="TelecomRVT12121" or LNScore.Type="TelecomRVT12101")then
			xScoreName:=Trim(LNScore.Type);
			xScoreValue:=int(LNScore.Value);
			if(xScoreValue&gt;=0)then
				xValidScore:=true;
			endif
			xBureauName:="LEXISNEXIS";
		endif
	endif
	
	if(xValidScore) then
	for every Application.CreditApplication.PersonalApplicant.ExternalDataSource.consumer.LNRiskViewDataSource.Response.Output.RiskViewResponseEx.Result.Models.Model.LNScores.LNScore.HighRiskIndicators.HighRiskIndicator relative to LNScore do
		if(HighRiskIndicator.Sequence=1)then
			xReasonCode1:=RiskCode;
		else if(HighRiskIndicator.Sequence=2)then
			xReasonCode2:=RiskCode;
		else if(HighRiskIndicator.Sequence=3)then
			xReasonCode3:=RiskCode;
		else if(HighRiskIndicator.Sequence=4)then
			xReasonCode4:=RiskCode;
		else if(HighRiskIndicator.Sequence=5)then
			xReasonCode5:=RiskCode;
		endif
		endif
		endif
		endif
		endif
	endfor
	endif
endfor 

 if(xValidScore) then
xScoreModel:= new SCORE_MODEL;
xSCoreModel.SCORE_NAME:=xScoreName;
xScoreModel.SCORE_VALUE:=int(xScoreValue);
xScoreModel.BUREAU_NAME:=xBureauName;
xScoreModel.REPORT_DATE:=TimestampToDate( xReportDate);
xScoreModel.REASON_CODE_1:=xReasonCode1;
xScoreModel.REASON_CODE_2:=xReasonCode2;
xScoreModel.REASON_CODE_3:=xReasonCode3;
xScoreModel.REASON_CODE_4:=xReasonCode4;
xScoreModel.REASON_CODE_5:=xReasonCode5;
xScoreModel.IS_SCORE_MODEL_DECISION:=false;

for every Application.CreditApplication.PersonalApplicant.SCORES relative to PersonalApplicant do
	Attach(SCORES,xScoreModel);
endfor 
endif</ExpressionText>
</DataMethod>
</DataMethods>
<DataMethodSequences>
<DataMethodSequence Description="Initialize Duplicate Velocity" Name="dms_InitializeDupli" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_StrategyVersion" ObjectOrReferenceName="Application" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_InitializeDup" ObjectOrReferenceName="Application.CreditApplication" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Holds dm to calculate intermediate fact types used in PG business logic" Name="dms_InitializePGCCIntermediateFactTypes" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_StrategyVersion" ObjectOrReferenceName="Application" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AttachBusinessAapplicantOutput" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_DeterminePGEigibility" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_DetermineCMFInfoPG" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AdverseActionReasons" ObjectOrReferenceName="Application.CreditApplication" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Generate Characteristics" Name="dms_GenerateCharacteristics" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_GenerateCharacteristics" ObjectOrReferenceName="Application.CreditApplication" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Assign NegFileDetails to complete" Name="dm_AssignInProcessNegFileDetailsComplete" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_AssignInProcessNegFileDetailsComplete" ObjectOrReferenceName="Application" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Assign ECOA reason codes for Business" Name="dms_AssignECOAReasonCodesBCC" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_SetECOAReasonCodesBCC" ObjectOrReferenceName="Application.CreditApplication" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_BusinessTemplateCode" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Assign NEG file in process" Name="dms_AssignInProcessNegFileDetails" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_AssignInProcessNegFileDetails" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Set credit class for BYOD" Name="dms_setBYOD_CC" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_setBYODCreditCCto_H" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Calculate BusinessApplicantOutput.AUTO_VERIFY" Name="dms_BusAppAutoVerify" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_BusAppAutoVerify" ObjectOrReferenceName="Application" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Calculates isScorable flag" Name="dms_CalculateScorableFlag" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_CalculateScorableFlag" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="To set Upgrade Downgrade initial credit class " Name="dms_setUDConsumerCC" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_setUDConsumerCC" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="" Name="dms_set_CreditClass7" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_set_CreditClass7" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="To set Fraud alerts for TU" Name="dms_FraudAlerts_TU" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_set_FraudFlags" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Strategy version" Name="dms_StrategyVersion" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_StrategyVersion" ObjectOrReferenceName="Application" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="DMS for setting the IsDecision in NegFileDetail" Name="dms_SetIsDecisionNegFile" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_set_isDecisionNegFile" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Set neg type" Name="dms_SetNegType" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_setNEGType" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Sets ECOA Reason for Hot Name and OFAC" Name="dms_SetECOAReasonHotNameOFACC" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_SetECOAReasonHotNameOFACC" ObjectOrReferenceName="Application.CreditApplication" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Initialize Gaming and Dup Velocity counters" Name="dms_InitializeGaming" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_InitializeGaming" ObjectOrReferenceName="Application.CreditApplication" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="On the PCR6 credit class and alerts decision flow, this step will calculate all necessary flags and attributes" Name="dms_CCC_Calculate_Flags" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_StrategyVersion" ObjectOrReferenceName="Application" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AssignChampionChallenger" ObjectOrReferenceName="Application.CreditApplication" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_InitPCRAlert" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AssignClarityHit" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_ScoreLexis" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_setIRCAvailable" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.BUREAU_ATTRIBUTES" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AttachCreditApplicationOutput" ObjectOrReferenceName="Application.CreditApplication" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_InitInProcessNegFileDetails" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.NegFileDetails" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Calculate PCR6 score" Name="dms_CalculatePCR6Score" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_CalculatePCR6Score" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="" Name="dms_PostPID" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_SetScoreFlagPreciseID" ObjectOrReferenceName="Application" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="" Name="dms_set_CreditClass4" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_set_CreditClass4" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Data method to Derive Phone Tier from Neustar Report" Name="dms_InitCreditClassUpgrade" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_StrategyVersion" ObjectOrReferenceName="Application" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_DeterminePhoneTier" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="" Name="dms_set_CreditClass5" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_set_CreditClass5" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Holds data methods to derive initial business CC intermediate fact types." Name="dms_InitBusinessCC" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_StrategyVersion" ObjectOrReferenceName="Application" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AttachBusinessAapplicantOutput" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_BusinessSummary" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_isNEGAvailableBusinessApp" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_DetermineCMFInfoPG" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="To set initial PG credit class " Name="dms_setPGCreditClass" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_AdverseActionCleanSegment" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AdverseActionDerogSegment" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AdverseActionDeltaRanking" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AdverseActionReasons" ObjectOrReferenceName="Application.CreditApplication" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_SetFinalCreditClassPGCC" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_DefaultCreditClassPGCC" ObjectOrReferenceName="Application.CreditApplication" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_BusinessTemplateCode" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="" Name="dms_set_CreditClass_S" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_set_CreditClass_S" ObjectOrReferenceName="Application" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Calculate PCR4 score" Name="dms_CalculatePCR4Score" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_CalculatePCR4Score" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AdverseActionCleanSegment" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AdverseActionDerogSegment_Orig" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AdverseActionDeltaRanking" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AdverseActionReasons" ObjectOrReferenceName="Application.CreditApplication" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AssignScoreReasonToScoreModel" ObjectOrReferenceName="Application" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Assigns the PC credit Class to 3" Name="dms_AssignPGCreditClass_3" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_AssignPGCreditClass3" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Initializing data methods" Name="dms_InitBVS" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_StrategyVersion" ObjectOrReferenceName="Application" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AttachBusinessAapplicantOutput" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Sets all the PID code check logic in preparation for calling Fraud strategy tree" Name="dms_PIDCodeLogic" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_SetFinalCreditClass_CCC" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_PuertoRico_L_to_D" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_PIDCodeLogic" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Assign Velocity Credit Class" Name="dms_AssignVelocityCreditClass" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_AttachPersonalApplicantOutput" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AttachBusinessAapplicantOutput" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AssignVelocityCreditClass" ObjectOrReferenceName="Application.CreditApplication" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Smart Credit CC to R" Name="dms_SmartCreditCCto_R" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_setSmartCreditCCto_R" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Holds the KBA and Non KBA and Finalize CC for Consumer." Name="dms_FinalCCCStep" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_DefaultCreditClassCCC" ObjectOrReferenceName="Application.CreditApplication" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_SetECOAReasonCodesCCC" ObjectOrReferenceName="Application.CreditApplication" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AssignScoreReasonToScoreModel" ObjectOrReferenceName="Application" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_SelectScoreModel" ObjectOrReferenceName="Application.CreditApplication" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="" Name="dms_set_CreditClass2" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_set_CreditClass2" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Set CC 6" Name="dms_set_CreditClass6" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_set_CreditClass6" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Set Final Credit Class for PSWHL" Name="dms_setPSWL_CC" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_setPSWL_CC" ObjectOrReferenceName="Application" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Set the WFM CCC to T" Name="dms_SetWFMCCC" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_setWFMConsumerCCto_T" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Holds data method to classify the KBA and NON KBA alert" Name="dms_ClassifyKBAorNonKBA" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_ClassifyKBAandNonKBA" ObjectOrReferenceName="Application.DecisionResponse" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Efficiency of Neustar interface ondemand call" Name="dms_EfficiencyOfNeustar" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_EfficiencyOfNeustar" ObjectOrReferenceName="Application.CreditApplication" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="To set Credit class at business applicant" Name="dms_setBusinessCC" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_setBusinessCC" ObjectOrReferenceName="Application.CreditApplication" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="To set Fraud alerts for EFX" Name="dms_FraudAlerts_EFX" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_set_FraudFlags_Efx" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="" Name="dms_set_CreditClass3" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_set_CreditClass3" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Smart Credit CC to Q" Name="dms_SmartCreditCCto_Q" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_setSmartCreditCCto_Q" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="" Name="dms_set_CreditClass1" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_set_CreditClass1" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Business Fraud Alerts" Name="dms_BusinessFraudAlerts" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_SetBusinessGamingVelocityAlert" ObjectOrReferenceName="Application.CreditApplication" ReferenceType="Object"/>
</DataMethodSequence>
<DataMethodSequence Description="Initializing data methods for CSA" Name="dms_InitialiseCSA" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DataMethodSequenceRow DataMethodName="dm_StrategyVersion" ObjectOrReferenceName="Application" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AttachPersonalApplicantOutput" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AttachSCORES" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_InitPCRAlert" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput" ReferenceType="Object"/>
<DataMethodSequenceRow DataMethodName="dm_AssignBureauScoreAndName" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant" ReferenceType="Object"/>
</DataMethodSequence>
</DataMethodSequences>
<DataObjectReferences>
<DataObjectReference Context="Application.CreditApplication.PersonalApplicant.NegFileDetails" Description="Select NegFile currently InProcess" Name="dor_InProcessNegFile" ReturnLast="false" ReturnWhen="All" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Conditions>
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.NegFileDetails" OperandText="NegFileDetails.InProcess" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="1" OperandType="Value"/>
</Condition>
</Conditions>
</DataObjectReference>
<DataObjectReference Context="Application.CreditApplication.PersonalApplicant.CMFDetails" Description="Returns all CMFDetails with Highest CC" Name="dor_CMFDetailsHighestCC" ReturnLast="false" ReturnWhen="All" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs>
<Input Name="xBANHighestCC" Type="string"/>
</Inputs>
<Conditions>
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.CMFDetails" OperandText="CMFDetails.creditClass" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="xBANHighestCC:string" OperandType="Value"/>
</Condition>
</Conditions>
</DataObjectReference>
<DataObjectReference Context="Application.CreditApplication.PersonalApplicant.SCORES.SCORE_MODEL" Description="Select Score Model with name EFX Advance Energy" Name="dor_AEScoreModel" ReturnLast="false" ReturnWhen="All" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Conditions>
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.SCORES.SCORE_MODEL" OperandText="SCORE_MODEL.SCORE_NAME" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;AE&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</DataObjectReference>
<DataObjectReference Context="Application.CreditApplication.PersonalApplicant.SCORES.SCORE_MODEL" Description="Select Score Model with name PCRv6" Name="dor_PCRv6ScoreModel" ReturnLast="false" ReturnWhen="All" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Conditions>
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.SCORES.SCORE_MODEL" OperandText="SCORE_MODEL.SCORE_NAME" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;PCRv6&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</DataObjectReference>
<DataObjectReference Context="Application.CreditApplication.PersonalApplicant.NegFileDetails" Description="select Unevaluated Neg File Details." Name="dor_NegFileDetailsUnEvaluated" ReturnLast="false" ReturnWhen="All" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Conditions>
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.NegFileDetails" OperandText="NegFileDetails.InProcess" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="0" OperandType="Value"/>
</Condition>
</Conditions>
</DataObjectReference>
<DataObjectReference Context="Application.CreditApplication.PersonalApplicant.SCORES.SCORE_MODEL" Description="Select Score Model with name LexiNexis" Name="dor_LNScoreModel" ReturnLast="false" ReturnWhen="All" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Conditions>
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.SCORES.SCORE_MODEL" OperandText="SCORE_MODEL.BUREAU_NAME" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;LEXISNEXIS&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</DataObjectReference>
<DataObjectReference Context="Application.CreditApplication.PersonalApplicant.SCORES.SCORE_MODEL" Description="Select Score Model with name TU NA3" Name="dor_NA3ScoreModel" ReturnLast="false" ReturnWhen="All" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Conditions>
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.SCORES.SCORE_MODEL" OperandText="SCORE_MODEL.SCORE_NAME" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;NA3&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</DataObjectReference>
<DataObjectReference Context="Application.CreditApplication.PersonalApplicant.SCORES.SCORE_MODEL" Description="Select Score Model with name PCRv4" Name="dor_PCRv4ScoreModel" ReturnLast="false" ReturnWhen="All" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Inputs/>
<Conditions>
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.SCORES.SCORE_MODEL" OperandText="SCORE_MODEL.SCORE_NAME" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;PCRv4&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</DataObjectReference>
</DataObjectReferences>
<DecisionFlows>
<DecisionFlow Description="Calculates STAGG, PCR4, Fraud alerts " Name="df_CSA" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DecisionFlowEffectiveDate/>
<DecisionFlowSteps>
<DecisionFlowStep ImplementationName="dms_GenerateCharacteristics" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="GenerateSTAGG" propertiesXML="&lt;step XPos='269.99998474121094' YPos='72.316650390625' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="ComputeScorableFlag" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_CalculatePCR4Score" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="PCR4" propertiesXML="&lt;step XPos='691.9833221435547' YPos='75.9666748046875' /&gt;">
<DecisionFlowStepTransitions/>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_CalculateScorableFlag" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="ComputeScorableFlag" propertiesXML="&lt;step XPos='470.61668395996094' YPos='76.2833251953125' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="PCR4" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_InitialiseCSA" ImplementationType="Data Method Sequence" IsFirstStep="true" Name="dms_InitialiseCSA" propertiesXML="&lt;step XPos='38.99' YPos='65' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="SetGamingOutputs" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_InitializeGaming" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="SetGamingOutputs" propertiesXML="&lt;step XPos='176' YPos='170' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="GenerateSTAGG" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
</DecisionFlowSteps>
</DecisionFlow>
<DecisionFlow Description="Dup Velocity" Name="df_DupVelocity" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DecisionFlowEffectiveDate/>
<DecisionFlowSteps>
<DecisionFlowStep ImplementationName="dms_InitializeDupli" ImplementationType="Data Method Sequence" IsFirstStep="true" Name="InitializeVelocity" propertiesXML="&lt;step XPos='161' YPos='85' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="VelocityCounter" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="rs_DupVelocity" ImplementationType="Ruleset" IsFirstStep="false" Name="VelocityCounter" propertiesXML="&lt;step XPos='415.67' YPos='90.32' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="AssignCreditClass" ResultValue="REFER"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_AssignVelocityCreditClass" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="AssignCreditClass" propertiesXML="&lt;step XPos='681' YPos='98' /&gt;">
<DecisionFlowStepTransitions/>
</DecisionFlowStep>
</DecisionFlowSteps>
</DecisionFlow>
<DecisionFlow Description="Decision flow to Review Credit Decision for Manual Review " Name="df_UWR" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DecisionFlowEffectiveDate/>
<DecisionFlowSteps>
<DecisionFlowStep ImplementationName="dms_StrategyVersion" ImplementationType="Data Method Sequence" IsFirstStep="true" Name="StrategyVersion" propertiesXML="&lt;step XPos='87' YPos='51' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="AssignCreditClassReview" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_set_CreditClass_S" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="AssignCreditClassReview" propertiesXML="&lt;step XPos='562' YPos='66' /&gt;">
<DecisionFlowStepTransitions/>
</DecisionFlowStep>
</DecisionFlowSteps>
</DecisionFlow>
<DecisionFlow Description="Decision flow for WFM and Smart Cedit CC" Name="df_WFMSmartCC" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DecisionFlowEffectiveDate/>
<DecisionFlowSteps>
<DecisionFlowStep ImplementationName="dms_SetWFMCCC" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="WFM_CC" propertiesXML="&lt;step XPos='426' YPos='176.97000122070312' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="PSWL_BLANK" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="rs_FraudRulesWFM" ImplementationType="Ruleset" IsFirstStep="false" Name="FraudRSWFM" propertiesXML="&lt;step XPos='643' YPos='178.47' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="WFM_CC" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_SmartCreditCCto_R" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="SmartCreditCCtoR" propertiesXML="&lt;step XPos='639' YPos='88.97998046875' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="FraudRSWFM" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_SmartCreditCCto_Q" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="SmartCreditCCtoQ" propertiesXML="&lt;step XPos='836' YPos='0' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="FraudRSSmartCredit" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="rs_FraudRulesSmart" ImplementationType="Ruleset" IsFirstStep="false" Name="FraudRSSmartCredit" propertiesXML="&lt;step XPos='839' YPos='86.98' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="SmartCreditCCtoR" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_StrategyVersion" ImplementationType="Data Method Sequence" IsFirstStep="true" Name="Versioning" propertiesXML="&lt;step XPos='0' YPos='93.30999755859375' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="SmartCreditCCtoQ" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_ClassifyKBAorNonKBA" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="PSWL_BLANK" propertiesXML="&lt;step XPos='273' YPos='223' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="INV_WORKFLOWTYPE" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_ClassifyKBAorNonKBA" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="INV_WORKFLOWTYPE" propertiesXML="&lt;step XPos='113' YPos='220.99996948242187' /&gt;">
<DecisionFlowStepTransitions/>
</DecisionFlowStep>
</DecisionFlowSteps>
</DecisionFlow>
<DecisionFlow Description="Decision flow for calculating Business Credit Class" Name="df_BCC" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DecisionFlowEffectiveDate/>
<DecisionFlowSteps>
<DecisionFlowStep ImplementationName="dms_InitBusinessCC" ImplementationType="Data Method Sequence" IsFirstStep="true" Name="Initialize_Business_CreditClass" propertiesXML="&lt;step XPos='63' YPos='99' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="SetGamingOutputs" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_setBusinessCC" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="Set_Business_CC" propertiesXML="&lt;step XPos='633' YPos='104.99' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="ECOA" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="rs_BusinessFraud" ImplementationType="Ruleset" IsFirstStep="false" Name="FraudStrategies" propertiesXML="&lt;step XPos='1256.33' YPos='99.97' /&gt;">
<DecisionFlowStepTransitions/>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_AssignECOAReasonCodesBCC" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="ECOA" propertiesXML="&lt;step XPos='832.9599609375' YPos='102.97000122070312' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="FraudAlerts" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_BusinessFraudAlerts" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="FraudAlerts" propertiesXML="&lt;step XPos='1045.659912109375' YPos='101.98995971679687' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="FraudStrategies" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_InitializeGaming" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="SetGamingOutputs" propertiesXML="&lt;step XPos='179' YPos='29' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="Set_Business_CC" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
</DecisionFlowSteps>
</DecisionFlow>
<DecisionFlow Description="Call Business Verification Service" Name="df_BusinessVerificationService" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DecisionFlowEffectiveDate/>
<DecisionFlowSteps>
<DecisionFlowStep ImplementationName="dms_InitBVS" ImplementationType="Data Method Sequence" IsFirstStep="true" Name="Initialize" propertiesXML="&lt;step XPos='67' YPos='77' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="AutoVerify" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_set_CreditClass_S" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="AssignReviewCreditClass" propertiesXML="&lt;step XPos='595' YPos='91' /&gt;">
<DecisionFlowStepTransitions/>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_BusAppAutoVerify" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="AutoVerify" propertiesXML="&lt;step XPos='216.19998168945312' YPos='21.199981689453125' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="AssignReviewCreditClass" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
</DecisionFlowSteps>
</DecisionFlow>
<DecisionFlow Description="Updated PCR6 calculation and CC assignment" Name="df_PCR6_CreditClass_Alerts" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DecisionFlowEffectiveDate/>
<DecisionFlowSteps>
<DecisionFlowStep ImplementationName="dms_CCC_Calculate_Flags" ImplementationType="Data Method Sequence" IsFirstStep="true" Name="dms_InitPCRAlertFlow" propertiesXML="&lt;step XPos='12.87' YPos='99.77' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="SetGamingOutputs" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_CalculatePCR6Score" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="dms_CalculatePCR6Score" propertiesXML="&lt;step XPos='184.57000732421875' YPos='101.10000610351562' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="AssignInProcessNegFile" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_AssignInProcessNegFileDetails" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="AssignInProcessNegFile" propertiesXML="&lt;step XPos='1125.5400390625' YPos='86.75' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="AssignNegType" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dm_AssignInProcessNegFileDetailsComplete" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="AssignInProcessNegFileComplete" propertiesXML="&lt;step XPos='1480.0899658203125' YPos='240.17999267578125' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="CheckUnEvaluatedNegFileDetails" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="rs_CheckUnEvaluatedNegFileDetails" ImplementationType="Ruleset" IsFirstStep="false" Name="CheckUnEvaluatedNegFileDetails" propertiesXML="&lt;step XPos='1124.4700927734375' YPos='249.44000244140625' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="AssignInProcessNegFile" ResultValue="YES"/>
<DecisionFlowStepTransition NextStepName="SetIsDecisionNegFile" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_SetIsDecisionNegFile" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="SetIsDecisionNegFile" propertiesXML="&lt;step XPos='1322.760009765625' YPos='390.58001708984375' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="SetPIDCodeLogic" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_PIDCodeLogic" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="SetPIDCodeLogic" propertiesXML="&lt;step XPos='934.34' YPos='393.42' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="ECOA" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_EfficiencyOfNeustar" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="EfficiencyOfNeustar" propertiesXML="&lt;step XPos='220.05' YPos='506.44' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="ClassifyKBAorNonKBA" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="rs_FraudHotNameSSNOFAC" ImplementationType="Ruleset" IsFirstStep="false" Name="HotNameSSNOFAC" propertiesXML="&lt;step XPos='209.08' YPos='387.62' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="ECOA_HotNameOFAC" ResultValue="Refer"/>
<DecisionFlowStepTransition NextStepName="EfficiencyOfNeustar" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_ClassifyKBAorNonKBA" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="ClassifyKBAorNonKBA" propertiesXML="&lt;step XPos='441.00994873046875' YPos='657.5199584960937' /&gt;">
<DecisionFlowStepTransitions/>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_FinalCCCStep" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="ECOA" propertiesXML="&lt;step XPos='494.3499755859375' YPos='388.2599792480469' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="HotNameSSNOFAC" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_SetECOAReasonHotNameOFACC" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="ECOA_HotNameOFAC" propertiesXML="&lt;step XPos='32.3' YPos='386.52' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="EfficiencyOfNeustar" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_InitializeGaming" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="SetGamingOutputs" propertiesXML="&lt;step XPos='105' YPos='191' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="dms_CalculatePCR6Score" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_SetNegType" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="AssignNegType" propertiesXML="&lt;step XPos='1311.199951171875' YPos='81.25' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="AssignInProcessNegFileComplete" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
</DecisionFlowSteps>
</DecisionFlow>
<DecisionFlow Description="Decision flow to determine PG CC" Name="df_PGCreditClass" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DecisionFlowEffectiveDate/>
<DecisionFlowSteps>
<DecisionFlowStep ImplementationName="dms_InitializePGCCIntermediateFactTypes" ImplementationType="Data Method Sequence" IsFirstStep="true" Name="dms_InitializePGCCIntermediateFactTypes" propertiesXML="&lt;step XPos='207' YPos='70' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="dms_setPGCC" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_setPGCreditClass" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="dms_setPGCC" propertiesXML="&lt;step XPos='626' YPos='185' /&gt;">
<DecisionFlowStepTransitions/>
</DecisionFlowStep>
</DecisionFlowSteps>
</DecisionFlow>
<DecisionFlow Description="Decision flow for credit class upgrade" Name="df_CCUpgradeNeustar" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<DecisionFlowEffectiveDate/>
<DecisionFlowSteps>
<DecisionFlowStep ImplementationName="dms_InitCreditClassUpgrade" ImplementationType="Data Method Sequence" IsFirstStep="true" Name="Initialize_CC_Upgrade" propertiesXML="&lt;step XPos='126' YPos='62.670013427734375' /&gt;">
<DecisionFlowStepTransitions>
<DecisionFlowStepTransition NextStepName="Set_UDConsumerCC" ResultValue="Otherwise"/>
</DecisionFlowStepTransitions>
</DecisionFlowStep>
<DecisionFlowStep ImplementationName="dms_setUDConsumerCC" ImplementationType="Data Method Sequence" IsFirstStep="false" Name="Set_UDConsumerCC" propertiesXML="&lt;step XPos='633' YPos='72.66000366210937' /&gt;">
<DecisionFlowStepTransitions/>
</DecisionFlowStep>
</DecisionFlowSteps>
</DecisionFlow>
</DecisionFlows>
<DecisionTables>
<DecisionTable Description="PID Score Map Fraud Strategy" Name="dt_FraudStrategy_ScoreMap_PID1" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="CHANNEL_ID" MappingName="CHANNEL_ID">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="220"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="240"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="510"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="520"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="NA"/>
</ColumnCell>
</ColumnCellGroup>
<ColumnCellGroup CellGroupName="PID_SCORE_VALUE" MappingName="PID_SCORE_VALUE">
<ColumnCell Index="0">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="700"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="700"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="700"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="700"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="600"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups/>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="S"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="integer" Description="PID Score" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.PID.PID_SCORE" InputOrOutput="Input" Name="PID_SCORE_VALUE" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.PID"/>
<Mapping DataType="string" Description="Channel ID" FieldOrDataMethodName="Application.CreditApplication.T_CHANNEL_CODE" InputOrOutput="Input" Name="CHANNEL_ID" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.REVIEW_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="PID Score Map Fraud Strategy" Name="dt_FraudStrategy_ScoreMap_PID7" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="CHANNEL_ID" MappingName="CHANNEL_ID">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="220"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="240"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="510"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="520"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="eqs" Value="120"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="eqs" Value="410"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="NA"/>
</ColumnCell>
</ColumnCellGroup>
<ColumnCellGroup CellGroupName="PID_SCORE_VALUE" MappingName="PID_SCORE_VALUE">
<ColumnCell Index="0">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="290"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="290"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="290"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="290"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="270"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="270"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="270"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups/>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="S"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="integer" Description="PID Score" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.PID.PID_SCORE" InputOrOutput="Input" Name="PID_SCORE_VALUE" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.PID"/>
<Mapping DataType="string" Description="Channel ID" FieldOrDataMethodName="Application.CreditApplication.T_CHANNEL_CODE" InputOrOutput="Input" Name="CHANNEL_ID" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.REVIEW_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="PID Score Map Fraud Strategy" Name="dt_FraudStrategy_ScoreMap_PID2" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="CHANNEL_ID" MappingName="CHANNEL_ID">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="220"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="240"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="510"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="520"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="NA"/>
</ColumnCell>
</ColumnCellGroup>
<ColumnCellGroup CellGroupName="PID_SCORE_VALUE" MappingName="PID_SCORE_VALUE">
<ColumnCell Index="0">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="700"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="700"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="700"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="700"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="500"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups/>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="S"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="integer" Description="PID Score" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.PID.PID_SCORE" InputOrOutput="Input" Name="PID_SCORE_VALUE" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.PID"/>
<Mapping DataType="string" Description="Channel ID" FieldOrDataMethodName="Application.CreditApplication.T_CHANNEL_CODE" InputOrOutput="Input" Name="CHANNEL_ID" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.REVIEW_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="NEG downgrade BAL - Retail 410, TPR 120, Walmart 212, Telesales 220, Web 240, Webbank 213 and others " Name="dt_NEG_Downgrade_BAL" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="CreditClass" MappingName="CreditClass">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="A"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="B"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="C"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="L"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="eqs" Value="D"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="eqs" Value="H"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="eqs" Value="I"/>
</ColumnCell>
<ColumnCell Index="7">
<ColumnCellCondition Operator="eqs" Value="Y"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups>
<RowCellGroup CellGroupName="Channel" MappingName="Channel">
<RowCell Index="0">
<RowCellCondition Operator="eqs" Value="410"/>
</RowCell>
<RowCell Index="1">
<RowCellCondition Operator="eqs" Value="120"/>
</RowCell>
<RowCell Index="2">
<RowCellCondition Operator="eqs" Value="212"/>
</RowCell>
<RowCell Index="3">
<RowCellCondition Operator="eqs" Value="220"/>
</RowCell>
<RowCell Index="4">
<RowCellCondition Operator="eqs" Value="240"/>
</RowCell>
<RowCell Index="5">
<RowCellCondition Operator="eqs" Value="213"/>
</RowCell>
<RowCell Index="6">
<RowCellCondition Operator="NA"/>
</RowCell>
</RowCellGroup>
</RowCellGroups>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="1" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="2" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="3" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="4" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="5" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="6" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="1" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="2" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="3" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="4" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="5" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="6" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="C"/>
<TableCell ColumnIndex="1" RowIndex="2" Value="C"/>
<TableCell ColumnIndex="2" RowIndex="2" Value="C"/>
<TableCell ColumnIndex="3" RowIndex="2" Value="C"/>
<TableCell ColumnIndex="4" RowIndex="2" Value="C"/>
<TableCell ColumnIndex="5" RowIndex="2" Value="C"/>
<TableCell ColumnIndex="6" RowIndex="2" Value="C"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="L"/>
<TableCell ColumnIndex="1" RowIndex="3" Value="L"/>
<TableCell ColumnIndex="2" RowIndex="3" Value="L"/>
<TableCell ColumnIndex="3" RowIndex="3" Value="L"/>
<TableCell ColumnIndex="4" RowIndex="3" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="3" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="3" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="7" Value="Y"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="string" Description="" FieldOrDataMethodName="Application.CreditApplication.T_CHANNEL_CODE" InputOrOutput="Input" Name="Channel" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
<Mapping DataType="string" Description="" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Input" Name="CreditClass" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.NegFileDetails.RESULTING_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.NegFileDetails"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="Neustar credit class upgrade champion" Name="dt_NeustarCCUpgradeChampion" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="OrgCreditClass" MappingName="OrgCreditClass">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="A"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="B"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="C"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="L"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="eqs" Value="D"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="eqs" Value="H"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="eqs" Value="I"/>
</ColumnCell>
<ColumnCell Index="7">
<ColumnCellCondition Operator="eqs" Value="Y"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups/>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="C"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="C"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="D"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="I"/>
<TableCell ColumnIndex="0" RowIndex="7" Value="Y"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="string" Description="" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Input" Name="OrgCreditClass" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.NEUSTAR_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="Assigns Credit Class from PCR6 and Channel" Name="dt_AssignCreditClassScorablePCR6" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="PCR6Score" MappingName="PCR6Score">
<ColumnCell Index="0">
<ColumnCellCondition Operator="ge" Value="942"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="le" Value="933"/>
<ColumnCellCondition Operator="le" Value="941"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="le" Value="930"/>
<ColumnCellCondition Operator="le" Value="932"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="le" Value="924"/>
<ColumnCellCondition Operator="le" Value="929"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="le" Value="921"/>
<ColumnCellCondition Operator="le" Value="923"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="le" Value="915"/>
<ColumnCellCondition Operator="le" Value="920"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="eqs" Value="914"/>
</ColumnCell>
<ColumnCell Index="7">
<ColumnCellCondition Operator="eqs" Value="913"/>
</ColumnCell>
<ColumnCell Index="8">
<ColumnCellCondition Operator="le" Value="910"/>
<ColumnCellCondition Operator="le" Value="912"/>
</ColumnCell>
<ColumnCell Index="9">
<ColumnCellCondition Operator="le" Value="905"/>
<ColumnCellCondition Operator="le" Value="909"/>
</ColumnCell>
<ColumnCell Index="10">
<ColumnCellCondition Operator="le" Value="901"/>
<ColumnCellCondition Operator="le" Value="904"/>
</ColumnCell>
<ColumnCell Index="11">
<ColumnCellCondition Operator="le" Value="899"/>
<ColumnCellCondition Operator="le" Value="900"/>
</ColumnCell>
<ColumnCell Index="12">
<ColumnCellCondition Operator="le" Value="895"/>
<ColumnCellCondition Operator="le" Value="898"/>
</ColumnCell>
<ColumnCell Index="13">
<ColumnCellCondition Operator="le" Value="887"/>
<ColumnCellCondition Operator="le" Value="894"/>
</ColumnCell>
<ColumnCell Index="14">
<ColumnCellCondition Operator="le" Value="882"/>
<ColumnCellCondition Operator="le" Value="886"/>
</ColumnCell>
<ColumnCell Index="15">
<ColumnCellCondition Operator="le" Value="876"/>
<ColumnCellCondition Operator="le" Value="881"/>
</ColumnCell>
<ColumnCell Index="16">
<ColumnCellCondition Operator="le" Value="872"/>
<ColumnCellCondition Operator="le" Value="875"/>
</ColumnCell>
<ColumnCell Index="17">
<ColumnCellCondition Operator="le" Value="818"/>
<ColumnCellCondition Operator="le" Value="871"/>
</ColumnCell>
<ColumnCell Index="18">
<ColumnCellCondition Operator="le" Value="814"/>
<ColumnCellCondition Operator="le" Value="817"/>
</ColumnCell>
<ColumnCell Index="19">
<ColumnCellCondition Operator="le" Value="791"/>
<ColumnCellCondition Operator="le" Value="813"/>
</ColumnCell>
<ColumnCell Index="20">
<ColumnCellCondition Operator="le" Value="770"/>
<ColumnCellCondition Operator="le" Value="790"/>
</ColumnCell>
<ColumnCell Index="21">
<ColumnCellCondition Operator="le" Value="760"/>
<ColumnCellCondition Operator="le" Value="769"/>
</ColumnCell>
<ColumnCell Index="22">
<ColumnCellCondition Operator="le" Value="750"/>
<ColumnCellCondition Operator="le" Value="759"/>
</ColumnCell>
<ColumnCell Index="23">
<ColumnCellCondition Operator="le" Value="700"/>
<ColumnCellCondition Operator="le" Value="749"/>
</ColumnCell>
<ColumnCell Index="24">
<ColumnCellCondition Operator="le" Value="660"/>
<ColumnCellCondition Operator="le" Value="699"/>
</ColumnCell>
<ColumnCell Index="25">
<ColumnCellCondition Operator="le" Value="658"/>
<ColumnCellCondition Operator="le" Value="659"/>
</ColumnCell>
<ColumnCell Index="26">
<ColumnCellCondition Operator="le" Value="650"/>
<ColumnCellCondition Operator="le" Value="657"/>
</ColumnCell>
<ColumnCell Index="27">
<ColumnCellCondition Operator="le" Value="645"/>
<ColumnCellCondition Operator="le" Value="649"/>
</ColumnCell>
<ColumnCell Index="28">
<ColumnCellCondition Operator="eqs" Value="644"/>
</ColumnCell>
<ColumnCell Index="29">
<ColumnCellCondition Operator="le" Value="624"/>
<ColumnCellCondition Operator="le" Value="643"/>
</ColumnCell>
<ColumnCell Index="30">
<ColumnCellCondition Operator="le" Value="613"/>
<ColumnCellCondition Operator="le" Value="623"/>
</ColumnCell>
<ColumnCell Index="31">
<ColumnCellCondition Operator="le" Value="559"/>
<ColumnCellCondition Operator="le" Value="612"/>
</ColumnCell>
<ColumnCell Index="32">
<ColumnCellCondition Operator="le" Value="527"/>
<ColumnCellCondition Operator="le" Value="558"/>
</ColumnCell>
<ColumnCell Index="33">
<ColumnCellCondition Operator="le" Value="500"/>
<ColumnCellCondition Operator="le" Value="526"/>
</ColumnCell>
<ColumnCell Index="34">
<ColumnCellCondition Operator="le" Value="459"/>
<ColumnCellCondition Operator="le" Value="499"/>
</ColumnCell>
<ColumnCell Index="35">
<ColumnCellCondition Operator="le" Value="438"/>
<ColumnCellCondition Operator="le" Value="458"/>
</ColumnCell>
<ColumnCell Index="36">
<ColumnCellCondition Operator="le" Value="409"/>
<ColumnCellCondition Operator="le" Value="437"/>
</ColumnCell>
<ColumnCell Index="37">
<ColumnCellCondition Operator="le" Value="343"/>
<ColumnCellCondition Operator="le" Value="408"/>
</ColumnCell>
<ColumnCell Index="38">
<ColumnCellCondition Operator="le" Value="286"/>
<ColumnCellCondition Operator="le" Value="342"/>
</ColumnCell>
<ColumnCell Index="39">
<ColumnCellCondition Operator="le" Value="268"/>
<ColumnCellCondition Operator="le" Value="285"/>
</ColumnCell>
<ColumnCell Index="40">
<ColumnCellCondition Operator="le" Value="146"/>
<ColumnCellCondition Operator="le" Value="267"/>
</ColumnCell>
<ColumnCell Index="41">
<ColumnCellCondition Operator="le" Value="132"/>
<ColumnCellCondition Operator="le" Value="145"/>
</ColumnCell>
<ColumnCell Index="42">
<ColumnCellCondition Operator="le" Value="121"/>
<ColumnCellCondition Operator="le" Value="131"/>
</ColumnCell>
<ColumnCell Index="43">
<ColumnCellCondition Operator="le" Value="100"/>
<ColumnCellCondition Operator="le" Value="120"/>
</ColumnCell>
<ColumnCell Index="44">
<ColumnCellCondition Operator="le" Value="77"/>
<ColumnCellCondition Operator="le" Value="99"/>
</ColumnCell>
<ColumnCell Index="45">
<ColumnCellCondition Operator="lt" Value="77"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups>
<RowCellGroup CellGroupName="Channel" MappingName="Channel">
<RowCell Index="0">
<RowCellCondition Operator="eqs" Value="410"/>
</RowCell>
<RowCell Index="1">
<RowCellCondition Operator="eqs" Value="120"/>
</RowCell>
<RowCell Index="2">
<RowCellCondition Operator="eqs" Value="220"/>
</RowCell>
<RowCell Index="3">
<RowCellCondition Operator="eqs" Value="240"/>
</RowCell>
<RowCell Index="4">
<RowCellCondition Operator="eqs" Value="510"/>
</RowCell>
<RowCell Index="5">
<RowCellCondition Operator="eqs" Value="520"/>
</RowCell>
<RowCell Index="6">
<RowCellCondition Operator="eqs" Value="110"/>
</RowCell>
<RowCell Index="7">
<RowCellCondition Operator="eqs" Value="230"/>
</RowCell>
<RowCell Index="8">
<RowCellCondition Operator="eqs" Value="213"/>
</RowCell>
<RowCell Index="9">
<RowCellCondition Operator="eqs" Value="212"/>
</RowCell>
<RowCell Index="10">
<RowCellCondition Operator="eqs" Value="210"/>
</RowCell>
<RowCell Index="11">
<RowCellCondition Operator="eqs" Value="215"/>
</RowCell>
<RowCell Index="12">
<RowCellCondition Operator="NA"/>
</RowCell>
</RowCellGroup>
</RowCellGroups>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="1" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="2" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="3" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="4" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="5" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="6" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="7" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="8" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="9" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="10" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="11" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="12" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="A"/>
<TableCell ColumnIndex="1" RowIndex="1" Value="A"/>
<TableCell ColumnIndex="2" RowIndex="1" Value="A"/>
<TableCell ColumnIndex="3" RowIndex="1" Value="A"/>
<TableCell ColumnIndex="4" RowIndex="1" Value="A"/>
<TableCell ColumnIndex="5" RowIndex="1" Value="A"/>
<TableCell ColumnIndex="6" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="7" RowIndex="1" Value="A"/>
<TableCell ColumnIndex="8" RowIndex="1" Value="A"/>
<TableCell ColumnIndex="9" RowIndex="1" Value="A"/>
<TableCell ColumnIndex="10" RowIndex="1" Value="A"/>
<TableCell ColumnIndex="11" RowIndex="1" Value="A"/>
<TableCell ColumnIndex="12" RowIndex="1" Value="A"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="A"/>
<TableCell ColumnIndex="1" RowIndex="2" Value="A"/>
<TableCell ColumnIndex="2" RowIndex="2" Value="A"/>
<TableCell ColumnIndex="3" RowIndex="2" Value="A"/>
<TableCell ColumnIndex="4" RowIndex="2" Value="A"/>
<TableCell ColumnIndex="5" RowIndex="2" Value="A"/>
<TableCell ColumnIndex="6" RowIndex="2" Value="B"/>
<TableCell ColumnIndex="7" RowIndex="2" Value="B"/>
<TableCell ColumnIndex="8" RowIndex="2" Value="A"/>
<TableCell ColumnIndex="9" RowIndex="2" Value="A"/>
<TableCell ColumnIndex="10" RowIndex="2" Value="A"/>
<TableCell ColumnIndex="11" RowIndex="2" Value="A"/>
<TableCell ColumnIndex="12" RowIndex="2" Value="A"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="A"/>
<TableCell ColumnIndex="1" RowIndex="3" Value="B"/>
<TableCell ColumnIndex="2" RowIndex="3" Value="A"/>
<TableCell ColumnIndex="3" RowIndex="3" Value="A"/>
<TableCell ColumnIndex="4" RowIndex="3" Value="A"/>
<TableCell ColumnIndex="5" RowIndex="3" Value="A"/>
<TableCell ColumnIndex="6" RowIndex="3" Value="B"/>
<TableCell ColumnIndex="7" RowIndex="3" Value="B"/>
<TableCell ColumnIndex="8" RowIndex="3" Value="B"/>
<TableCell ColumnIndex="9" RowIndex="3" Value="B"/>
<TableCell ColumnIndex="10" RowIndex="3" Value="B"/>
<TableCell ColumnIndex="11" RowIndex="3" Value="A"/>
<TableCell ColumnIndex="12" RowIndex="3" Value="B"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="A"/>
<TableCell ColumnIndex="1" RowIndex="4" Value="B"/>
<TableCell ColumnIndex="2" RowIndex="4" Value="A"/>
<TableCell ColumnIndex="3" RowIndex="4" Value="A"/>
<TableCell ColumnIndex="4" RowIndex="4" Value="B"/>
<TableCell ColumnIndex="5" RowIndex="4" Value="B"/>
<TableCell ColumnIndex="6" RowIndex="4" Value="B"/>
<TableCell ColumnIndex="7" RowIndex="4" Value="B"/>
<TableCell ColumnIndex="8" RowIndex="4" Value="B"/>
<TableCell ColumnIndex="9" RowIndex="4" Value="B"/>
<TableCell ColumnIndex="10" RowIndex="4" Value="B"/>
<TableCell ColumnIndex="11" RowIndex="4" Value="A"/>
<TableCell ColumnIndex="12" RowIndex="4" Value="B"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="B"/>
<TableCell ColumnIndex="1" RowIndex="5" Value="B"/>
<TableCell ColumnIndex="2" RowIndex="5" Value="A"/>
<TableCell ColumnIndex="3" RowIndex="5" Value="A"/>
<TableCell ColumnIndex="4" RowIndex="5" Value="B"/>
<TableCell ColumnIndex="5" RowIndex="5" Value="B"/>
<TableCell ColumnIndex="6" RowIndex="5" Value="B"/>
<TableCell ColumnIndex="7" RowIndex="5" Value="B"/>
<TableCell ColumnIndex="8" RowIndex="5" Value="B"/>
<TableCell ColumnIndex="9" RowIndex="5" Value="B"/>
<TableCell ColumnIndex="10" RowIndex="5" Value="B"/>
<TableCell ColumnIndex="11" RowIndex="5" Value="A"/>
<TableCell ColumnIndex="12" RowIndex="5" Value="B"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="B"/>
<TableCell ColumnIndex="1" RowIndex="6" Value="B"/>
<TableCell ColumnIndex="2" RowIndex="6" Value="A"/>
<TableCell ColumnIndex="3" RowIndex="6" Value="A"/>
<TableCell ColumnIndex="4" RowIndex="6" Value="B"/>
<TableCell ColumnIndex="5" RowIndex="6" Value="B"/>
<TableCell ColumnIndex="6" RowIndex="6" Value="B"/>
<TableCell ColumnIndex="7" RowIndex="6" Value="B"/>
<TableCell ColumnIndex="8" RowIndex="6" Value="B"/>
<TableCell ColumnIndex="9" RowIndex="6" Value="B"/>
<TableCell ColumnIndex="10" RowIndex="6" Value="B"/>
<TableCell ColumnIndex="11" RowIndex="6" Value="B"/>
<TableCell ColumnIndex="12" RowIndex="6" Value="B"/>
<TableCell ColumnIndex="0" RowIndex="7" Value="B"/>
<TableCell ColumnIndex="1" RowIndex="7" Value="B"/>
<TableCell ColumnIndex="2" RowIndex="7" Value="B"/>
<TableCell ColumnIndex="3" RowIndex="7" Value="B"/>
<TableCell ColumnIndex="4" RowIndex="7" Value="B"/>
<TableCell ColumnIndex="5" RowIndex="7" Value="B"/>
<TableCell ColumnIndex="6" RowIndex="7" Value="C"/>
<TableCell ColumnIndex="7" RowIndex="7" Value="B"/>
<TableCell ColumnIndex="8" RowIndex="7" Value="B"/>
<TableCell ColumnIndex="9" RowIndex="7" Value="B"/>
<TableCell ColumnIndex="10" RowIndex="7" Value="B"/>
<TableCell ColumnIndex="11" RowIndex="7" Value="B"/>
<TableCell ColumnIndex="12" RowIndex="7" Value="B"/>
<TableCell ColumnIndex="0" RowIndex="8" Value="B"/>
<TableCell ColumnIndex="1" RowIndex="8" Value="B"/>
<TableCell ColumnIndex="2" RowIndex="8" Value="B"/>
<TableCell ColumnIndex="3" RowIndex="8" Value="B"/>
<TableCell ColumnIndex="4" RowIndex="8" Value="B"/>
<TableCell ColumnIndex="5" RowIndex="8" Value="B"/>
<TableCell ColumnIndex="6" RowIndex="8" Value="C"/>
<TableCell ColumnIndex="7" RowIndex="8" Value="C"/>
<TableCell ColumnIndex="8" RowIndex="8" Value="B"/>
<TableCell ColumnIndex="9" RowIndex="8" Value="B"/>
<TableCell ColumnIndex="10" RowIndex="8" Value="B"/>
<TableCell ColumnIndex="11" RowIndex="8" Value="B"/>
<TableCell ColumnIndex="12" RowIndex="8" Value="B"/>
<TableCell ColumnIndex="0" RowIndex="9" Value="B"/>
<TableCell ColumnIndex="1" RowIndex="9" Value="B"/>
<TableCell ColumnIndex="2" RowIndex="9" Value="B"/>
<TableCell ColumnIndex="3" RowIndex="9" Value="B"/>
<TableCell ColumnIndex="4" RowIndex="9" Value="B"/>
<TableCell ColumnIndex="5" RowIndex="9" Value="B"/>
<TableCell ColumnIndex="6" RowIndex="9" Value="C"/>
<TableCell ColumnIndex="7" RowIndex="9" Value="C"/>
<TableCell ColumnIndex="8" RowIndex="9" Value="B"/>
<TableCell ColumnIndex="9" RowIndex="9" Value="B"/>
<TableCell ColumnIndex="10" RowIndex="9" Value="C"/>
<TableCell ColumnIndex="11" RowIndex="9" Value="B"/>
<TableCell ColumnIndex="12" RowIndex="9" Value="C"/>
<TableCell ColumnIndex="0" RowIndex="10" Value="B"/>
<TableCell ColumnIndex="1" RowIndex="10" Value="C"/>
<TableCell ColumnIndex="2" RowIndex="10" Value="B"/>
<TableCell ColumnIndex="3" RowIndex="10" Value="B"/>
<TableCell ColumnIndex="4" RowIndex="10" Value="B"/>
<TableCell ColumnIndex="5" RowIndex="10" Value="B"/>
<TableCell ColumnIndex="6" RowIndex="10" Value="C"/>
<TableCell ColumnIndex="7" RowIndex="10" Value="C"/>
<TableCell ColumnIndex="8" RowIndex="10" Value="C"/>
<TableCell ColumnIndex="9" RowIndex="10" Value="C"/>
<TableCell ColumnIndex="10" RowIndex="10" Value="C"/>
<TableCell ColumnIndex="11" RowIndex="10" Value="B"/>
<TableCell ColumnIndex="12" RowIndex="10" Value="C"/>
<TableCell ColumnIndex="0" RowIndex="11" Value="B"/>
<TableCell ColumnIndex="1" RowIndex="11" Value="C"/>
<TableCell ColumnIndex="2" RowIndex="11" Value="B"/>
<TableCell ColumnIndex="3" RowIndex="11" Value="B"/>
<TableCell ColumnIndex="4" RowIndex="11" Value="C"/>
<TableCell ColumnIndex="5" RowIndex="11" Value="C"/>
<TableCell ColumnIndex="6" RowIndex="11" Value="C"/>
<TableCell ColumnIndex="7" RowIndex="11" Value="C"/>
<TableCell ColumnIndex="8" RowIndex="11" Value="C"/>
<TableCell ColumnIndex="9" RowIndex="11" Value="C"/>
<TableCell ColumnIndex="10" RowIndex="11" Value="C"/>
<TableCell ColumnIndex="11" RowIndex="11" Value="B"/>
<TableCell ColumnIndex="12" RowIndex="11" Value="C"/>
<TableCell ColumnIndex="0" RowIndex="12" Value="C"/>
<TableCell ColumnIndex="1" RowIndex="12" Value="C"/>
<TableCell ColumnIndex="2" RowIndex="12" Value="B"/>
<TableCell ColumnIndex="3" RowIndex="12" Value="B"/>
<TableCell ColumnIndex="4" RowIndex="12" Value="C"/>
<TableCell ColumnIndex="5" RowIndex="12" Value="C"/>
<TableCell ColumnIndex="6" RowIndex="12" Value="C"/>
<TableCell ColumnIndex="7" RowIndex="12" Value="C"/>
<TableCell ColumnIndex="8" RowIndex="12" Value="C"/>
<TableCell ColumnIndex="9" RowIndex="12" Value="C"/>
<TableCell ColumnIndex="10" RowIndex="12" Value="C"/>
<TableCell ColumnIndex="11" RowIndex="12" Value="B"/>
<TableCell ColumnIndex="12" RowIndex="12" Value="C"/>
<TableCell ColumnIndex="0" RowIndex="13" Value="C"/>
<TableCell ColumnIndex="1" RowIndex="13" Value="C"/>
<TableCell ColumnIndex="2" RowIndex="13" Value="B"/>
<TableCell ColumnIndex="3" RowIndex="13" Value="B"/>
<TableCell ColumnIndex="4" RowIndex="13" Value="C"/>
<TableCell ColumnIndex="5" RowIndex="13" Value="C"/>
<TableCell ColumnIndex="6" RowIndex="13" Value="C"/>
<TableCell ColumnIndex="7" RowIndex="13" Value="C"/>
<TableCell ColumnIndex="8" RowIndex="13" Value="C"/>
<TableCell ColumnIndex="9" RowIndex="13" Value="C"/>
<TableCell ColumnIndex="10" RowIndex="13" Value="L"/>
<TableCell ColumnIndex="11" RowIndex="13" Value="B"/>
<TableCell ColumnIndex="12" RowIndex="13" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="14" Value="C"/>
<TableCell ColumnIndex="1" RowIndex="14" Value="C"/>
<TableCell ColumnIndex="2" RowIndex="14" Value="C"/>
<TableCell ColumnIndex="3" RowIndex="14" Value="C"/>
<TableCell ColumnIndex="4" RowIndex="14" Value="C"/>
<TableCell ColumnIndex="5" RowIndex="14" Value="C"/>
<TableCell ColumnIndex="6" RowIndex="14" Value="C"/>
<TableCell ColumnIndex="7" RowIndex="14" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="14" Value="C"/>
<TableCell ColumnIndex="9" RowIndex="14" Value="C"/>
<TableCell ColumnIndex="10" RowIndex="14" Value="L"/>
<TableCell ColumnIndex="11" RowIndex="14" Value="B"/>
<TableCell ColumnIndex="12" RowIndex="14" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="15" Value="C"/>
<TableCell ColumnIndex="1" RowIndex="15" Value="C"/>
<TableCell ColumnIndex="2" RowIndex="15" Value="C"/>
<TableCell ColumnIndex="3" RowIndex="15" Value="C"/>
<TableCell ColumnIndex="4" RowIndex="15" Value="C"/>
<TableCell ColumnIndex="5" RowIndex="15" Value="C"/>
<TableCell ColumnIndex="6" RowIndex="15" Value="C"/>
<TableCell ColumnIndex="7" RowIndex="15" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="15" Value="C"/>
<TableCell ColumnIndex="9" RowIndex="15" Value="C"/>
<TableCell ColumnIndex="10" RowIndex="15" Value="L"/>
<TableCell ColumnIndex="11" RowIndex="15" Value="C"/>
<TableCell ColumnIndex="12" RowIndex="15" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="16" Value="C"/>
<TableCell ColumnIndex="1" RowIndex="16" Value="L"/>
<TableCell ColumnIndex="2" RowIndex="16" Value="C"/>
<TableCell ColumnIndex="3" RowIndex="16" Value="C"/>
<TableCell ColumnIndex="4" RowIndex="16" Value="C"/>
<TableCell ColumnIndex="5" RowIndex="16" Value="C"/>
<TableCell ColumnIndex="6" RowIndex="16" Value="C"/>
<TableCell ColumnIndex="7" RowIndex="16" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="16" Value="L"/>
<TableCell ColumnIndex="9" RowIndex="16" Value="L"/>
<TableCell ColumnIndex="10" RowIndex="16" Value="L"/>
<TableCell ColumnIndex="11" RowIndex="16" Value="C"/>
<TableCell ColumnIndex="12" RowIndex="16" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="17" Value="C"/>
<TableCell ColumnIndex="1" RowIndex="17" Value="L"/>
<TableCell ColumnIndex="2" RowIndex="17" Value="C"/>
<TableCell ColumnIndex="3" RowIndex="17" Value="C"/>
<TableCell ColumnIndex="4" RowIndex="17" Value="C"/>
<TableCell ColumnIndex="5" RowIndex="17" Value="C"/>
<TableCell ColumnIndex="6" RowIndex="17" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="17" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="17" Value="L"/>
<TableCell ColumnIndex="9" RowIndex="17" Value="L"/>
<TableCell ColumnIndex="10" RowIndex="17" Value="L"/>
<TableCell ColumnIndex="11" RowIndex="17" Value="C"/>
<TableCell ColumnIndex="12" RowIndex="17" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="18" Value="C"/>
<TableCell ColumnIndex="1" RowIndex="18" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="18" Value="C"/>
<TableCell ColumnIndex="3" RowIndex="18" Value="C"/>
<TableCell ColumnIndex="4" RowIndex="18" Value="C"/>
<TableCell ColumnIndex="5" RowIndex="18" Value="C"/>
<TableCell ColumnIndex="6" RowIndex="18" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="18" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="18" Value="D"/>
<TableCell ColumnIndex="9" RowIndex="18" Value="D"/>
<TableCell ColumnIndex="10" RowIndex="18" Value="L"/>
<TableCell ColumnIndex="11" RowIndex="18" Value="C"/>
<TableCell ColumnIndex="12" RowIndex="18" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="19" Value="L"/>
<TableCell ColumnIndex="1" RowIndex="19" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="19" Value="C"/>
<TableCell ColumnIndex="3" RowIndex="19" Value="C"/>
<TableCell ColumnIndex="4" RowIndex="19" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="19" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="19" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="19" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="19" Value="D"/>
<TableCell ColumnIndex="9" RowIndex="19" Value="D"/>
<TableCell ColumnIndex="10" RowIndex="19" Value="L"/>
<TableCell ColumnIndex="11" RowIndex="19" Value="C"/>
<TableCell ColumnIndex="12" RowIndex="19" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="20" Value="L"/>
<TableCell ColumnIndex="1" RowIndex="20" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="20" Value="C"/>
<TableCell ColumnIndex="3" RowIndex="20" Value="C"/>
<TableCell ColumnIndex="4" RowIndex="20" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="20" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="20" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="20" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="20" Value="D"/>
<TableCell ColumnIndex="9" RowIndex="20" Value="D"/>
<TableCell ColumnIndex="10" RowIndex="20" Value="L"/>
<TableCell ColumnIndex="11" RowIndex="20" Value="D"/>
<TableCell ColumnIndex="12" RowIndex="20" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="21" Value="L"/>
<TableCell ColumnIndex="1" RowIndex="21" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="21" Value="L"/>
<TableCell ColumnIndex="3" RowIndex="21" Value="L"/>
<TableCell ColumnIndex="4" RowIndex="21" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="21" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="21" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="21" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="21" Value="D"/>
<TableCell ColumnIndex="9" RowIndex="21" Value="D"/>
<TableCell ColumnIndex="10" RowIndex="21" Value="L"/>
<TableCell ColumnIndex="11" RowIndex="21" Value="D"/>
<TableCell ColumnIndex="12" RowIndex="21" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="22" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="22" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="22" Value="L"/>
<TableCell ColumnIndex="3" RowIndex="22" Value="L"/>
<TableCell ColumnIndex="4" RowIndex="22" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="22" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="22" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="22" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="22" Value="D"/>
<TableCell ColumnIndex="9" RowIndex="22" Value="D"/>
<TableCell ColumnIndex="10" RowIndex="22" Value="L"/>
<TableCell ColumnIndex="11" RowIndex="22" Value="D"/>
<TableCell ColumnIndex="12" RowIndex="22" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="23" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="23" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="23" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="23" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="23" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="23" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="23" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="23" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="23" Value="D"/>
<TableCell ColumnIndex="9" RowIndex="23" Value="D"/>
<TableCell ColumnIndex="10" RowIndex="23" Value="L"/>
<TableCell ColumnIndex="11" RowIndex="23" Value="D"/>
<TableCell ColumnIndex="12" RowIndex="23" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="24" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="24" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="24" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="24" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="24" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="24" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="24" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="24" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="24" Value="H"/>
<TableCell ColumnIndex="9" RowIndex="24" Value="H"/>
<TableCell ColumnIndex="10" RowIndex="24" Value="L"/>
<TableCell ColumnIndex="11" RowIndex="24" Value="D"/>
<TableCell ColumnIndex="12" RowIndex="24" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="25" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="25" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="25" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="25" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="25" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="25" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="25" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="25" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="25" Value="I"/>
<TableCell ColumnIndex="9" RowIndex="25" Value="I"/>
<TableCell ColumnIndex="10" RowIndex="25" Value="L"/>
<TableCell ColumnIndex="11" RowIndex="25" Value="D"/>
<TableCell ColumnIndex="12" RowIndex="25" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="26" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="26" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="26" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="26" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="26" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="26" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="26" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="26" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="26" Value="I"/>
<TableCell ColumnIndex="9" RowIndex="26" Value="I"/>
<TableCell ColumnIndex="10" RowIndex="26" Value="L"/>
<TableCell ColumnIndex="11" RowIndex="26" Value="D"/>
<TableCell ColumnIndex="12" RowIndex="26" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="27" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="27" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="27" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="27" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="27" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="27" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="27" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="27" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="27" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="27" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="27" Value="L"/>
<TableCell ColumnIndex="11" RowIndex="27" Value="D"/>
<TableCell ColumnIndex="12" RowIndex="27" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="28" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="28" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="28" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="28" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="28" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="28" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="28" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="28" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="28" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="28" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="28" Value="L"/>
<TableCell ColumnIndex="11" RowIndex="28" Value="D"/>
<TableCell ColumnIndex="12" RowIndex="28" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="29" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="29" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="29" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="29" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="29" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="29" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="29" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="29" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="29" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="29" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="29" Value="D"/>
<TableCell ColumnIndex="11" RowIndex="29" Value="D"/>
<TableCell ColumnIndex="12" RowIndex="29" Value="D"/>
<TableCell ColumnIndex="0" RowIndex="30" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="30" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="30" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="30" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="30" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="30" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="30" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="30" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="30" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="30" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="30" Value="D"/>
<TableCell ColumnIndex="11" RowIndex="30" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="30" Value="D"/>
<TableCell ColumnIndex="0" RowIndex="31" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="31" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="31" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="31" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="31" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="31" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="31" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="31" Value="D"/>
<TableCell ColumnIndex="8" RowIndex="31" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="31" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="31" Value="D"/>
<TableCell ColumnIndex="11" RowIndex="31" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="31" Value="D"/>
<TableCell ColumnIndex="0" RowIndex="32" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="32" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="32" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="32" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="32" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="32" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="32" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="32" Value="D"/>
<TableCell ColumnIndex="8" RowIndex="32" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="32" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="32" Value="D"/>
<TableCell ColumnIndex="11" RowIndex="32" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="32" Value="D"/>
<TableCell ColumnIndex="0" RowIndex="33" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="33" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="33" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="33" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="33" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="33" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="33" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="33" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="33" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="33" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="33" Value="D"/>
<TableCell ColumnIndex="11" RowIndex="33" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="33" Value="D"/>
<TableCell ColumnIndex="0" RowIndex="34" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="34" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="34" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="34" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="34" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="34" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="34" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="34" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="34" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="34" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="34" Value="D"/>
<TableCell ColumnIndex="11" RowIndex="34" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="34" Value="D"/>
<TableCell ColumnIndex="0" RowIndex="35" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="35" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="35" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="35" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="35" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="35" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="35" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="35" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="35" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="35" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="35" Value="H"/>
<TableCell ColumnIndex="11" RowIndex="35" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="35" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="36" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="36" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="36" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="36" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="36" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="36" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="36" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="36" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="36" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="36" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="36" Value="H"/>
<TableCell ColumnIndex="11" RowIndex="36" Value="I"/>
<TableCell ColumnIndex="12" RowIndex="36" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="37" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="37" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="37" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="37" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="37" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="37" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="37" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="37" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="37" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="37" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="37" Value="H"/>
<TableCell ColumnIndex="11" RowIndex="37" Value="I"/>
<TableCell ColumnIndex="12" RowIndex="37" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="38" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="38" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="38" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="38" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="38" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="38" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="38" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="38" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="38" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="38" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="38" Value="I"/>
<TableCell ColumnIndex="11" RowIndex="38" Value="I"/>
<TableCell ColumnIndex="12" RowIndex="38" Value="I"/>
<TableCell ColumnIndex="0" RowIndex="39" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="39" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="39" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="39" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="39" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="39" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="39" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="39" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="39" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="39" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="39" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="39" Value="I"/>
<TableCell ColumnIndex="12" RowIndex="39" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="40" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="40" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="40" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="40" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="40" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="40" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="40" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="40" Value="I"/>
<TableCell ColumnIndex="8" RowIndex="40" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="40" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="40" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="40" Value="I"/>
<TableCell ColumnIndex="12" RowIndex="40" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="41" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="41" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="41" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="41" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="41" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="41" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="41" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="41" Value="I"/>
<TableCell ColumnIndex="8" RowIndex="41" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="41" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="41" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="41" Value="I"/>
<TableCell ColumnIndex="12" RowIndex="41" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="42" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="42" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="42" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="42" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="42" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="42" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="42" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="42" Value="I"/>
<TableCell ColumnIndex="8" RowIndex="42" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="42" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="42" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="42" Value="I"/>
<TableCell ColumnIndex="12" RowIndex="42" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="43" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="43" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="43" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="43" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="43" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="43" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="43" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="43" Value="I"/>
<TableCell ColumnIndex="8" RowIndex="43" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="43" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="43" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="43" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="43" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="44" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="44" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="44" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="44" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="44" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="44" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="44" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="44" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="44" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="44" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="44" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="44" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="44" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="45" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="45" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="45" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="45" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="45" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="45" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="45" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="45" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="45" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="45" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="45" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="45" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="45" Value="Y"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="integer" Description="PCR6 Score" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.SCORES.PCR6" InputOrOutput="Input" Name="PCR6Score" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.SCORES"/>
<Mapping DataType="string" Description="Channel code" FieldOrDataMethodName="Application.CreditApplication.T_CHANNEL_CODE" InputOrOutput="Input" Name="Channel" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="Downgrade table for IRC PuertoRico Default" Name="dt_IRC_Downgrade_PR_Default" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="CreditClass" MappingName="CreditClass">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="A"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="B"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="C"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="L"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="eqs" Value="D"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="eqs" Value="H"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="eqs" Value="I"/>
</ColumnCell>
<ColumnCell Index="7">
<ColumnCellCondition Operator="eqs" Value="Y"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups/>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="7" Value="Y"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="string" Description="" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Input" Name="CreditClass" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.IRC_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="Returns Credit Class Market Small Business Applications where Experian is the bureau" Name="dt_CClassBusSmallExp" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="BureauScore" MappingName="BureauScore">
<ColumnCell Index="0">
<ColumnCellCondition Operator="le" Value="9,520"/>
<ColumnCellCondition Operator="lt" Value="10,001"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="le" Value="4,977"/>
<ColumnCellCondition Operator="lt" Value="9,520"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="le" Value="3,602"/>
<ColumnCellCondition Operator="lt" Value="4,977"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="lt" Value="3,602"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups/>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="3"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="7"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="5"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="6"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="integer" Description="" FieldOrDataMethodName="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput.BusRiskScore" InputOrOutput="Input" Name="BureauScore" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="Neustar credit class upgrade challenger" Name="dt_NeustarCCUpgradeChallenger" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="OrgCreditClass" MappingName="OrgCreditClass">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="A"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="B"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="C"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="L"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="eqs" Value="D"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="eqs" Value="H"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="eqs" Value="I"/>
</ColumnCell>
<ColumnCell Index="7">
<ColumnCellCondition Operator="eqs" Value="Y"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups/>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="C"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="C"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="C"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="I"/>
<TableCell ColumnIndex="0" RowIndex="7" Value="Y"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="string" Description="" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Input" Name="OrgCreditClass" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.NEUSTAR_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="Downgrade table for IRC TPR" Name="dt_IRC_Downgrade" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="CREDIT_CLASS" MappingName="CREDIT_CLASS">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="A"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="B"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="C"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="L"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="eqs" Value="D"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="eqs" Value="H"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="eqs" Value="I"/>
</ColumnCell>
<ColumnCell Index="7">
<ColumnCellCondition Operator="eqs" Value="Y"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups>
<RowCellGroup CellGroupName="CHANNEL_CODE" MappingName="CHANNEL_CODE">
<RowCell Index="0">
<RowCellCondition Operator="eqs" Value="120"/>
</RowCell>
<RowCell Index="1">
<RowCellCondition Operator="eqs" Value="212"/>
</RowCell>
<RowCell Index="2">
<RowCellCondition Operator="eqs" Value="213"/>
</RowCell>
<RowCell Index="3">
<RowCellCondition Operator="eqs" Value="220"/>
</RowCell>
<RowCell Index="4">
<RowCellCondition Operator="eqs" Value="240"/>
</RowCell>
<RowCell Index="5">
<RowCellCondition Operator="eqs" Value="410"/>
</RowCell>
<RowCell Index="6">
<RowCellCondition Operator="NA"/>
</RowCell>
</RowCellGroup>
</RowCellGroups>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="1" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="2" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="3" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="4" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="5" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="6" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="L"/>
<TableCell ColumnIndex="1" RowIndex="1" Value="L"/>
<TableCell ColumnIndex="2" RowIndex="1" Value="C"/>
<TableCell ColumnIndex="3" RowIndex="1" Value="L"/>
<TableCell ColumnIndex="4" RowIndex="1" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="1" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="1" Value="C"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="3" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="4" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="7" Value="Y"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="string" Description="Channel Code" FieldOrDataMethodName="Application.CreditApplication.T_CHANNEL_CODE" InputOrOutput="Input" Name="CHANNEL_CODE" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
<Mapping DataType="string" Description="Credit Class" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Input" Name="CREDIT_CLASS" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.IRC_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="Assign CreditClass for LN thin and with Clarity Hit" Name="dt_AssignCreditClassLNwClarityHit" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="LNScore" MappingName="LNScore">
<ColumnCell Index="0">
<ColumnCellCondition Operator="ge" Value="781"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="le" Value="761"/>
<ColumnCellCondition Operator="le" Value="780"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="le" Value="741"/>
<ColumnCellCondition Operator="le" Value="760"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="le" Value="735"/>
<ColumnCellCondition Operator="le" Value="740"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="le" Value="721"/>
<ColumnCellCondition Operator="le" Value="734"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="le" Value="716"/>
<ColumnCellCondition Operator="le" Value="720"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="le" Value="714"/>
<ColumnCellCondition Operator="le" Value="715"/>
</ColumnCell>
<ColumnCell Index="7">
<ColumnCellCondition Operator="le" Value="701"/>
<ColumnCellCondition Operator="le" Value="713"/>
</ColumnCell>
<ColumnCell Index="8">
<ColumnCellCondition Operator="le" Value="683"/>
<ColumnCellCondition Operator="le" Value="700"/>
</ColumnCell>
<ColumnCell Index="9">
<ColumnCellCondition Operator="le" Value="681"/>
<ColumnCellCondition Operator="le" Value="682"/>
</ColumnCell>
<ColumnCell Index="10">
<ColumnCellCondition Operator="le" Value="676"/>
<ColumnCellCondition Operator="le" Value="680"/>
</ColumnCell>
<ColumnCell Index="11">
<ColumnCellCondition Operator="eqs" Value="675"/>
</ColumnCell>
<ColumnCell Index="12">
<ColumnCellCondition Operator="le" Value="661"/>
<ColumnCellCondition Operator="le" Value="674"/>
</ColumnCell>
<ColumnCell Index="13">
<ColumnCellCondition Operator="le" Value="641"/>
<ColumnCellCondition Operator="le" Value="660"/>
</ColumnCell>
<ColumnCell Index="14">
<ColumnCellCondition Operator="le" Value="621"/>
<ColumnCellCondition Operator="le" Value="640"/>
</ColumnCell>
<ColumnCell Index="15">
<ColumnCellCondition Operator="le" Value="223"/>
<ColumnCellCondition Operator="le" Value="620"/>
</ColumnCell>
<ColumnCell Index="16">
<ColumnCellCondition Operator="eqs" Value="222"/>
</ColumnCell>
<ColumnCell Index="17">
<ColumnCellCondition Operator="le" Value="201"/>
<ColumnCellCondition Operator="le" Value="221"/>
</ColumnCell>
<ColumnCell Index="18">
<ColumnCellCondition Operator="eqs" Value="200"/>
</ColumnCell>
<ColumnCell Index="19">
<ColumnCellCondition Operator="le" Value="105"/>
<ColumnCellCondition Operator="le" Value="199"/>
</ColumnCell>
<ColumnCell Index="20">
<ColumnCellCondition Operator="eqs" Value="104"/>
</ColumnCell>
<ColumnCell Index="21">
<ColumnCellCondition Operator="eqs" Value="103"/>
</ColumnCell>
<ColumnCell Index="22">
<ColumnCellCondition Operator="eqs" Value="102"/>
</ColumnCell>
<ColumnCell Index="23">
<ColumnCellCondition Operator="eqs" Value="101"/>
</ColumnCell>
<ColumnCell Index="24">
<ColumnCellCondition Operator="eqs" Value="100"/>
</ColumnCell>
<ColumnCell Index="25">
<ColumnCellCondition Operator="lt" Value="100"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups>
<RowCellGroup CellGroupName="Channel" MappingName="Channel">
<RowCell Index="0">
<RowCellCondition Operator="eqs" Value="410"/>
</RowCell>
<RowCell Index="1">
<RowCellCondition Operator="eqs" Value="120"/>
</RowCell>
<RowCell Index="2">
<RowCellCondition Operator="eqs" Value="220"/>
</RowCell>
<RowCell Index="3">
<RowCellCondition Operator="eqs" Value="240"/>
</RowCell>
<RowCell Index="4">
<RowCellCondition Operator="eqs" Value="510"/>
</RowCell>
<RowCell Index="5">
<RowCellCondition Operator="eqs" Value="520"/>
</RowCell>
<RowCell Index="6">
<RowCellCondition Operator="eqs" Value="110"/>
</RowCell>
<RowCell Index="7">
<RowCellCondition Operator="eqs" Value="230"/>
</RowCell>
<RowCell Index="8">
<RowCellCondition Operator="eqs" Value="213"/>
</RowCell>
<RowCell Index="9">
<RowCellCondition Operator="eqs" Value="212"/>
</RowCell>
<RowCell Index="10">
<RowCellCondition Operator="eqs" Value="210"/>
</RowCell>
<RowCell Index="11">
<RowCellCondition Operator="eqs" Value="215"/>
</RowCell>
<RowCell Index="12">
<RowCellCondition Operator="NA"/>
</RowCell>
</RowCellGroup>
</RowCellGroups>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="L"/>
<TableCell ColumnIndex="1" RowIndex="0" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="0" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="0" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="0" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="0" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="0" Value="L"/>
<TableCell ColumnIndex="7" RowIndex="0" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="0" Value="D"/>
<TableCell ColumnIndex="9" RowIndex="0" Value="D"/>
<TableCell ColumnIndex="10" RowIndex="0" Value="L"/>
<TableCell ColumnIndex="11" RowIndex="0" Value="L"/>
<TableCell ColumnIndex="12" RowIndex="0" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="L"/>
<TableCell ColumnIndex="1" RowIndex="1" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="1" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="1" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="1" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="1" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="1" Value="L"/>
<TableCell ColumnIndex="7" RowIndex="1" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="1" Value="D"/>
<TableCell ColumnIndex="9" RowIndex="1" Value="D"/>
<TableCell ColumnIndex="10" RowIndex="1" Value="D"/>
<TableCell ColumnIndex="11" RowIndex="1" Value="L"/>
<TableCell ColumnIndex="12" RowIndex="1" Value="D"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="L"/>
<TableCell ColumnIndex="1" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="2" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="2" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="8" RowIndex="2" Value="H"/>
<TableCell ColumnIndex="9" RowIndex="2" Value="H"/>
<TableCell ColumnIndex="10" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="11" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="12" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="8" RowIndex="3" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="3" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="11" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="12" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="8" RowIndex="4" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="4" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="4" Value="H"/>
<TableCell ColumnIndex="11" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="12" RowIndex="4" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="5" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="5" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="5" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="5" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="5" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="5" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="5" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="5" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="11" RowIndex="5" Value="D"/>
<TableCell ColumnIndex="12" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="6" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="6" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="6" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="6" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="6" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="6" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="6" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="6" Value="H"/>
<TableCell ColumnIndex="11" RowIndex="6" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="6" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="7" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="7" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="7" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="7" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="7" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="7" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="7" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="7" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="7" Value="H"/>
<TableCell ColumnIndex="11" RowIndex="7" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="7" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="8" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="8" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="8" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="8" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="8" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="8" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="8" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="8" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="8" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="8" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="8" Value="I"/>
<TableCell ColumnIndex="11" RowIndex="8" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="8" Value="I"/>
<TableCell ColumnIndex="0" RowIndex="9" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="9" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="9" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="9" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="9" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="9" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="9" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="9" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="9" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="9" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="9" Value="I"/>
<TableCell ColumnIndex="11" RowIndex="9" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="9" Value="I"/>
<TableCell ColumnIndex="0" RowIndex="10" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="10" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="10" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="10" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="10" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="10" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="10" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="10" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="10" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="10" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="10" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="10" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="10" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="11" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="11" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="11" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="11" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="11" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="11" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="11" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="11" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="11" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="11" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="11" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="11" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="11" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="12" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="12" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="12" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="12" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="12" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="12" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="12" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="12" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="12" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="12" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="12" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="12" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="12" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="13" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="13" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="13" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="13" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="13" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="13" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="13" Value="I"/>
<TableCell ColumnIndex="7" RowIndex="13" Value="I"/>
<TableCell ColumnIndex="8" RowIndex="13" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="13" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="13" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="13" Value="I"/>
<TableCell ColumnIndex="12" RowIndex="13" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="14" Value="I"/>
<TableCell ColumnIndex="1" RowIndex="14" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="14" Value="I"/>
<TableCell ColumnIndex="3" RowIndex="14" Value="I"/>
<TableCell ColumnIndex="4" RowIndex="14" Value="I"/>
<TableCell ColumnIndex="5" RowIndex="14" Value="I"/>
<TableCell ColumnIndex="6" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="23" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="23" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="23" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="23" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="23" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="23" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="23" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="23" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="23" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="23" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="23" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="23" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="23" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="24" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="24" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="24" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="24" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="24" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="24" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="24" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="24" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="24" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="24" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="24" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="24" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="24" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="25" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="25" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="25" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="25" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="25" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="25" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="25" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="25" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="25" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="25" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="25" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="25" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="25" Value="Y"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="string" Description="Channel" FieldOrDataMethodName="Application.CreditApplication.T_CHANNEL_CODE" InputOrOutput="Input" Name="Channel" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
<Mapping DataType="integer" Description="LN Score" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.SCORES.LNScore" InputOrOutput="Input" Name="LNScore" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.SCORES"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="Smart Credit CC" Name="dt_SmartCreditCC" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="CreditClass" MappingName="CreditClass">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="A"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="B"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="C"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="L"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="eqs" Value="D"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="eqs" Value="H"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="eqs" Value="I"/>
</ColumnCell>
<ColumnCell Index="7">
<ColumnCellCondition Operator="eqs" Value="Y"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups/>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="W"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="R"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="R"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="R"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="R"/>
<TableCell ColumnIndex="0" RowIndex="7" Value="R"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="string" Description="Initial CC from regular flow" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FINAL_CREDIT_CLASS" InputOrOutput="Input" Name="CreditClass" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FINAL_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="NEG downgrade SIFA - Retail 410, TPR 120, Walmart 212, Telesales 220, Web 240, Webbank 213 and others " Name="dt_NEG_Downgrade_SIFA" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="CreditClass" MappingName="CreditClass">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="A"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="B"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="C"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="L"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="eqs" Value="D"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="eqs" Value="H"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="eqs" Value="I"/>
</ColumnCell>
<ColumnCell Index="7">
<ColumnCellCondition Operator="eqs" Value="Y"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups>
<RowCellGroup CellGroupName="Channel" MappingName="Channel">
<RowCell Index="0">
<RowCellCondition Operator="eqs" Value="410"/>
</RowCell>
<RowCell Index="1">
<RowCellCondition Operator="eqs" Value="120"/>
</RowCell>
<RowCell Index="2">
<RowCellCondition Operator="eqs" Value="212"/>
</RowCell>
<RowCell Index="3">
<RowCellCondition Operator="eqs" Value="220"/>
</RowCell>
<RowCell Index="4">
<RowCellCondition Operator="eqs" Value="240"/>
</RowCell>
<RowCell Index="5">
<RowCellCondition Operator="eqs" Value="213"/>
</RowCell>
<RowCell Index="6">
<RowCellCondition Operator="NA"/>
</RowCell>
</RowCellGroup>
</RowCellGroups>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="1" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="2" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="3" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="4" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="5" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="6" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="1" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="2" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="3" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="4" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="5" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="6" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="C"/>
<TableCell ColumnIndex="1" RowIndex="2" Value="C"/>
<TableCell ColumnIndex="2" RowIndex="2" Value="C"/>
<TableCell ColumnIndex="3" RowIndex="2" Value="C"/>
<TableCell ColumnIndex="4" RowIndex="2" Value="C"/>
<TableCell ColumnIndex="5" RowIndex="2" Value="C"/>
<TableCell ColumnIndex="6" RowIndex="2" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="L"/>
<TableCell ColumnIndex="1" RowIndex="3" Value="L"/>
<TableCell ColumnIndex="2" RowIndex="3" Value="L"/>
<TableCell ColumnIndex="3" RowIndex="3" Value="L"/>
<TableCell ColumnIndex="4" RowIndex="3" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="3" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="3" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="4" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="7" Value="Y"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="string" Description="" FieldOrDataMethodName="Application.CreditApplication.T_CHANNEL_CODE" InputOrOutput="Input" Name="Channel" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
<Mapping DataType="string" Description="" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Input" Name="CreditClass" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.NegFileDetails.RESULTING_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.NegFileDetails"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="PID Score Map Fraud Strategy" Name="dt_FraudStrategy_ScoreMap_PID6" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="CHANNEL_ID" MappingName="CHANNEL_ID">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="220"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="240"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="510"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="520"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="eqs" Value="120"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="eqs" Value="410"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="NA"/>
</ColumnCell>
</ColumnCellGroup>
<ColumnCellGroup CellGroupName="PID_SCORE_VALUE" MappingName="PID_SCORE_VALUE">
<ColumnCell Index="0">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="320"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="320"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="320"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="320"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="300"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="300"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="270"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups/>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="S"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="integer" Description="PID Score" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.PID.PID_SCORE" InputOrOutput="Input" Name="PID_SCORE_VALUE" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.PID"/>
<Mapping DataType="string" Description="Channel ID" FieldOrDataMethodName="Application.CreditApplication.T_CHANNEL_CODE" InputOrOutput="Input" Name="CHANNEL_ID" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.REVIEW_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="PID Score Map Fraud Strategy" Name="dt_FraudStrategy_ScoreMap_PID5" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="CHANNEL_ID" MappingName="CHANNEL_ID">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="220"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="240"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="510"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="520"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="eqs" Value="120"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="eqs" Value="410"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="NA"/>
</ColumnCell>
</ColumnCellGroup>
<ColumnCellGroup CellGroupName="PID_SCORE_VALUE" MappingName="PID_SCORE_VALUE">
<ColumnCell Index="0">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="400"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="400"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="400"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="400"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="450"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="450"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="400"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups/>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="S"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="integer" Description="PID Score" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.PID.PID_SCORE" InputOrOutput="Input" Name="PID_SCORE_VALUE" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.PID"/>
<Mapping DataType="string" Description="Channel ID" FieldOrDataMethodName="Application.CreditApplication.T_CHANNEL_CODE" InputOrOutput="Input" Name="CHANNEL_ID" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.REVIEW_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="Returns PG Credit Class based on Decision BAN CC and Tenure." Name="dt_TenureBasedPGCC" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="BANHighestCC" MappingName="BANHighestCC">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="A"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="B"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="C"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="L"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="eqs" Value="O"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="eqs" Value="D"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="eqs" Value="J"/>
</ColumnCell>
<ColumnCell Index="7">
<ColumnCellCondition Operator="eqs" Value="N"/>
</ColumnCell>
<ColumnCell Index="8">
<ColumnCellCondition Operator="eqs" Value="H"/>
</ColumnCell>
<ColumnCell Index="9">
<ColumnCellCondition Operator="eqs" Value="I"/>
</ColumnCell>
<ColumnCell Index="10">
<ColumnCellCondition Operator="eqs" Value="Y"/>
</ColumnCell>
<ColumnCell Index="11">
<ColumnCellCondition Operator="NA"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups>
<RowCellGroup CellGroupName="HighestCCHighetTenure" MappingName="HighestCCHighetTenure">
<RowCell Index="0">
<RowCellCondition Operator="eqs" Value="0"/>
</RowCell>
<RowCell Index="1">
<RowCellCondition Operator="lt" Value="0"/>
<RowCellCondition Operator="lt" Value="12"/>
</RowCell>
<RowCell Index="2">
<RowCellCondition Operator="le" Value="12"/>
<RowCellCondition Operator="lt" Value="36"/>
</RowCell>
<RowCell Index="3">
<RowCellCondition Operator="ge" Value="36"/>
</RowCell>
</RowCellGroup>
</RowCellGroups>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="4"/>
<TableCell ColumnIndex="1" RowIndex="0" Value="4"/>
<TableCell ColumnIndex="2" RowIndex="0" Value="4"/>
<TableCell ColumnIndex="3" RowIndex="0" Value="4"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="4"/>
<TableCell ColumnIndex="1" RowIndex="1" Value="4"/>
<TableCell ColumnIndex="2" RowIndex="1" Value="4"/>
<TableCell ColumnIndex="3" RowIndex="1" Value="4"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="0"/>
<TableCell ColumnIndex="1" RowIndex="2" Value="0"/>
<TableCell ColumnIndex="2" RowIndex="2" Value="4"/>
<TableCell ColumnIndex="3" RowIndex="2" Value="4"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="7"/>
<TableCell ColumnIndex="1" RowIndex="3" Value="7"/>
<TableCell ColumnIndex="2" RowIndex="3" Value="0"/>
<TableCell ColumnIndex="3" RowIndex="3" Value="4"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="4"/>
<TableCell ColumnIndex="1" RowIndex="4" Value="4"/>
<TableCell ColumnIndex="2" RowIndex="4" Value="4"/>
<TableCell ColumnIndex="3" RowIndex="4" Value="4"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="7"/>
<TableCell ColumnIndex="1" RowIndex="5" Value="7"/>
<TableCell ColumnIndex="2" RowIndex="5" Value="7"/>
<TableCell ColumnIndex="3" RowIndex="5" Value="4"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="4"/>
<TableCell ColumnIndex="1" RowIndex="6" Value="4"/>
<TableCell ColumnIndex="2" RowIndex="6" Value="4"/>
<TableCell ColumnIndex="3" RowIndex="6" Value="4"/>
<TableCell ColumnIndex="0" RowIndex="7" Value="4"/>
<TableCell ColumnIndex="1" RowIndex="7" Value="4"/>
<TableCell ColumnIndex="2" RowIndex="7" Value="4"/>
<TableCell ColumnIndex="3" RowIndex="7" Value="4"/>
<TableCell ColumnIndex="0" RowIndex="8" Value="5"/>
<TableCell ColumnIndex="1" RowIndex="8" Value="5"/>
<TableCell ColumnIndex="2" RowIndex="8" Value="5"/>
<TableCell ColumnIndex="3" RowIndex="8" Value="4"/>
<TableCell ColumnIndex="0" RowIndex="9" Value="5"/>
<TableCell ColumnIndex="1" RowIndex="9" Value="5"/>
<TableCell ColumnIndex="2" RowIndex="9" Value="5"/>
<TableCell ColumnIndex="3" RowIndex="9" Value="4"/>
<TableCell ColumnIndex="0" RowIndex="10" Value="6"/>
<TableCell ColumnIndex="1" RowIndex="10" Value="6"/>
<TableCell ColumnIndex="2" RowIndex="10" Value="6"/>
<TableCell ColumnIndex="3" RowIndex="10" Value="4"/>
<TableCell ColumnIndex="0" RowIndex="11" Value="5"/>
<TableCell ColumnIndex="1" RowIndex="11" Value="5"/>
<TableCell ColumnIndex="2" RowIndex="11" Value="5"/>
<TableCell ColumnIndex="3" RowIndex="11" Value="4"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="string" Description="" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.BANHighestCC" InputOrOutput="Input" Name="BANHighestCC" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
<Mapping DataType="integer" Description="" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.HighestCCHighestTenure" InputOrOutput="Input" Name="HighestCCHighetTenure" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="PID Score Map Fraud Strategy" Name="dt_FraudStrategy_ScoreMap_PID4" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="CHANNEL_ID" MappingName="CHANNEL_ID">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="220"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="240"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="510"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="520"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="eqs" Value="120"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="eqs" Value="410"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="NA"/>
</ColumnCell>
</ColumnCellGroup>
<ColumnCellGroup CellGroupName="PID_SCORE_VALUE" MappingName="PID_SCORE_VALUE">
<ColumnCell Index="0">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="450"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="450"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="450"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="450"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="600"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="600"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="400"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups/>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="S"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="integer" Description="PID Score" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.PID.PID_SCORE" InputOrOutput="Input" Name="PID_SCORE_VALUE" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.PID"/>
<Mapping DataType="string" Description="Channel ID" FieldOrDataMethodName="Application.CreditApplication.T_CHANNEL_CODE" InputOrOutput="Input" Name="CHANNEL_ID" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.REVIEW_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="Returns Credit Class Market Small Business Applications where Equifax is the bureau" Name="dt_CClassBusSmallEfx" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="BureauScore" MappingName="BureauScore">
<ColumnCell Index="0">
<ColumnCellCondition Operator="le" Value="517"/>
<ColumnCellCondition Operator="lt" Value="1,001"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="le" Value="101"/>
<ColumnCellCondition Operator="lt" Value="517"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="le" Value="1"/>
<ColumnCellCondition Operator="lt" Value="101"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="0"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups/>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="3"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="7"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="5"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="6"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="integer" Description="" FieldOrDataMethodName="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput.BusRiskScore" InputOrOutput="Input" Name="BureauScore" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="Sets Credit Class for PG for Non Retail" Name="dt_PGCClassNonRetail" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="CreditClass" MappingName="CreditClass">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="A"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="B"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="C"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="L"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="eqs" Value="D"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="eqs" Value="N"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="eqs" Value="H"/>
</ColumnCell>
<ColumnCell Index="7">
<ColumnCellCondition Operator="eqs" Value="I"/>
</ColumnCell>
<ColumnCell Index="8">
<ColumnCellCondition Operator="eqs" Value="Y"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups/>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="4"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="4"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="0"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="7"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="7"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="7"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="5"/>
<TableCell ColumnIndex="0" RowIndex="7" Value="5"/>
<TableCell ColumnIndex="0" RowIndex="8" Value="6"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="string" Description="Consumer Credit Class" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Input" Name="CreditClass" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="Downgrade table for NEG Puerto Rico " Name="dt_NEG_Downgrade_PR" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="NegType" MappingName="NegType">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="CHECK"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="CHECK"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="ne" Value="CHECK"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="ne" Value="CHECK"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="ne" Value="CHECK"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="ne" Value="CHECK"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="ne" Value="CHECK"/>
</ColumnCell>
<ColumnCell Index="7">
<ColumnCellCondition Operator="ne" Value="CHECK"/>
</ColumnCell>
<ColumnCell Index="8">
<ColumnCellCondition Operator="ne" Value="CHECK"/>
</ColumnCell>
<ColumnCell Index="9">
<ColumnCellCondition Operator="ne" Value="CHECK"/>
</ColumnCell>
</ColumnCellGroup>
<ColumnCellGroup CellGroupName="TenureRecency" MappingName="TenureRecency">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="PASS"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="FAIL"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="NA"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="NA"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="NA"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="NA"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="NA"/>
</ColumnCell>
<ColumnCell Index="7">
<ColumnCellCondition Operator="NA"/>
</ColumnCell>
<ColumnCell Index="8">
<ColumnCellCondition Operator="NA"/>
</ColumnCell>
<ColumnCell Index="9">
<ColumnCellCondition Operator="NA"/>
</ColumnCell>
</ColumnCellGroup>
<ColumnCellGroup CellGroupName="CreditClass" MappingName="CreditClass">
<ColumnCell Index="0">
<ColumnCellCondition Operator="NA"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="NA"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="A"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="B"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="eqs" Value="C"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="eqs" Value="L"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="eqs" Value="D"/>
</ColumnCell>
<ColumnCell Index="7">
<ColumnCellCondition Operator="eqs" Value="H"/>
</ColumnCell>
<ColumnCell Index="8">
<ColumnCellCondition Operator="eqs" Value="I"/>
</ColumnCell>
<ColumnCell Index="9">
<ColumnCellCondition Operator="eqs" Value="Y"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups>
<RowCellGroup CellGroupName="NegType" MappingName="NegType">
<RowCell Index="0">
<RowCellCondition Operator="eqs" Value="CHECK"/>
</RowCell>
<RowCell Index="1">
<RowCellCondition Operator="eqs" Value="BAL"/>
</RowCell>
<RowCell Index="2">
<RowCellCondition Operator="eqs" Value="SIFA"/>
</RowCell>
<RowCell Index="3">
<RowCellCondition Operator="eqs" Value="SOLD"/>
</RowCell>
</RowCellGroup>
</RowCellGroups>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="0" Value="N/A"/>
<TableCell ColumnIndex="2" RowIndex="0" Value="N/A"/>
<TableCell ColumnIndex="3" RowIndex="0" Value="N/A"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="1" Value="N/A"/>
<TableCell ColumnIndex="2" RowIndex="1" Value="N/A"/>
<TableCell ColumnIndex="3" RowIndex="1" Value="N/A"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="N/A"/>
<TableCell ColumnIndex="1" RowIndex="2" Value="B"/>
<TableCell ColumnIndex="2" RowIndex="2" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="2" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="N/A"/>
<TableCell ColumnIndex="1" RowIndex="3" Value="B"/>
<TableCell ColumnIndex="2" RowIndex="3" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="3" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="N/A"/>
<TableCell ColumnIndex="1" RowIndex="4" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="4" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="4" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="N/A"/>
<TableCell ColumnIndex="1" RowIndex="5" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="5" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="5" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="N/A"/>
<TableCell ColumnIndex="1" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="7" Value="N/A"/>
<TableCell ColumnIndex="1" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="8" Value="N/A"/>
<TableCell ColumnIndex="1" RowIndex="8" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="8" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="8" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="9" Value="N/A"/>
<TableCell ColumnIndex="1" RowIndex="9" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="9" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="9" Value="Y"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="string" Description="Tenure Recency" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.NegFileDetails.TENURE_RECENCY_STATUS" InputOrOutput="Input" Name="TenureRecency" ObjectOrReference="DOR" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.NegFileDetails.dor_InProcessNegFile"/>
<Mapping DataType="string" Description="NEG TYPE" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.NegFileDetails.NEG_TYPE" InputOrOutput="Input" Name="NegType" ObjectOrReference="DOR" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.NegFileDetails.dor_InProcessNegFile"/>
<Mapping DataType="string" Description="" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Input" Name="CreditClass" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.NegFileDetails.RESULTING_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.NegFileDetails"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="PID Score Map Fraud Strategy" Name="dt_FraudStrategy_ScoreMap_PID3" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="CHANNEL_ID" MappingName="CHANNEL_ID">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="220"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="240"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="510"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="520"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="NA"/>
</ColumnCell>
</ColumnCellGroup>
<ColumnCellGroup CellGroupName="PID_SCORE_VALUE" MappingName="PID_SCORE_VALUE">
<ColumnCell Index="0">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="500"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="500"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="500"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="500"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="le" Value="0"/>
<ColumnCellCondition Operator="le" Value="300"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups/>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="S"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="S"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="integer" Description="PID Score" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.PID.PID_SCORE" InputOrOutput="Input" Name="PID_SCORE_VALUE" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.PID"/>
<Mapping DataType="string" Description="Channel ID" FieldOrDataMethodName="Application.CreditApplication.T_CHANNEL_CODE" InputOrOutput="Input" Name="CHANNEL_ID" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.REVIEW_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="Assign CreditClass for LN thin and without Clarity Hit" Name="dt_AssignCreditClassLNwoClarityHit" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="LNScore" MappingName="LNScore">
<ColumnCell Index="0">
<ColumnCellCondition Operator="ge" Value="781"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="le" Value="741"/>
<ColumnCellCondition Operator="le" Value="780"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="le" Value="722"/>
<ColumnCellCondition Operator="le" Value="740"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="721"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="le" Value="696"/>
<ColumnCellCondition Operator="le" Value="720"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="le" Value="691"/>
<ColumnCellCondition Operator="le" Value="695"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="le" Value="681"/>
<ColumnCellCondition Operator="le" Value="690"/>
</ColumnCell>
<ColumnCell Index="7">
<ColumnCellCondition Operator="le" Value="668"/>
<ColumnCellCondition Operator="le" Value="680"/>
</ColumnCell>
<ColumnCell Index="8">
<ColumnCellCondition Operator="eqs" Value="667"/>
</ColumnCell>
<ColumnCell Index="9">
<ColumnCellCondition Operator="eqs" Value="666"/>
</ColumnCell>
<ColumnCell Index="10">
<ColumnCellCondition Operator="le" Value="641"/>
<ColumnCellCondition Operator="le" Value="665"/>
</ColumnCell>
<ColumnCell Index="11">
<ColumnCellCondition Operator="le" Value="621"/>
<ColumnCellCondition Operator="le" Value="640"/>
</ColumnCell>
<ColumnCell Index="12">
<ColumnCellCondition Operator="le" Value="223"/>
<ColumnCellCondition Operator="le" Value="620"/>
</ColumnCell>
<ColumnCell Index="13">
<ColumnCellCondition Operator="eqs" Value="222"/>
</ColumnCell>
<ColumnCell Index="14">
<ColumnCellCondition Operator="le" Value="201"/>
<ColumnCellCondition Operator="le" Value="221"/>
</ColumnCell>
<ColumnCell Index="15">
<ColumnCellCondition Operator="eqs" Value="200"/>
</ColumnCell>
<ColumnCell Index="16">
<ColumnCellCondition Operator="le" Value="105"/>
<ColumnCellCondition Operator="le" Value="199"/>
</ColumnCell>
<ColumnCell Index="17">
<ColumnCellCondition Operator="eqs" Value="104"/>
</ColumnCell>
<ColumnCell Index="18">
<ColumnCellCondition Operator="eqs" Value="103"/>
</ColumnCell>
<ColumnCell Index="19">
<ColumnCellCondition Operator="eqs" Value="102"/>
</ColumnCell>
<ColumnCell Index="20">
<ColumnCellCondition Operator="eqs" Value="101"/>
</ColumnCell>
<ColumnCell Index="21">
<ColumnCellCondition Operator="eqs" Value="100"/>
</ColumnCell>
<ColumnCell Index="22">
<ColumnCellCondition Operator="lt" Value="100"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups>
<RowCellGroup CellGroupName="Channel" MappingName="Channel">
<RowCell Index="0">
<RowCellCondition Operator="eqs" Value="410"/>
</RowCell>
<RowCell Index="1">
<RowCellCondition Operator="eqs" Value="120"/>
</RowCell>
<RowCell Index="2">
<RowCellCondition Operator="eqs" Value="220"/>
</RowCell>
<RowCell Index="3">
<RowCellCondition Operator="eqs" Value="240"/>
</RowCell>
<RowCell Index="4">
<RowCellCondition Operator="eqs" Value="510"/>
</RowCell>
<RowCell Index="5">
<RowCellCondition Operator="eqs" Value="520"/>
</RowCell>
<RowCell Index="6">
<RowCellCondition Operator="eqs" Value="110"/>
</RowCell>
<RowCell Index="7">
<RowCellCondition Operator="eqs" Value="230"/>
</RowCell>
<RowCell Index="8">
<RowCellCondition Operator="eqs" Value="213"/>
</RowCell>
<RowCell Index="9">
<RowCellCondition Operator="eqs" Value="212"/>
</RowCell>
<RowCell Index="10">
<RowCellCondition Operator="eqs" Value="210"/>
</RowCell>
<RowCell Index="11">
<RowCellCondition Operator="eqs" Value="215"/>
</RowCell>
<RowCell Index="12">
<RowCellCondition Operator="NA"/>
</RowCell>
</RowCellGroup>
</RowCellGroups>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="L"/>
<TableCell ColumnIndex="1" RowIndex="0" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="0" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="0" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="0" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="0" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="0" Value="L"/>
<TableCell ColumnIndex="7" RowIndex="0" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="0" Value="D"/>
<TableCell ColumnIndex="9" RowIndex="0" Value="D"/>
<TableCell ColumnIndex="10" RowIndex="0" Value="L"/>
<TableCell ColumnIndex="11" RowIndex="0" Value="L"/>
<TableCell ColumnIndex="12" RowIndex="0" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="L"/>
<TableCell ColumnIndex="1" RowIndex="1" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="1" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="1" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="1" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="1" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="1" Value="L"/>
<TableCell ColumnIndex="7" RowIndex="1" Value="L"/>
<TableCell ColumnIndex="8" RowIndex="1" Value="D"/>
<TableCell ColumnIndex="9" RowIndex="1" Value="D"/>
<TableCell ColumnIndex="10" RowIndex="1" Value="D"/>
<TableCell ColumnIndex="11" RowIndex="1" Value="L"/>
<TableCell ColumnIndex="12" RowIndex="1" Value="D"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="L"/>
<TableCell ColumnIndex="1" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="2" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="2" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="8" RowIndex="2" Value="H"/>
<TableCell ColumnIndex="9" RowIndex="2" Value="H"/>
<TableCell ColumnIndex="10" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="11" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="12" RowIndex="2" Value="D"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="L"/>
<TableCell ColumnIndex="1" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="3" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="3" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="8" RowIndex="3" Value="H"/>
<TableCell ColumnIndex="9" RowIndex="3" Value="H"/>
<TableCell ColumnIndex="10" RowIndex="3" Value="H"/>
<TableCell ColumnIndex="11" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="12" RowIndex="3" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="7" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="8" RowIndex="4" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="4" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="4" Value="H"/>
<TableCell ColumnIndex="11" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="12" RowIndex="4" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="5" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="5" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="5" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="5" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="5" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="5" Value="D"/>
<TableCell ColumnIndex="8" RowIndex="5" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="5" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="11" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="6" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="6" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="6" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="6" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="6" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="6" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="6" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="6" Value="H"/>
<TableCell ColumnIndex="11" RowIndex="6" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="6" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="7" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="7" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="7" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="7" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="7" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="7" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="7" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="7" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="7" Value="I"/>
<TableCell ColumnIndex="11" RowIndex="7" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="7" Value="I"/>
<TableCell ColumnIndex="0" RowIndex="8" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="8" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="8" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="8" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="8" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="8" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="8" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="8" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="8" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="8" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="8" Value="I"/>
<TableCell ColumnIndex="11" RowIndex="8" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="8" Value="I"/>
<TableCell ColumnIndex="0" RowIndex="9" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="9" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="9" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="9" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="9" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="9" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="9" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="9" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="9" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="9" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="9" Value="I"/>
<TableCell ColumnIndex="11" RowIndex="9" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="9" Value="I"/>
<TableCell ColumnIndex="0" RowIndex="10" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="10" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="10" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="10" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="10" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="10" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="10" Value="H"/>
<TableCell ColumnIndex="7" RowIndex="10" Value="H"/>
<TableCell ColumnIndex="8" RowIndex="10" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="10" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="10" Value="I"/>
<TableCell ColumnIndex="11" RowIndex="10" Value="H"/>
<TableCell ColumnIndex="12" RowIndex="10" Value="I"/>
<TableCell ColumnIndex="0" RowIndex="11" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="11" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="11" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="11" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="11" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="11" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="11" Value="I"/>
<TableCell ColumnIndex="7" RowIndex="11" Value="I"/>
<TableCell ColumnIndex="8" RowIndex="11" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="11" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="11" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="11" Value="I"/>
<TableCell ColumnIndex="12" RowIndex="11" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="12" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="12" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="12" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="12" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="12" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="12" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="12" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="12" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="12" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="12" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="12" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="12" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="12" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="13" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="13" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="13" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="13" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="13" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="13" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="13" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="13" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="13" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="13" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="13" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="13" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="13" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="14" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="15" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="16" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="17" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="18" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="19" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="20" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="21" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="7" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="8" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="9" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="10" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="11" RowIndex="22" Value="Y"/>
<TableCell ColumnIndex="12" RowIndex="22" Value="Y"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="string" Description="Channel" FieldOrDataMethodName="Application.CreditApplication.T_CHANNEL_CODE" InputOrOutput="Input" Name="Channel" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
<Mapping DataType="integer" Description="LN Score" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.SCORES.LNScore" InputOrOutput="Input" Name="LNScore" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.SCORES"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="NEG downgrade CHECK - Retail 410, TPR 120, Walmart 212, Telesales 220, Web 240, Webbank 213 and others" Name="dt_NEG_Downgrade_CHECK" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="TenureRecency" MappingName="TenureRecency">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="PASS"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="FAIL"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups>
<RowCellGroup CellGroupName="Channel" MappingName="Channel">
<RowCell Index="0">
<RowCellCondition Operator="eqs" Value="410"/>
</RowCell>
<RowCell Index="1">
<RowCellCondition Operator="eqs" Value="120"/>
</RowCell>
<RowCell Index="2">
<RowCellCondition Operator="eqs" Value="212"/>
</RowCell>
<RowCell Index="3">
<RowCellCondition Operator="eqs" Value="220"/>
</RowCell>
<RowCell Index="4">
<RowCellCondition Operator="eqs" Value="240"/>
</RowCell>
<RowCell Index="5">
<RowCellCondition Operator="eqs" Value="213"/>
</RowCell>
<RowCell Index="6">
<RowCellCondition Operator="NA"/>
</RowCell>
</RowCellGroup>
</RowCellGroups>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="D"/>
<TableCell ColumnIndex="1" RowIndex="0" Value="D"/>
<TableCell ColumnIndex="2" RowIndex="0" Value="D"/>
<TableCell ColumnIndex="3" RowIndex="0" Value="D"/>
<TableCell ColumnIndex="4" RowIndex="0" Value="D"/>
<TableCell ColumnIndex="5" RowIndex="0" Value="D"/>
<TableCell ColumnIndex="6" RowIndex="0" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="I"/>
<TableCell ColumnIndex="1" RowIndex="1" Value="I"/>
<TableCell ColumnIndex="2" RowIndex="1" Value="I"/>
<TableCell ColumnIndex="3" RowIndex="1" Value="I"/>
<TableCell ColumnIndex="4" RowIndex="1" Value="I"/>
<TableCell ColumnIndex="5" RowIndex="1" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="1" Value="I"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="string" Description="" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.NegFileDetails.TENURE_RECENCY_STATUS" InputOrOutput="Input" Name="TenureRecency" ObjectOrReference="DOR" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.NegFileDetails.dor_InProcessNegFile"/>
<Mapping DataType="string" Description="" FieldOrDataMethodName="Application.CreditApplication.T_CHANNEL_CODE" InputOrOutput="Input" Name="Channel" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.NegFileDetails.RESULTING_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.NegFileDetails"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="Returns Credit Class for Puerto Rico for Equifax bureau" Name="dt_CClassPuertoRicoEfx" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="BureauScore" MappingName="BureauScore">
<ColumnCell Index="0">
<ColumnCellCondition Operator="le" Value="950"/>
<ColumnCellCondition Operator="le" Value="1,000"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="le" Value="900"/>
<ColumnCellCondition Operator="le" Value="949"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="le" Value="850"/>
<ColumnCellCondition Operator="le" Value="899"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="le" Value="800"/>
<ColumnCellCondition Operator="le" Value="849"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="le" Value="726"/>
<ColumnCellCondition Operator="le" Value="799"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="le" Value="600"/>
<ColumnCellCondition Operator="le" Value="725"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="le" Value="500"/>
<ColumnCellCondition Operator="le" Value="599"/>
</ColumnCell>
<ColumnCell Index="7">
<ColumnCellCondition Operator="le" Value="499"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups/>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="C"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="D"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="I"/>
<TableCell ColumnIndex="0" RowIndex="7" Value="Y"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="integer" Description="Bureau Score" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.SCORES.BureauScore" InputOrOutput="Input" Name="BureauScore" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.SCORES"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="Sets Credit Class for PG for Retail" Name="dt_PGCClassRetail" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="CreditClass" MappingName="CreditClass">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="A"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="B"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="C"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="L"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="eqs" Value="D"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="eqs" Value="N"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="eqs" Value="H"/>
</ColumnCell>
<ColumnCell Index="7">
<ColumnCellCondition Operator="eqs" Value="I"/>
</ColumnCell>
<ColumnCell Index="8">
<ColumnCellCondition Operator="eqs" Value="Y"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups/>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="4"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="4"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="0"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="7"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="7"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="7"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="5"/>
<TableCell ColumnIndex="0" RowIndex="7" Value="5"/>
<TableCell ColumnIndex="0" RowIndex="8" Value="6"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="string" Description="Consumer Credit Class" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Input" Name="CreditClass" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="NEG downgrade SOLD - Retail 410, TPR 120, Walmart 212, Telesales 220, Web 240, Webbank 213 and others " Name="dt_NEG_Downgrade_SOLD" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="CreditClass" MappingName="CreditClass">
<ColumnCell Index="0">
<ColumnCellCondition Operator="eqs" Value="A"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="eqs" Value="B"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="eqs" Value="C"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="eqs" Value="L"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="eqs" Value="D"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="eqs" Value="H"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="eqs" Value="I"/>
</ColumnCell>
<ColumnCell Index="7">
<ColumnCellCondition Operator="eqs" Value="Y"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups>
<RowCellGroup CellGroupName="Channel" MappingName="Channel">
<RowCell Index="0">
<RowCellCondition Operator="eqs" Value="410"/>
</RowCell>
<RowCell Index="1">
<RowCellCondition Operator="eqs" Value="120"/>
</RowCell>
<RowCell Index="2">
<RowCellCondition Operator="eqs" Value="212"/>
</RowCell>
<RowCell Index="3">
<RowCellCondition Operator="eqs" Value="220"/>
</RowCell>
<RowCell Index="4">
<RowCellCondition Operator="eqs" Value="240"/>
</RowCell>
<RowCell Index="5">
<RowCellCondition Operator="eqs" Value="213"/>
</RowCell>
<RowCell Index="6">
<RowCellCondition Operator="NA"/>
</RowCell>
</RowCellGroup>
</RowCellGroups>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="1" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="2" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="3" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="4" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="5" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="6" RowIndex="0" Value="B"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="1" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="2" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="3" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="4" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="5" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="6" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="L"/>
<TableCell ColumnIndex="1" RowIndex="2" Value="L"/>
<TableCell ColumnIndex="2" RowIndex="2" Value="L"/>
<TableCell ColumnIndex="3" RowIndex="2" Value="L"/>
<TableCell ColumnIndex="4" RowIndex="2" Value="L"/>
<TableCell ColumnIndex="5" RowIndex="2" Value="L"/>
<TableCell ColumnIndex="6" RowIndex="2" Value="L"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="3" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="3" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="3" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="3" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="3" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="3" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="4" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="4" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="4" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="4" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="4" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="4" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="1" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="2" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="3" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="4" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="5" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="6" RowIndex="5" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="6" Value="Y"/>
<TableCell ColumnIndex="0" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="1" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="2" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="3" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="4" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="5" RowIndex="7" Value="Y"/>
<TableCell ColumnIndex="6" RowIndex="7" Value="Y"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="string" Description="" FieldOrDataMethodName="Application.CreditApplication.T_CHANNEL_CODE" InputOrOutput="Input" Name="Channel" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication"/>
<Mapping DataType="string" Description="" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Input" Name="CreditClass" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.NegFileDetails.RESULTING_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.NegFileDetails"/>
</Mappings>
</DecisionTable>
<DecisionTable Description="Returns Credit Class for Puerto Rico for Trans Union bureau" Name="dt_CClassPuertoRicoTU" Type="string" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<TableData>
<ColumnCellGroups>
<ColumnCellGroup CellGroupName="BureauScore" MappingName="BureauScore">
<ColumnCell Index="0">
<ColumnCellCondition Operator="ge" Value="722"/>
</ColumnCell>
<ColumnCell Index="1">
<ColumnCellCondition Operator="le" Value="674"/>
<ColumnCellCondition Operator="le" Value="721"/>
</ColumnCell>
<ColumnCell Index="2">
<ColumnCellCondition Operator="le" Value="638"/>
<ColumnCellCondition Operator="le" Value="673"/>
</ColumnCell>
<ColumnCell Index="3">
<ColumnCellCondition Operator="le" Value="582"/>
<ColumnCellCondition Operator="le" Value="637"/>
</ColumnCell>
<ColumnCell Index="4">
<ColumnCellCondition Operator="le" Value="555"/>
<ColumnCellCondition Operator="le" Value="581"/>
</ColumnCell>
<ColumnCell Index="5">
<ColumnCellCondition Operator="le" Value="536"/>
<ColumnCellCondition Operator="le" Value="554"/>
</ColumnCell>
<ColumnCell Index="6">
<ColumnCellCondition Operator="le" Value="535"/>
</ColumnCell>
</ColumnCellGroup>
</ColumnCellGroups>
<RowCellGroups/>
<TableCells>
<TableCell ColumnIndex="0" RowIndex="0" Value="A"/>
<TableCell ColumnIndex="0" RowIndex="1" Value="B"/>
<TableCell ColumnIndex="0" RowIndex="2" Value="C"/>
<TableCell ColumnIndex="0" RowIndex="3" Value="D"/>
<TableCell ColumnIndex="0" RowIndex="4" Value="H"/>
<TableCell ColumnIndex="0" RowIndex="5" Value="I"/>
<TableCell ColumnIndex="0" RowIndex="6" Value="Y"/>
</TableCells>
</TableData>
<Mappings>
<Mapping DataType="integer" Description="Bureau Score" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.SCORES.BureauScore" InputOrOutput="Input" Name="BureauScore" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.SCORES"/>
<Mapping DataType="string" FieldOrDataMethodName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.INITIAL_CREDIT_CLASS" InputOrOutput="Output" Name="returnField" ObjectOrReference="Object" ObjectOrReferenceName="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput"/>
</Mappings>
</DecisionTable>
</DecisionTables>
<DecisionTrees/>
<InternalServices/>
<Rulesets>
<Ruleset DecisionLevel="Investigate" Description="Decision on Investigate Rules" Name="rs_FraudRulesConsumer" UseRulesetSeverityTreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Rules>
<Rule Context="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" Description="Active Duty Alert is on the bureau" IsActive="true" Name="r_Active_DutyAlert" UseMinimalEvaluation="true">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="ActiveDuty" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" OperandText="OTHERS.ScoreFlagACTIVEDUTY" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" OperandText="OTHERS.ScoreFlagVS" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;N&quot;" OperandType="Value"/>
</Condition>
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" OperandText="OTHERS.ScoreFlagCS" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;N&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
<Rule Context="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" Description="Consumer Statement on the bureau" IsActive="true" Name="r_ConsumerStatementAlert" UseMinimalEvaluation="true">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="ConsumerStatement" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" OperandText="OTHERS.ScoreFlagCS" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" OperandText="OTHERS.ScoreFlagVS" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;N&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
<Rule Context="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" Description="Victim Statement on the bureau" IsActive="true" Name="r_VictimStatementAlert" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="VictimExtended" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" OperandText="OTHERS.ScoreFlagVS" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
</Rules>
<RulesetStepResults>
<RulesetStepResult>Refer</RulesetStepResult>
</RulesetStepResults>
</Ruleset>
<Ruleset DecisionLevel="Investigate" Description="Decision on Investigate Rules for WFM" Name="rs_FraudRulesWFM" UseRulesetSeverityTreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Rules>
<Rule Context="Application.CreditApplication.PersonalApplicant" Description="Is there a Hot SSN hit?" IsActive="true" Name="r_HotSSNAlert" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="HotSSN" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant" OperandText="PersonalApplicant.FlagHotSSN" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
<Rule Context="Application.CreditApplication.PersonalApplicant" Description="Is there a Hot Name hit?" IsActive="true" Name="r_HotNameAlert" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="HotName" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant" OperandText="PersonalApplicant.FlagHotName" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
<Rule Context="Application.CreditApplication.PersonalApplicant" Description="Is there an OFAC Hit?" IsActive="true" Name="r_OFACAlert" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="OFAC" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant" OperandText="PersonalApplicant.OFACFlag" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
</Rules>
<RulesetStepResults>
<RulesetStepResult>Refer</RulesetStepResult>
</RulesetStepResults>
</Ruleset>
<Ruleset DecisionLevel="Investigate" Description="Whitelist alert" Name="rs_PSWLAlert" UseRulesetSeverityTreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Rules>
<Rule Context="Application" Description="if the workflow type code = 003 and no whitelist credit class is passed into DM, DM should return a NON-KBA alert" IsActive="true" Name="r_PSWLAlert" UseMinimalEvaluation="true">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="Whitelist Application ï¿½ No match found" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="PSWL_BLANK"/>
</Actions>
<Conditions ConditionMode="For ANY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application" OperandText="Application.dm_IsPSWLCC_Blank" OperandType="Data Method"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
</Rules>
<RulesetStepResults>
<RulesetStepResult>PSWL_BLANK</RulesetStepResult>
</RulesetStepResults>
</Ruleset>
<Ruleset DecisionLevel="Investigate" Description="Hot Name, Hot SSN, OFAC" Name="rs_FraudHotNameSSNOFAC" UseRulesetSeverityTreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Rules>
<Rule Context="Application.CreditApplication.PersonalApplicant" Description="Is there a Hot SSN hit?" IsActive="true" Name="r_HotSSNAlert" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="HotSSN" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant" OperandText="PersonalApplicant.FlagHotSSN" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
<Rule Context="Application.CreditApplication.PersonalApplicant" Description="Is there a Hot Name hit?" IsActive="true" Name="r_HotNameAlert" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="HotName" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant" OperandText="PersonalApplicant.FlagHotName" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
<Rule Context="Application.CreditApplication.PersonalApplicant" Description="Is there an OFAC Hit?" IsActive="true" Name="r_OFACAlert" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="OFAC" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant" OperandText="PersonalApplicant.OFACFlag" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
</Rules>
<RulesetStepResults>
<RulesetStepResult>Refer</RulesetStepResult>
</RulesetStepResults>
</Ruleset>
<Ruleset DecisionLevel="Investigate" Description="Check for Unknown Workflow Types" Name="rs_UnknownWorkflowType" UseRulesetSeverityTreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Rules>
<Rule Context="Application" Description="" IsActive="true" Name="r_UnknownWorkflowtype" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="Unknown workflow type" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="INV_WORKTYPE"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application" OperandText="Application.dm_CheckWorkflowType" OperandType="Data Method"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;INV_WORKTYPE&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
</Rules>
<RulesetStepResults>
<RulesetStepResult>INV_WORKTYPE</RulesetStepResult>
</RulesetStepResults>
</Ruleset>
<Ruleset DecisionLevel="Investigate" Description="Other Fraud Rules that trigger KBA" Name="rs_FraudRulesConsumerAdditional" UseRulesetSeverityTreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Rules>
<Rule Context="Application.CreditApplication.PersonalApplicant" Description="Is there an OFAC Alert" IsActive="false" Name="r_OFACAlert" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="OFAC" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant" OperandText="PersonalApplicant.OFACFlag" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
<Rule Context="Application.CreditApplication.PersonalApplicant" Description="Is there a Hot Name Alert" IsActive="false" Name="r_HotNameAlert" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="HotName" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant" OperandText="PersonalApplicant.FlagHotName" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
<Rule Context="Application.CreditApplication.PersonalApplicant" Description="Is there a hot SSN alert" IsActive="false" Name="r_HotSSNAlert" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="HotSSN" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant" OperandText="PersonalApplicant.FlagHotSSN" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
<Rule Context="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" Description="Suspicious SSN4 Alert" IsActive="true" Name="r_SuspiciousSSNAlertSSN_SUSP4" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="SuspicioudSSN4" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" OperandText="OTHERS.ScoreFlagSSNSUS4" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
<Rule Context="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" Description="Suspicious SSN3 Alert" IsActive="true" Name="r_SuspiciousSSN_AlertSSN_SUSP3" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="SuspicioudSSN3" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" OperandText="OTHERS.ScoreFlagSSNSUS3" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
<Rule Context="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" Description="Suspicious SSN2 Alert" IsActive="true" Name="r_SuspiciousSSNAlertSSN_SUSP2" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="SuspicioudSSN2" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" OperandText="OTHERS.ScoreFlagSSNSUS2" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
<Rule Context="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" Description="Misused SSN Alert" IsActive="true" Name="r_MisusedSSNAlert" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="SSNMisused" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" OperandText="OTHERS.ScoreFlagSSNMIS" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
<Rule Context="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" Description="SSN Not Issued Alert" IsActive="true" Name="r_SSNNotIssedAlert" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="SSNNotIssued" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" OperandText="OTHERS.ScoreFlagSSNNI" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
<Rule Context="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" Description="SSN Reported as Deceased on the bureau" IsActive="true" Name="r_SSNDeceasedAlert" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="SSNDeceased" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" OperandText="OTHERS.ScoreFlagDEAD" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
<Rule Context="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" Description="" IsActive="true" Name="r_Gaming" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="GAMING" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.PersonalApplicantOutput.FRAUD_ALERTS.OTHERS" OperandText="OTHERS.ScoreFlagGamingVelocity" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
</Rules>
<RulesetStepResults>
<RulesetStepResult>Refer</RulesetStepResult>
</RulesetStepResults>
</Ruleset>
<Ruleset DecisionLevel="Investigate" Description="Business Fraud Rules" Name="rs_BusinessFraud" UseRulesetSeverityTreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Rules>
<Rule Context="Application.CreditApplication.BusinessApplicant" Description="OFAC " IsActive="true" Name="r_OFAC" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="OFAC" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.BusinessApplicant" OperandText="BusinessApplicant.OFACFlag" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
<Rule Context="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput.FRAUD_ALERTS.OTHERS" Description="Gaming Velocity" IsActive="true" Name="r_Gaming" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="GAMING" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.BusinessApplicant.BusinessApplicantOutput.FRAUD_ALERTS.OTHERS" OperandText="OTHERS.ScoreFlagGamingVelocity" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
</Rules>
<RulesetStepResults>
<RulesetStepResult>Refer</RulesetStepResult>
</RulesetStepResults>
</Ruleset>
<Ruleset DecisionLevel="No Decision" Description="Checks if any unevaluated optimized offers exist " Name="rs_CheckUnEvaluatedNegFileDetails" UseRulesetSeverityTreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Rules>
<Rule Context="Application.CreditApplication.PersonalApplicant.NegFileDetails" Description="" IsActive="true" Name="r_UnEvaluatedNegFileDetails" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason/>
<ActionSetResult ResultValue="YES"/>
</Actions>
<Conditions ConditionMode="For ANY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant.NegFileDetails" OperandText="NegFileDetails.InProcess" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="0" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
</Rules>
<RulesetStepResults>
<RulesetStepResult>YES</RulesetStepResult>
</RulesetStepResults>
</Ruleset>
<Ruleset DecisionLevel="Investigate" Description="Decision on Investigate Rules for Smart Credit" Name="rs_FraudRulesSmart" UseRulesetSeverityTreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Rules>
<Rule Context="Application.CreditApplication.PersonalApplicant" Description="Is there an OFAC Hit?" IsActive="true" Name="r_OFACAlert" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="OFAC" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For EVERY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.PersonalApplicant" OperandText="PersonalApplicant.OFACFlag" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;Y&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
</Rules>
<RulesetStepResults>
<RulesetStepResult>Refer</RulesetStepResult>
</RulesetStepResults>
</Ruleset>
<Ruleset DecisionLevel="No Decision" Description="Dup Velocity" Name="rs_DupVelocity" UseRulesetSeverityTreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Rules>
<Rule Context="Application.CreditApplication.CreditApplicationOutput" Description="Dup velocity" IsActive="true" Name="r_velocity" UseMinimalEvaluation="true">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason/>
<ActionSetResult ResultValue="REFER"/>
</Actions>
<Conditions ConditionMode="For ANY Object in Context" ExecutionMode="Fire when EVERY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication.CreditApplicationOutput" OperandText="CreditApplicationOutput.DupVelocity" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="true" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
</Rules>
<RulesetStepResults>
<RulesetStepResult>REFER</RulesetStepResult>
</RulesetStepResults>
</Ruleset>
<Ruleset DecisionLevel="Investigate" Description="Used at the end of the fraud strategy tree" Name="rs_FraudStrategy" UseRulesetSeverityTreshold="false" Version="@@MAJOR.VERSION@@.@@MINOR.VERSION@@.@@EMINOR.VERSION@@.@@RELEASE.VERSION@@">
<Rules>
<Rule Context="Application.CreditApplication" Description="" IsActive="true" Name="r_FraudStrategy" UseMinimalEvaluation="false">
<RuleEffectiveDate/>
<Actions>
<ActionSetReason DecisionReason="PreciseID" ReasonRankOrder="1" SeverityLevel="0"/>
<ActionSetResult ResultValue="Refer"/>
</Actions>
<Conditions ConditionMode="For ANY Object in Context" ExecutionMode="Fire when ANY condition is met">
<Condition>
<Operand1 OperandContext="Application.CreditApplication" OperandText="CreditApplication.REVIEW_CREDIT_CLASS" OperandType="Field"/>
<Operator>eq</Operator>
<Operand2 OperandText="&quot;S&quot;" OperandType="Value"/>
</Condition>
</Conditions>
</Rule>
</Rules>
<RulesetStepResults>
<RulesetStepResult>Refer</RulesetStepResult>
</RulesetStepResults>
</Ruleset>
</Rulesets>
<Scenarios/>
<ScoreModels/>
<ProductStrategies/>
</DARepository>
